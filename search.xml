<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[3月初上海前端遇到笔试题面试题记录]]></title>
      <url>/2018/03/18/3%E6%9C%88%E5%88%9D%E4%B8%8A%E6%B5%B7%E5%89%8D%E7%AB%AF%E9%81%87%E5%88%B0%E7%AC%94%E8%AF%95%E9%A2%98%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过完元宵，就到上海找了波工作，现在已经入职好了，本文的题目都是中小公司的笔试面试题，里面大部分是我碰到比较频繁或者印象深刻的，在此做波记录，如果喜欢的话可以点波赞，或者关注一下，希望大家看完本文可以有所收获。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<hr>
<h3 id="Q：什么情况下会碰到跨域问题？有哪些解决方法？"><a href="#Q：什么情况下会碰到跨域问题？有哪些解决方法？" class="headerlink" title="Q：什么情况下会碰到跨域问题？有哪些解决方法？"></a>Q：什么情况下会碰到跨域问题？有哪些解决方法？</h3><ul>
<li>跨域问题是这是浏览器为了安全实施的同源策略导致的，同源策略限制了来自不同源的<code>document</code>、<code>脚本</code>，同源的意思就是<strong>两个URL的域名、协议、端口要完全相同。</strong></li>
<li>script标签jsonp跨域、nginx反向代理、node.js中间件代理跨域、后端在头部信息设置安全域名、后端在服务器上设置cors。</li>
</ul>
<hr>
<h3 id="Q：如何判断一个变量是对象还是数组？"><a href="#Q：如何判断一个变量是对象还是数组？" class="headerlink" title="Q：如何判断一个变量是对象还是数组？"></a>Q：如何判断一个变量是对象还是数组？</h3><p>判断数组和对象分别都有好几种方法，其中用<code>prototype.toString.call()</code>兼容性最好。</p>
<pre><code>function isObjArr(variable){
     if (Object.prototype.toString.call(value) === &quot;[object Array]&quot;) {
            console.log(&apos;value是数组&apos;);
       }else if(Object.prototype.toString.call(value)===&apos;[object Object]&apos;){//这个方法兼容性好一点
            console.log(&apos;value是对象&apos;);
      }else{
          console.log(&apos;value不是数组也不是对象&apos;)
      }
}
</code></pre><p>ps：<strong>千万不能使用typeof来判断对象和数组</strong>，因为这两种类型都会返回”object”。</p>
<hr>
<h3 id="Q：定时器的执行顺序或机制。"><a href="#Q：定时器的执行顺序或机制。" class="headerlink" title="Q：定时器的执行顺序或机制。"></a>Q：定时器的执行顺序或机制。</h3><p>这个问题还是挺经常被问到的，有一些会直接问定时器的机制，有一些是通过笔试题的方式问执行顺序然后问我为什么是这样。</p>
<p>长话短说，我们需要记住的是：<strong>因为js是单线程的，浏览器遇到<code>setTimeout</code>或者<code>setInterval</code>会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行事件队列里面，等到浏览器执行完当前代码之后会看一下事件队列里面有没有任务，有的话才执行定时器的代码。</strong> 所以即使把定时器的时间设置为0还是会先执行当前的一些代码。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/3/18/1623523c039e18f5?w=478&amp;h=489&amp;f=png&amp;s=30591" alt=""></p>
<p>上面是我写的一个栗子，如果还不清楚的话，大家可以找一篇关于定时器机制的详解文章来看看。</p>
<hr>
<h3 id="Q：html中title属性和alt属性的区别？"><a href="#Q：html中title属性和alt属性的区别？" class="headerlink" title="Q：html中title属性和alt属性的区别？"></a>Q：html中title属性和alt属性的区别？</h3><p>这个问题被问了一次，当时我只记得，alt属性是用于img标签的，当图片失效的时候会出现alt属性里面的内容，title用来标记页面的title，当时面试官问我还有没有其他的区别。我。。。</p>
<p>然后我就找了一篇文章来看，涨了点姿势：</p>
<pre><code>1.&lt;img src=&quot;#&quot; alt=&quot;alt信息&quot; /&gt;
//1.当图片不输出信息的时候，会显示alt信息 鼠标放上去没有信息，当图片正常读取，不会出现alt信息
2.&lt;img src=&quot;#&quot; alt=&quot;alt信息&quot; title=&quot;title信息&quot; /&gt;
// 2.当图片不输出信息的时候，会显示alt信息 鼠标放上去会出现title信息
//当图片正常输出的时候，不会出现alt信息，鼠标放上去会出现title信息
</code></pre><p>另外还有一些关于title属性的知识：</p>
<pre><code>title属性可以用在除了base，basefont，head，html，meta，param，script和title之外的所有标签
title属性的功能是提示。额外的说明信息和非本质的信息请使用title属性。title属性值可以比alt属性值设置的更长
title属性有一个很好的用途，即为链接添加描述性文字，特别是当连接本身并不是十分清楚的表达了链接的目的。
</code></pre><hr>
<h3 id="Q：标准盒子模型与IE怪异盒子模型"><a href="#Q：标准盒子模型与IE怪异盒子模型" class="headerlink" title="Q：标准盒子模型与IE怪异盒子模型"></a>Q：标准盒子模型与IE怪异盒子模型</h3><p>这个问题主要会出现在笔试题上面，比如：</p>
<pre><code>&lt;div style=&quot;width:100px;height=&quot;100px;border:10px;padding:10px;&quot;&gt;&lt;/div&gt;
</code></pre><p>这个盒子在w3c标准盒子模型和IE的怪异盒子模型下面它的宽度分别是多少？</p>
<pre><code>标准盒子模型：总宽度=content100px+border 10px*2+padding 10px*2 //140px
怪异盒子模型: 总宽度=content60px+ border 10px*2+padding 10px*2 //100px
</code></pre><p>ps：</p>
<pre><code>box-sizing： content-box || border-box；//css3 box-sizing设置为border-box将使用怪异盒子模型
当怪异盒子的宽度小于border+padding的宽度的时候，content width将变为0，盒子的宽度会被border和padding的总宽度撑开
</code></pre><hr>
<h3 id="ES5的继承和ES6的继承有什么区别？"><a href="#ES5的继承和ES6的继承有什么区别？" class="headerlink" title="ES5的继承和ES6的继承有什么区别？"></a>ES5的继承和ES6的继承有什么区别？</h3><p>ES5的继承时通过prototype或构造函数机制来实现。<strong>ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上</strong>（Parent.apply(this)）。</p>
<p>ES6的继承机制完全不同，<strong>实质上是先创建父类的实例对象this（所以必须先调用父类的super()方法），然后再用子类的构造函数修改this</strong>。</p>
<p>具体的：ES6通过class关键字定义类，里面有构造方法，类之间通过extends关键字实现继承。子类必须在constructor方法中调用super方法，否则新建实例报错。因为子类没有自己的this对象，而是继承了父类的this对象，然后对其进行加工。如果不调用super方法，子类得不到this对象。</p>
<p>ps：super关键字指代父类的实例，即父类的this对象。在子类构造函数中，调用super后，才可使用this关键字，否则报错。</p>
<hr>
<h3 id="Q：CSS3有哪些新增的属性？"><a href="#Q：CSS3有哪些新增的属性？" class="headerlink" title="Q：CSS3有哪些新增的属性？"></a>Q：CSS3有哪些新增的属性？</h3><pre><code>这里可以分为边框、背景，渐变，阴影、2D转换 3D转换等之类的来说。
比如：边框(border-radius、border-shadow、border-image)之类的 。
</code></pre><p>具体的可以参见菜鸟教程：<a href="http://www.runoob.com/css3/css3-tutorial.html" target="_blank" rel="external">链接</a>。类似的镜像问题还有HTML5的新增属性，可以自己谷歌一下。</p>
<hr>
<h3 id="Q：你知道哪些http状态码？"><a href="#Q：你知道哪些http状态码？" class="headerlink" title="Q：你知道哪些http状态码？"></a>Q：你知道哪些http状态码？</h3><pre><code>1xx：1开头的是信息状态码
2xx：2开头的是请求成功
3xx：3开头的是重定向
4xx：4开头的是客户端错误
5xx：5开头的是服务器错误
</code></pre><p>这个问题并不难，在笔试面试都有碰到过，巧的是之前我就总结过一篇类似的<a href="https://juejin.im/post/590082e6a22b9d0065be1a5c" target="_blank" rel="external">文章</a>。</p>
<hr>
<h3 id="Q-如何对一个数组去重？"><a href="#Q-如何对一个数组去重？" class="headerlink" title="Q:如何对一个数组去重？"></a>Q:如何对一个数组去重？</h3><p>这个问题出现了好几次，而且很多面试官不满足你只给出一两种方法。</p>
<p>1、<strong>Set结构去重</strong>。</p>
<p>这是ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<pre><code>let unique= [...new Set(array)];
//es6 Set数据结构类似于数组，成员值是唯一的，有重复的值会自动去重。
//Set内部使用===来判断是否相等，类似&apos;1&apos;和1会两个都保存，NaN和NaN只会保存一个
</code></pre><p>2、遍历，将值添加到新数组，<strong>用indexOf()判断值是否存在，已存在就不添加</strong>，达到去重效果。</p>
<pre><code>    let a = [&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,1,NaN,NaN,undefined,undefined,null,null, &apos;a&apos;,&apos;b&apos;,&apos;b&apos;];
    let unique= arr =&gt;{
         let newA=[];
        arr.forEach(key =&gt; {
           if( newA.indexOf(key)&lt;0 ){ //遍历newA是否存在key，如果存在key会大于0就跳过push的那一步
             newA.push(key);
           }
        });
        return newA;
    }
    console.log(unique(a)) ;//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, 1, NaN, NaN, undefined, null, &quot;a&quot;, &quot;b&quot;]
//ps:这个方法不能分辨NaN,会出现两个NaN。是有问题的，下面那个方法好一点。
</code></pre><p>3、遍历，将数组的值添加到一个对象的属性名里，并给属性赋值，<strong>对象不能添加相同属性名，以这个为依据可以实现数组去重</strong>，然后用<code>Object.keys(对象)</code>返回这个对象可枚举属性组成的数组，这个数组就是去重后的数组。</p>
<pre><code>let a = [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, 1,NaN,NaN,undefined,undefined,null,null, &apos;a&apos;, &apos;b&apos;, &apos;b&apos;];
const unique = arr =&gt; {
    var obj = {}
    arr.forEach(value =&gt; {
        obj[value] = 0;//这步新添加一个属性，并赋值，如果不赋值的话，属性会添加不上去
    })
    return Object.keys(obj);//`Object.keys(对象)`返回这个对象可枚举属性组成的数组，这个数组就是去重后的数组
}
console.log(unique(a));//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;NaN&quot;, &quot;undefined&quot;, &quot;null&quot;, &quot;a&quot;, &quot;b&quot;]
</code></pre><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>这个方法会将 number,NaN,undefined,null，<strong>变为字符串形式，因为对象的属性名就是一个字符串</strong>，根据需求来吧，想想还是Set去重最简单也最有效。</p>
<hr>
<h3 id="Q：垂直居中有哪些方法？"><a href="#Q：垂直居中有哪些方法？" class="headerlink" title="Q：垂直居中有哪些方法？"></a>Q：垂直居中有哪些方法？</h3><ul>
<li>单行文本的话可以使用<code>height和line-height</code>设置同一高度。</li>
<li><code>position+margin</code>：设置父元素:<code>position: relative;</code>，子元素<code>height: 100px; position:absolute;top: 50%; margin: -50px 0 0 0;</code>（定高）</li>
<li><code>position+transform</code>：设置父元素<code>position:relative</code>,子元素：<code>position: absolute;top: 50%;transform: translate(0, -50%);</code>（不定高）</li>
<li>百搭flex布局(ie10+)，设置父元素<code>display:flex;align-items: center;</code>（不定高）</li>
</ul>
<p>类似的还有很多，实际应用中，可能就会使用一两种方法，有兴趣的可以看下这篇<a href="https://www.cnblogs.com/zhouhuan/p/vertical_center.html" target="_blank" rel="external">文章</a></p>
<hr>
<h3 id="Q：翻转一个字符串"><a href="#Q：翻转一个字符串" class="headerlink" title="Q：翻转一个字符串"></a>Q：翻转一个字符串</h3><p>这个问题主要在笔试题碰到的多，思路就是先将字符串转成一个数组，然后用数组的<code>reverse()+join()</code>方法。</p>
<pre><code>let a=&quot;hello word&quot;;
let b=[...str].reverse().join(&quot;&quot;);//drow olleh
</code></pre><hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我想说的是：在找工作期间，肯定有自己发挥不好，或者不会的问题，一定要在晚上的时候自己再学习总结一下，在一个问题上面尽量不要栽倒两次，学到了的才是自己的。</p>
<p>以上就是近期面试遇到的一些问题记录总结，实际上还是有一些问题没有写出来，许久没有写文章了，写的很慢，有点累。先给自己立一个flag，下周再写一篇出来。希望各位大佬看了本文，能有所收获，感谢阅读。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="http://obkoro1.com/" target="_blank" rel="external">个人blog</a></strong> and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a></strong>  </p>
<p>以上2018.3.18</p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://www.cnblogs.com/yoyo24456/archive/2014/07/04/3823728.html" target="_blank" rel="external">title与alt的区别</a></p>
<p><a href="http://blog.csdn.net/dong_pt/article/details/51281372" target="_blank" rel="external">CSS-标准盒模型 &amp; 怪异盒模型</a></p>
<p><a href="https://juejin.im/post/5a7aaf745188257a5a4c9a39" target="_blank" rel="external">常见的js算法面试题收集，es6实现</a></p>
<p><a href="https://www.cnblogs.com/zhouhuan/p/vertical_center.html" target="_blank" rel="external">CSS垂直居中的11种实现方式</a></p>
]]></content>
      
        <categories>
            
            <category> 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue实践过程中的几个问题]]></title>
      <url>/2018/01/17/Vue%E5%AE%9E%E8%B7%B5%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇是我在使用vue过程中，遇到的几个小问题和之前不了解的东西，记录下来，希望能够帮助各位踩坑。如果喜欢的话可以点波赞，或者关注一下，希望本文可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h2 id="本篇记录个人遇到的问题如下"><a href="#本篇记录个人遇到的问题如下" class="headerlink" title="本篇记录个人遇到的问题如下:"></a>本篇记录个人遇到的问题如下:</h2><ol>
<li>路由变化页面数据不刷新问题</li>
<li>setTimeout/setInterval this指向改变，无法用this访问VUe实例</li>
<li>setInterval路由跳转继续运行并没有销毁</li>
<li>vue 滚动行为(浏览器回退记忆位置)用法</li>
<li>vue路由拦截浏览器后退实现草稿保存类似需求</li>
<li>v-once 只渲染元素和组件一次，优化更新渲染性能</li>
<li>vue框架<a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="external">风格指南</a>推荐</li>
</ol>
<h2 id="路由变化页面数据不刷新问题"><a href="#路由变化页面数据不刷新问题" class="headerlink" title="路由变化页面数据不刷新问题"></a>路由变化页面数据不刷新问题</h2><blockquote>
<p>场景：比如文章详情数据，依赖路由的<code>params</code>参数获取的(ajax写在created生命周期里面)，因为路由懒加载的关系，退出页面再进入另一个文章页面并不会运行created组件生命周期，导致文章数据还是上一个文章的数据。</p>
</blockquote>
<h3 id="解决方法：watch监听路由是否变化"><a href="#解决方法：watch监听路由是否变化" class="headerlink" title="解决方法：watch监听路由是否变化"></a>解决方法：watch监听路由是否变化</h3><pre><code> watch: {
  &apos;$route&apos; (to, from) { //监听路由是否变化
    if(this.$route.params.articleId){//是否有文章id
      //获取文章数据
    }
  }
}
</code></pre><h2 id="setTimeout-setInterval-this指向改变，无法用this访问VUe实例"><a href="#setTimeout-setInterval-this指向改变，无法用this访问VUe实例" class="headerlink" title="setTimeout/setInterval this指向改变，无法用this访问VUe实例"></a>setTimeout/setInterval this指向改变，无法用this访问VUe实例</h2><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><pre><code>mounted(){ 
      setTimeout(function () { //setInterval同理 
        console.log(this);//此时this指向Window对象
      },1000);
  }
</code></pre><h3 id="解决方法：使用箭头函数或者"><a href="#解决方法：使用箭头函数或者" class="headerlink" title="解决方法：使用箭头函数或者"></a>解决方法：使用箭头函数或者</h3><pre><code>//箭头函数访问this实例 因为箭头函数本身没有绑定this
 setTimeout(() =&gt; { 
   console.log(this);
}, 500);
//使用变量访问this实例
let self=this;
    setTimeout(function () {  
      console.log(self);//使用self变量访问this实例
    },1000);
</code></pre><h2 id="setInterval路由跳转继续运行并没有销毁"><a href="#setInterval路由跳转继续运行并没有销毁" class="headerlink" title="setInterval路由跳转继续运行并没有销毁"></a>setInterval路由跳转继续运行并没有销毁</h2><h3 id="场景：-1"><a href="#场景：-1" class="headerlink" title="场景："></a>场景：</h3><p>比如一些弹幕，走马灯文字，这类需要定时调用的，路由跳转之后，因为组件已经销毁了，但是setInterval还没有销毁，还在继续后台调用，控制台会不断报错，如果运算量大的话，无法及时清除，会导致严重的页面卡顿。</p>
<h3 id="解决办法：在组件生命周期beforeDestroy停止setInterval"><a href="#解决办法：在组件生命周期beforeDestroy停止setInterval" class="headerlink" title="解决办法：在组件生命周期beforeDestroy停止setInterval"></a>解决办法：在组件生命周期beforeDestroy停止setInterval</h3><p>组件销毁前执行的钩子函数，跟其他生命周期钩子函数的用法相同。</p>
<pre><code>beforeDestroy(){
     //我通常是把setInterval()定时器赋值给this实例，然后就可以像下面这么暂停。
    clearInterval(this.intervalid);
},
</code></pre><h2 id="vue-滚动行为-浏览器回退记忆位置-用法"><a href="#vue-滚动行为-浏览器回退记忆位置-用法" class="headerlink" title="vue 滚动行为(浏览器回退记忆位置)用法"></a>vue 滚动行为(浏览器回退记忆位置)用法</h2><p>这个我当时做的时候以为很难，后来做好了才发现就是一个设置而已（前提是要开启路由的History 模式），下面做一个简单的分享。</p>
<h3 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h3><ol>
<li>要使用这一功能，首先需要开启vue-router的 <a href="https://router.vuejs.org/zh-cn/essentials/history-mode.html" target="_blank" rel="external">history模式</a></li>
</ol>
<p>如果之前一直使用的是<code>hash</code>模式(默认模式)，项目已经开发了一段时间，然后转history模式很可能会遇到：<a href="https://juejin.im/post/5a3f629cf265da430d5839ed" target="_blank" rel="external">这些问题</a></p>
<ol>
<li><p>滚动行为具体设置如下：</p>
<pre><code>const router = new VueRouter({
  mode: &apos;history&apos;,
scrollBehavior (to, from, savedPosition) {
    if (savedPosition) { //如果savedPosition存在，滚动条会自动跳到记录的值的地方
      return savedPosition
    } else {
      return { x: 0, y: 0 }//savedPosition也是一个记录x轴和y轴位置的对象
     }
    }，
  routes: [...]
})
</code></pre></li>
</ol>
<p><a href="https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html" target="_blank" rel="external">vue滚动行为文档</a>，可以进到这里看看更详细的信息。</p>
<h2 id="vue路由拦截浏览器后退实现草稿保存类似需求"><a href="#vue路由拦截浏览器后退实现草稿保存类似需求" class="headerlink" title="vue路由拦截浏览器后退实现草稿保存类似需求"></a>vue路由拦截浏览器后退实现草稿保存类似需求</h2><h3 id="场景：-2"><a href="#场景：-2" class="headerlink" title="场景："></a>场景：</h3><p>为了防止用户突然离开，没有保存已输入的信息。</p>
<h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><pre><code>//在路由组件中：
mounted(){
},
beforeRouteLeave (to, from, next) {
  if(用户已经输入信息){
    //出现弹窗提醒保存草稿，或者自动后台为其保存

  }else{
    next(true);//用户离开
  }
</code></pre><p>类似的还有<code>beforeEach</code>、<code>beforeRouteUpdate</code>，也分为全局钩子和组件钩子，见<a href="https://router.vuejs.org/zh-cn/advanced/navigation-guards.html" target="_blank" rel="external">路由文档</a>。</p>
<h2 id="v-once-只渲染元素和组件一次，优化更新渲染性能"><a href="#v-once-只渲染元素和组件一次，优化更新渲染性能" class="headerlink" title="v-once 只渲染元素和组件一次，优化更新渲染性能"></a>v-once 只渲染元素和组件一次，优化更新渲染性能</h2><p>觉得<a href="https://cn.vuejs.org/v2/api/#v-cloak" target="_blank" rel="external">v-once</a>这个api蛮6的，应该很多小伙伴都没有注意到这个api。</p>
<h3 id="文档介绍："><a href="#文档介绍：" class="headerlink" title="文档介绍："></a>文档介绍：</h3><p><img src="https://user-gold-cdn.xitu.io/2018/1/17/160ffd6c2dcf70e1?w=948&amp;h=716&amp;f=png&amp;s=64938" alt="v-once文档介绍"></p>
<p>这个api在我看来主要用于那些一次性渲染，并且不会再有操作更改这些渲染的值，这样就可以优化双向绑定的更新性能。</p>
<h3 id="文档推荐：对低开销的静态组件使用-v-once"><a href="#文档推荐：对低开销的静态组件使用-v-once" class="headerlink" title="文档推荐：对低开销的静态组件使用 v-once"></a><a href="https://cn.vuejs.org/v2/guide/components.html#对低开销的静态组件使用-v-once" target="_blank" rel="external">文档</a>推荐：对低开销的静态组件使用 v-once</h3><p>尽管在 Vue 中渲染 HTML 很快，不过当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来，就像这样：</p>
<pre><code>Vue.component(&apos;terms-of-service&apos;, {
  template: &apos;\
    &lt;div v-once&gt;\
      &lt;h1&gt;Terms of Service&lt;/h1&gt;\
      ...很多静态内容...\
    &lt;/div&gt;\
  &apos;
})
</code></pre><h2 id="vue风格指南推荐："><a href="#vue风格指南推荐：" class="headerlink" title="vue风格指南推荐："></a>vue风格指南推荐：</h2><p>写到这里想到vue框架还有一个<a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="external">风格指南</a>推荐，如下图所示，大家也可以学习一波。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/1/17/160fff0ec0147156?w=1578&amp;h=811&amp;f=png&amp;s=174542" alt="vue风格指南"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面就是我分享的几个小问题，希望大家看了能够有所收获！另：明年准备去上海，如果小伙伴的公司有坑，可以联系一下我。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="http://obkoro1.com/" target="_blank" rel="external">个人blog</a></strong> and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a></strong>  </p>
<p>以上2018.1.17</p>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 实践 </tag>
            
            <tag> Vue-router </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【读书笔记】《高性能JavaScript》]]></title>
      <url>/2018/01/09/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDJavaScript%E3%80%8B/</url>
      <content type="html"><![CDATA[<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>这本书是2010年出版的，这本书谈性能是有时效性的，现在马上就2018年了，这几年前端发展的速度是飞快的，书里面还有一些内容考虑IE6、7、8的东西，殊不知现在这些都已经不再考虑了，所以不可避免的有一些知识是比较老的。有些解决方法现在已经不是最好的解决方式，比如工具那一章。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>总的来说，这本书整体给出的性能优化建议，以及作者耐心的实践，对我们开发优化的启发和帮助还是很大的</strong>，因为它里边的很多知识，都是作者通过实践总结出来的，都是经验的积累，这在一般的教科书上是学不到的。特别是对于js基础比较差一点的，里面有很多知识点尽管在现在还是非常有必要的。</p>
<p><strong>下面我就将各章节的一些重要的知识点总结写出来，争取将干货都提取出来</strong>。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="https://user-gold-cdn.xitu.io/2017/12/31/160ac466f78b83d3?w=600&amp;h=784&amp;f=jpeg&amp;s=53979" alt=" 封面 "></p>
<h3 id="第一章-加载和执行"><a href="#第一章-加载和执行" class="headerlink" title="第一章-加载和执行"></a>第一章-加载和执行</h3><ol>
<li>js的阻塞特性：</li>
</ol>
<p>当浏览器在执行js代码的时候，不能同时做其他事情。（界面ui线程和js线程用的是同一进程，所以js执行越久，网页的响应时间越长。）</p>
<ol>
<li>脚本的位置</li>
</ol>
<p><strong>如果把脚本<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>中，页面会等js文件全部下载并执行完成后才开始渲染</strong>，在这些文件下载和执行的过程中：会导致访问网站的时候有明显的延迟，表现为：页面空白。</p>
<p> 性能提升：<strong>推荐将所有的<code>&lt;script&gt;</code>标签尽可能的放到<code>&lt;body&gt;</code>标签的底部</strong>，优先渲染页面，减少页面空白时间。</p>
<ol>
<li>组件脚本。</li>
</ol>
<p>每个<code>&lt;script&gt;</code>标签初始下载的时候都会阻塞页面的渲染。性能提升做法：<br><strong>减少内嵌脚本：减少内嵌的<code>&lt;script&gt;</code>标签</strong>，将代码写在一个标签中。</p>
<p><strong>合并外链的js文件</strong>：http请求会带来额外的性能开销，栗子：下载一个100KB的js文件比下载4个25kb的js文件更快。具体操作方法自行搜索。</p>
<ol>
<li>无阻塞脚本的方法</li>
</ol>
<p><strong>script标签的aync属性</strong>：</p>
<p>async 属性规定一旦脚本可用，则会异步执行。async 属性仅适用于外部脚本（只有在使用 src 属性时）。如果 async=”async”：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）</p>
<p><strong>script标签的defer属性</strong>：</p>
<p>js文件在页面解析到script标签的时候开始下载，但并不会执行，dom加载完成执行。<strong>这两个属性的区别在于执行时机</strong>。</p>
<p><strong>动态脚本元素</strong>。</p>
<p>js操作dom创建<code>&lt;script&gt;</code>标签，自定义生成标签的type、src属性。文件会在该元素被添加到页面的时候开始下载。ps：如果文件顺序很重要的话，最好按照顺序合成一个文件。然后再添加到页面中。这样：无论何时启动下载。文件的下载和执行过程不会阻塞页面的其他进程。</p>
<h5 id="3-XHR-ajax脚本注入、"><a href="#3-XHR-ajax脚本注入、" class="headerlink" title="3. XHR ajax脚本注入、"></a>3. XHR ajax脚本注入、</h5><p>用get请求一个文件，请求好了。然后创建动态脚本，最后添加进去。<br>缺陷：文件要再请求页面的同一个域。不能从cdn下载</p>
<h3 id="第一章加载和执行小结："><a href="#第一章加载和执行小结：" class="headerlink" title="第一章加载和执行小结："></a>第一章加载和执行小结：</h3><ol>
<li>把文件放在body标签签名，</li>
<li>合并脚本，减少<code>&lt;script&gt;</code>标签。</li>
<li>采用无阻塞下载js。使用script的defer和async属性 异步下载。动态创建script标签和执行代码。</li>
</ol>
<h3 id="第二章-数据存取"><a href="#第二章-数据存取" class="headerlink" title="第二章-数据存取"></a>第二章-数据存取</h3><ol>
<li><strong>js四种基本的数据存取位置</strong>。<br>1、字面量：字符串、数字、布尔、对象、数组、函数、正则、null、undefined，字面量只代表自身，没有存储位置。 2、局部变量。 let var 声明的变量。3、数组元素。4、对象成员。</li>
</ol>
<p>性能：<strong>访问字面量和局部变量的速度是最快的，访问数组和对象成员相对较慢</strong></p>
<ol>
<li><strong>变量标识符解析过程</strong>：</li>
</ol>
<p>搜索执行环境的作用域链，查找同名标识符。搜索过程从作用域链头部开始，也就是当前运行函数的活动对象。如果找到，就使用这个标识符，对应的变量；如果没有找到，继续搜索下面的对象。搜索过程会持续进行，直到找到标识符，若无法搜索到匹配的对象，那么标识符被视为未定义、</p>
<p><strong>性能问题：一个标识符所在的位置越深，它的读写速度也就越慢</strong>。因此，函数中读写局部变量总是最快的，而读写全局变量通常是最慢的。</p>
<p><strong>建议：将全局变量存储到局部变量，加快读写速度。</strong></p>
<ol>
<li>闭包，原型，嵌套对象。</li>
</ol>
<p><strong>优化建议：将常用的跨作用域变量存储到局部变量，然后直接访问局部变量</strong>。理由如上，变量标识符解析过程。</p>
<h3 id="第二章数据存取小结："><a href="#第二章数据存取小结：" class="headerlink" title="第二章数据存取小结："></a>第二章数据存取小结：</h3><ol>
<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>
<li>由于局部变量存在于作用域链的起始位置，因为<strong>访问局部变量比访问跨作用域变量更快。这个道理同样适用于数组，对象，跨作用域变量</strong>。</li>
<li>把常用的对象，数组，跨域变量保存在局部变量可以改善js性能，局部变量访问速度更快。</li>
</ol>
<h3 id="第三章DOM编程小结："><a href="#第三章DOM编程小结：" class="headerlink" title="第三章DOM编程小结："></a>第三章DOM编程小结：</h3><ol>
<li><strong>dom操作天生就慢，尽量减少dom操作</strong>，减少访问dom的次数。</li>
<li>使用document.querySelect来做选择器，比其他方式快。</li>
<li>需要多次访问某个dom节点，使用局部变量存储。</li>
<li>html集合，把集合长度缓存到一个变量中，然后遍历使用这个变量，如果经常操作集合，建议拷到一个数组中。</li>
<li>要留意浏览器的重绘和重排；批量修改样式的时候，‘离线’操作DOM树，使用缓存，并减少访问布局信息的次数。<br>重绘和重排是DOM编程优化的一个相当重要概念：<a href="http://web.jobbole.com/83164/" target="_blank" rel="external">重绘和重排</a>。</li>
<li>动画中使用绝对定义，使用拖放处理。</li>
<li>使用事件委托来减少事件处理器的数量。</li>
</ol>
<h3 id="第四章算法和流程控制小结："><a href="#第四章算法和流程控制小结：" class="headerlink" title="第四章算法和流程控制小结："></a>第四章算法和流程控制小结：</h3><ol>
<li><p>for、while和do-while循环性能差不多，<strong>for-in循环速度只有前面几种类型的1/7</strong>，所以尽量避免使用for-in循环，除非你需要遍历一个属性数量未知的对象。</p>
<p> forEach比for慢，如果运行速度要求严格，不建议使用。</p>
</li>
<li><p>改善循环性能的最佳方式是<strong>减少每次迭代的工作量和减少循环迭代的次数</strong>。</p>
</li>
</ol>
<p>减少迭代工作量：减少属性查找和倒序循环，循环次数越多，性能优化越明显。</p>
<pre><code>for(var i=0;i&lt;items.length;i++){代码}//正序循环
for(var i=items.length;i--){代码}//倒序循环
//减少属性查找：查找一次属性，把值存在局部变量，在控制条件里面使用这个变量

倒序循环在i&gt;0的时候会自动转换为true，等于0的时候为false。
//倒序循环：控制条件从（迭代数少于总数吗？它是否为true？）变为（它是否为true）
</code></pre><p>减少迭代的次数：”Duff’s Device”循环体展开技术，有兴趣的可以看一下，迭代工作量大于1000的时候适用。</p>
<ol>
<li><p>if-else与switch：条件数量越大，越倾向于使用switch。</p>
<p> 优化if-else：</p>
<pre><code>1、把最可能出现的条件放在首位。2、使用二分法把值域分成一系列的区间。
</code></pre></li>
<li><p>浏览器的调用栈大小限制了递归算法在js中的应用；栈溢出错误会导致其他代码中断运行。</p>
<pre><code>小心使用递归，现在es6递归可以尾递归，在es6中只要使用尾递归就不会发生栈溢出，相对节省性能。
</code></pre></li>
</ol>
<h3 id="第五章字符串和正则表达式小结："><a href="#第五章字符串和正则表达式小结：" class="headerlink" title="第五章字符串和正则表达式小结："></a>第五章字符串和正则表达式小结：</h3><ol>
<li><p>字符串合并的时候使用简单的’+’和’+=’操作符。</p>
<pre><code>str+=&apos;abc&apos;+&apos;efg;//2个以上的字符串拼接，会产生临时字符串
str=str+&apos;abc&apos;+&apos;efg&apos;;//推荐，提速10%~40%  
</code></pre></li>
<li><p>书里面讲的<strong>正则原理和回溯原理，这个很重要</strong>，找个篇<a href="http://blog.csdn.net/c_kite/article/details/77875328" target="_blank" rel="external">博客</a>：跟书里面讲的差不多，但还是建议大家可以去找找PDF好好看看正则表达式这节。</p>
</li>
<li><p>提高正则表达式效率的方法：</p>
<pre><code>1、最重要的是：具体化正则表达式！具体化正则表达式！具体化正则表达式！
2、关注如何让匹配更快失败，找出一些必需，特殊的字符
3、正则表达式以简单的、必需的字元开始。
4、使用量词模式，使它们后面的字元互斥。
5、较少分支数量，缩小分支范围
6、使用合适的量词
7、把正则表达式赋值给变量并重用
8、将复杂的正则拆分为简单的片段
//事实上，书里面讲的方法不止这么几个，而且每一个都有详细的解析 大佬们 还是去看看这一章节吧
</code></pre></li>
<li><p>正则表达式并不总是最好的解决方案，当你只是搜索字面字符串或者你事先知道字符串的哪一部分将要被查找时：</p>
<pre><code>使用indexOf()和lastIndexOf()更适合查找特定字符串的位置或者判断它们是否存在
//例如：判断当前浏览器之类。
</code></pre></li>
</ol>
<h3 id="第六章快速响应的用户界面小结："><a href="#第六章快速响应的用户界面小结：" class="headerlink" title="第六章快速响应的用户界面小结："></a>第六章快速响应的用户界面小结：</h3><p>js和用户界面更新在同一个进程中运行，因此一次只能处理一件事情。高效的管理UI线程就是要确保js不能运行太长时间，以免影响用户体验。</p>
<ol>
<li><p>浏览器限制了js任务的运行时间，这种限制很有必要，它确保某些恶意代码不能通过永不停止的密集操作锁住用户的浏览器。此限制分为两种：调用栈的大小和长时间运行脚本。</p>
</li>
<li><p>任何js任务都不应当执行超过100毫秒。过长的运行时间会导致UI更新出现明显延迟，从而对用户体验造成负面影响。 </p>
</li>
<li><p>定时器可用来安排代码延迟执行，它使得你可以把长时间运行脚本分解成一系列的小任务。</p>
</li>
</ol>
<h3 id="第七章-AJAX-小结"><a href="#第七章-AJAX-小结" class="headerlink" title="第七章 AJAX 小结"></a>第七章 AJAX 小结</h3><p>这一章节貌似东西都比较老一点。。</p>
<ol>
<li>post更适合发送大量数据到服务器。</li>
<li><p>get请求能够被浏览器缓存，Expires头信息设置浏览器缓存请求多久。可用于从不改变的图片或者其他静态数据集（js、css等）</p>
</li>
<li><p>JSON是一种使用js对象和数组直接量编写的轻量级且易于解析的数据格式，它不仅传输尺寸小，而且解析速度快。JSON是高性能AJAX的基础，尤其在使用动态脚本注入时。</p>
</li>
</ol>
<p>json应该是近几年一直在用的。。。</p>
<ol>
<li>减少请求数，通过合并js和css文件。</li>
<li>缩短页面的加载时间，页面主要内容加载完成后，用AJAX获取那些次要的文件。</li>
</ol>
<h3 id="第八章编程实践小结"><a href="#第八章编程实践小结" class="headerlink" title="第八章编程实践小结"></a>第八章编程实践小结</h3><ol>
<li><p>避免双重求值：避免使用eval()和 function()构造器来避免双重求值带来的性能消耗，同样的，给setTimeout()和setInterval()传递函数而不是字符串作为参数。</p>
<pre><code>//双重求值：就是在js代码中执行另一段js代码，不建议使用下面这些方式
eval(&apos;代码&apos;) 
function构造函数--new function(&apos;代码&apos;)
setTimeout(‘代码’,100)和setInterval(‘代码’,100) 
</code></pre></li>
<li>尽量使用直接量创建对象和数组。直接量的创建和初始化都比非直接量形式要快。</li>
<li>避免做重复工作，能节省的步骤就节省。</li>
<li>js原生方法总会比你写的任何代码都要快。</li>
</ol>
<h3 id="第九章-构建并部署高性能js应用小结"><a href="#第九章-构建并部署高性能js应用小结" class="headerlink" title="第九章 构建并部署高性能js应用小结"></a>第九章 构建并部署高性能js应用小结</h3><p>构建和部署的过程对基于js的web应用的性能有着巨大影响。这个过程中最重要的步骤有：</p>
<ol>
<li>合并、压缩js文件。<strong>可使用Gzip压缩，能够减少约70%的体积</strong>！</li>
</ol>
<p>这些都是在构建过程中完成的工作，不要等到运行时去做，webpack也是在构建过程中，完成的工作。</p>
<ol>
<li>通过正确设置HTTP响应头来缓存js文件，通过向文件名增加时间戳来避免缓存问题。</li>
<li>使用CDN提供js文件；CDN不仅可以提升性能，它也为你管理文件的压缩与缓存，。</li>
</ol>
<h3 id="第十章-工具-小结："><a href="#第十章-工具-小结：" class="headerlink" title="第十章 工具 小结："></a>第十章 工具 小结：</h3><p>当网页变慢时，分析从网络下载的资源以及分析的资源以及分析脚本的运行性能能让你专注于那些最需要优化的地方。</p>
<ol>
<li><p>使用网络分析工具找出加载脚本和页面中其他资源的瓶颈，这会帮助你决定那些脚本需要延迟加载，或者需要进一步分析。</p>
<pre><code>检查图片、样式表和脚本的加载过程，以及它们对页面整体加载和渲染的影响。从而针对性的做出优化
</code></pre></li>
<li>把脚本尽可能延迟加载，这样做可以加快页面渲染速度，给用户带来更好的体验。</li>
<li><p>确认脚本和其他资源文件的加载过程已经被优化</p>
<pre><code>这里主要是说文件从服务器的下载速度，比如服务器那边的配置问题之类的。
栗子：我就被后端坑过。一个js文件就200k ，下载下来需要50秒钟！
后面发现原来是后端那边nginx没有开启加速配置什么的，导致出现的问题，找问题找半天。 
</code></pre></li>
<li><p>测试脚本的运行时间,用一个Date实例减去另一个Date实例，得到的时间差就是脚本运行消耗的时间。</p>
<pre><code>let start=new Date();
//你的代码
let time=newDate()-start;
</code></pre></li>
<li><p><strong>chrome ,火狐 等主流浏览器的控制面板，已经能够反映很多性能问题</strong>。仔细分析就能找出很多问题。例如：资源加载，断点等</p>
</li>
</ol>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>事实上，<strong>自认为这本书最宝贵的就是一些提到的细节</strong>，比如：</p>
<p>1、字符串合并的时候使用简单的’+’和’+=’操作符。</p>
<pre><code>str+=&apos;abc&apos;+&apos;efg;//2个以上的字符串拼接，会产生临时字符串
str=str+&apos;abc&apos;+&apos;efg&apos;;//推荐，提速10%~40%
</code></pre><p>2、避免双重求值：避免使用eval()和 function()构造器来避免双重求值带来的性能消耗，同样的，给setTimeout()和setInterval()传递函数而不是字符串作为参数。</p>
<pre><code>//双重求值：就是在js代码中执行另一段js代码，不建议使用下面这些方式
eval(&apos;代码&apos;) 
function构造函数--new function(&apos;代码&apos;)
setTimeout(‘代码’,100)和setInterval(‘代码’,100) 
</code></pre><h3 id="这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。"><a href="#这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。" class="headerlink" title="这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。"></a>这些东西可以让我们知道什么是更好的实践，什么样的代码可以跑得更快，让我们养成更好的开发习惯。</h3><p>书不太厚，如果对里面的内容感兴趣，还是建议买一本回家看一看。</p>
<p>以上2017.1.9</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 性能 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 简单的推箱子小游戏步骤解析--大家都玩过的]]></title>
      <url>/2018/01/07/js-%E7%AE%80%E5%8D%95%E7%9A%84%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F%E6%AD%A5%E9%AA%A4%E8%A7%A3%E6%9E%90-%E5%A4%A7%E5%AE%B6%E9%83%BD%E7%8E%A9%E8%BF%87%E7%9A%84/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>推箱子小游戏大家肯定都玩过，之所以写这篇文章，是觉得这个小游戏足够简单好理解，大家看完文章之后，自己也能花上半天功夫敲出一个推箱子小游戏来，如果喜欢的话可以点波赞，或者关注一下，希望本文可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h3 id="demo：推箱子小游戏"><a href="#demo：推箱子小游戏" class="headerlink" title="demo：推箱子小游戏"></a>demo：<a href="http://obkoro1.com/simpleDemo/pushKoro/index.html" target="_blank" rel="external">推箱子小游戏</a></h3><p><img src="https://user-gold-cdn.xitu.io/2018/1/8/160d15a420195ea4?w=611&amp;h=529&amp;f=png&amp;s=8760" alt="推箱子"></p>
<h2 id="步骤解析："><a href="#步骤解析：" class="headerlink" title="步骤解析："></a>步骤解析：</h2><p><strong>本文代码已经放在了<a href="https://github.com/OBKoro1/simpleDemo/tree/master/pushKoro" target="_blank" rel="external">github</a>上面了,里面也进行了很详细的代码注释，可以copy下来，在本地运行一下看看</strong>。</p>
<h3 id="1-渲染地图"><a href="#1-渲染地图" class="headerlink" title="1. 渲染地图"></a>1. 渲染地图</h3><ol>
<li><p>html结构：<br><img src="https://user-gold-cdn.xitu.io/2018/1/7/160d1149856a3714?w=503&amp;h=727&amp;f=png&amp;s=48024" alt=""></p>
<pre><code>html结构十分简单，只要弄一堆div，来放置地图的class就可以了，我这里初始化了12*9个div，地图里最多九行高度。   
这些div都是同样大小，地图渲染出来区别的只是颜色的不同。
</code></pre><ol>
<li><p>地图函数：</p>
<p>  var box=$(‘.box div’); //地图使用的div集合<br>  function create(){ //创建地图函数<br>  box.each(function(index){ //index的数量是固定的，是box div下面div的数量</p>
<pre><code> // 每次创建地图初始化div
box.eq(index).removeClass();
</code></pre><p>  });<br>  box.each(function(index,element){ //循环整个div的数量 二维数组里数量不够的 默认为空白<br>  //level为关卡数 根据关卡渲染地图 builder为二维数组，为地图关卡</p>
<pre><code>if(builder[level][index]){ //过滤0
    box.eq(index).addClass(&apos;type&apos;+builder[level][index]);
}
</code></pre><p>  });<br>  box.eq(origin[level]).addClass(“pusher”); //推箱人 皮卡丘位置<br>  }</p>
<p>  //第一关的地图长这样（下面只是栗子，不是代码），0代表不可抵达区域，1代表目标（要被推到的地方），<br>  //2代表普通路径（可以走的），3代表墙，4代表箱子<br>  [0,0,0,0,3,3,3,0,0,0,0,0,<br>  0,0,0,0,3,1,3,0,0,0,0,0,<br>  0,0,0,0,3,2,3,3,3,3,0,0,<br>  0,0,3,3,3,4,2,4,1,3,0,0,<br>  0,0,3,1,2,4,2,3,3,3,0,0,<br>  0,0,3,3,3,3,4,3,0,0,0,0,<br>  0,0,0,0,0,3,1,3,0,0,0,0,<br>  0,0,0,0,0,3,3,3,0,0,0,0] </p>
</li>
</ol>
</li>
</ol>
<h3 id="2-捕获键盘事件-判断是否可以移动"><a href="#2-捕获键盘事件-判断是否可以移动" class="headerlink" title="2. 捕获键盘事件,判断是否可以移动"></a>2. 捕获键盘事件,判断是否可以移动</h3><p>使用<a href="http://www.w3school.com.cn/jquery/event_keydown.asp" target="_blank" rel="external">$(document).keydown()</a>jqery事件，捕获键盘事件。</p>
<ol>
<li><p>捕获键盘事件，上下左右以及wsad。 </p>
<pre><code>$(document).keydown(function (e) {
 var key=e.which;
 switch(key){
 //col 的值为12，上下移动要12个div为一个周期
 //方向键上或者w
 case 87:
 case 38:
     move(-col);//判断移动函数
 break;
 //方向键下或者s
 case 83:
 case 40:
    move(col);
 break;
 //方向键左或者a
 case 65:
 case 37:
     move(-1);
 break;
 //方向键右或者d
 case 68:
 case 39:
     move(1);
 break;
 }
setTimeout(win,500); //按键之后调判断是否过关
});
</code></pre></li>
<li><p>判断是否可以移动。</p>
</li>
</ol>
<p>分为两个判断条件：一个是推箱子，一个是不推箱子 自然移动，否则不移动皮卡丘。</p>
<pre><code>function move(step){ //是否移动判断
     // 分为两个判断条件一个是推箱子，一个是不推箱子 自然移动。 否则不移动皮卡丘
     //step 上下是12个div一个周期，左右是1个div positin是皮卡丘的原来位置
    var pikaqiu1=box.eq(position);//皮卡丘现在的地方
    var pikaqiu2=box.eq(position+step);//皮卡丘要去的下一个地方
    var pushBox=box.eq(position+step*2);//箱子要去的下一个地方
    if(!pikaqiu2.hasClass(&apos;type4&apos;)&amp;&amp;( pikaqiu2.hasClass(&apos;type1&apos;)||pikaqiu2.hasClass(&apos;type2&apos;))){ //自然移动
        //判断：如果下一个div的class不包含type4(箱子)，并且 下一个div含有type1(目标位置)，或者type2(普通路径)
        //这一步和下一步判断是否有type4的原因是普通路径会变成有type4的路径，这时候就会出现问题
        pikaqiu1.removeClass(&quot;pusher&quot;); //移除当前皮卡丘
        pikaqiu2.addClass(&quot;pusher&quot;);//移动皮卡丘到下一个位置
        position=position+step;//增加position值
    }
    else if((pikaqiu2.hasClass(&apos;type4&apos;))&amp;&amp;(!pushBox.hasClass(&apos;type4&apos;))&amp;&amp;(pushBox.hasClass(&apos;type1&apos;)|| pushBox.hasClass(&apos;type2&apos;)) ) {
        //推箱子    
        //如果下一个div的class包含type4(箱子)并且 不包含重叠type4(箱子) 并且 包含class type1（目标位置）或者 包含type2(空路)
       pikaqiu2.removeClass(&apos;type4&apos;);//移除当前箱子
        pikaqiu1.removeClass(&quot;pusher&quot;);//移除当前皮卡丘
        pushBox.addClass(&apos;type4&apos;);//移动箱子到下一个位置
        pikaqiu2.addClass(&quot;pusher&quot;).addClass(&quot;type2&quot;);//
        //本来是type4 移除之后，这里没有class了，要变成普通路径
        position=position+step;//增加position值 
    }
}    
</code></pre><h3 id="3-胜利判断："><a href="#3-胜利判断：" class="headerlink" title="3.胜利判断："></a>3.胜利判断：</h3><p>每次移动都要调用这个胜利判断。</p>
<pre><code>function win(){ //胜利条件判断
    if($(&quot;.type1.type4&quot;).length===goal){ //推的箱子与关卡设置通过箱子的数量对比
        if(level&lt;9) {
            alert(&quot;666，挑战下一关吧--OBKoro1&quot;);
            level++; //关卡+1
            goal = goalList[level];
            position = origin[level];
            create();
        }else {
            alert(&quot;厉害啊 大佬 通关了都&quot;);
        }
    }
}
</code></pre><h3 id="代码地址、demo地址"><a href="#代码地址、demo地址" class="headerlink" title="代码地址、demo地址"></a><a href="https://github.com/OBKoro1/simpleDemo/tree/master/pushKoro" target="_blank" rel="external">代码地址</a>、<a href="http://obkoro1.com/simpleDemo/pushKoro/index.html" target="_blank" rel="external">demo地址</a></h3><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文到这里就结束了，喜欢的话，赶紧自己去敲一个出来，希望本文可以帮助大家发散思维。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="http://obkoro1.com/" target="_blank" rel="external">个人blog</a></strong> and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a></strong>  </p>
<p>以上2018.1.7</p>
]]></content>
      
        <categories>
            
            <category> 小demo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> jq </tag>
            
            <tag> 小demo </tag>
            
            <tag> H5小游戏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue先hash 模式部署项目，然后开启histroy模式 ，引发的几个问题以及histroy模式的开启方式、优点]]></title>
      <url>/2017/12/25/vue%E5%85%88hash-%E6%A8%A1%E5%BC%8F%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%EF%BC%8C%E7%84%B6%E5%90%8E%E5%BC%80%E5%90%AFhistroy%E6%A8%A1%E5%BC%8F-%EF%BC%8C%E5%BC%95%E5%8F%91%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8Ahistroy%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E5%90%AF%E6%96%B9%E5%BC%8F%E3%80%81%E4%BC%98%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>vue路由有一个<a href="https://router.vuejs.org/zh-cn/essentials/history-mode.html" target="_blank" rel="external">HTML5 History 模式</a>,这个模式要在路由里面另外开启的，很多人在刚使用路由的时候之前不知道这个模式，所以并没有启用，然后就把项目部署上去了，因为这个模式还是有挺多优点的，最后还是会开启这个模式。</p>
<p>然而因为<strong>之前使用hash模式再改为histroy模式还是有些问题的</strong>，我已经踩过坑了，然后把这几个问题写出来。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h3 id="开启history模式："><a href="#开启history模式：" class="headerlink" title="开启history模式："></a>开启history模式：</h3><p>如果不开启的话，路由默认是hash模式，开启这个模式前端的工作也很简单，如下：</p>
<pre><code>mode: &apos;history&apos; //在路由那里配置一下这个
</code></pre><p>最后需要后端的做一些配置配合，这里可以参考一下文档给的<a href="https://router.vuejs.org/zh-cn/essentials/history-mode.html" target="_blank" rel="external">栗子</a>。</p>
<h2 id="history模式的优点"><a href="#history模式的优点" class="headerlink" title="history模式的优点:"></a>history模式的优点:</h2><ol>
<li><p>url变成真正的url，url看上去更好看。</p>
<pre><code>http://yoursite.com/#/a/b  //hash模式
http://yoursite.com/a/b  //history模式
</code></pre></li>
<li><p>可以使用vue-router的<a href="https://router.vuejs.org/zh-cn/advanced/scroll-behavior.html" target="_blank" rel="external">滚动行为</a>，这个用来记忆进入其他页面之前的位置非常好用，配置一下就可以直接使用了，前提是开启histroy模式。<br><img src="https://user-gold-cdn.xitu.io/2017/12/24/160885359af4ff1e?w=1062&amp;h=271&amp;f=png&amp;s=35110" alt=""></p>
</li>
<li><p>类似<a href="http://obkoro1.com/2017/12/16/vue-%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E5%BC%95%E5%85%A5%E5%BE%AE%E4%BF%A1sdk%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E6%8E%A5%E5%8F%A3/" target="_blank" rel="external">项目引入微信js-sdk</a>的时候，一些操作是对url是有要求，url不能带上’#’，如果没有开启histroy模式，很可能会导致问题。</p>
</li>
<li><p>像vue-cli的配置，都是以路由开启history模式的标准来配置的（下面会讲到一个栗子），没有开启的话，自己要另外配置。</p>
</li>
</ol>
<h2 id="先hash模式，后histroy模式"><a href="#先hash模式，后histroy模式" class="headerlink" title="先hash模式，后histroy模式"></a>先hash模式，后histroy模式</h2><p>就像开头说的，这里的问题指的是：<strong>先用hash模式部署项目到线上，然后再开启histroy模式</strong>，由此引发的一些问题。</p>
<h3 id="1-找不到资源问题："><a href="#1-找不到资源问题：" class="headerlink" title="1.找不到资源问题："></a>1.找不到资源问题：</h3><p><strong>在hash模式下面，直接打包的话，会导致找不到css、js和图片资源</strong>，然后经过百度之后，做出了如下截图的配置操作，更改<code>assetsPublicPath：&#39;/&#39;</code>为 <code>assetsPublicPath：&#39;./&#39;</code></p>
<p><img src="https://user-gold-cdn.xitu.io/2017/12/24/16088625b417b4ac?w=872&amp;h=382&amp;f=png&amp;s=43320" alt=""></p>
<p>在hash模式下，像上面那么配置就没有问题了。当时我还以为vue-cli配置有问题，实际上，人家才没有问题呢，是我们自己没有开启history模式的问题。</p>
<p>然后开启了histroy模式之后，因为我们之前更改了assetsPublicPath属性，所以要把那个<code>.</code>给去掉，改回来：<code>assetsPublicPath：&#39;/&#39;</code></p>
<h3 id="2-请求带上路由，导致请求失败"><a href="#2-请求带上路由，导致请求失败" class="headerlink" title="2.请求带上路由，导致请求失败"></a>2.请求带上路由，导致请求失败</h3><h4 id="正确的请求是："><a href="#正确的请求是：" class="headerlink" title="正确的请求是："></a>正确的请求是：</h4><pre><code>http:www.xxx.com/api/接口 //api是我通过proxyTable转发地址的代理名字
</code></pre><h4 id="开启histroy模式之后："><a href="#开启histroy模式之后：" class="headerlink" title="开启histroy模式之后："></a>开启histroy模式之后：</h4><p>在二层的路由里面会出现这种情况：</p>
<pre><code>路由是：http:www.xxx.com/a/b
http:www.xxx.com/api/a/接口 //这就导致了请求失败，要把a也去掉才是正确的
</code></pre><p>解决方式是：</p>
<p>因为我用的是<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="external">axios</a>，所以可以在<a href="https://juejin.im/post/59fd982c6fb9a045170490df" target="_blank" rel="external">全局请求</a>中设置一个baseURL，这个baseURL就是项目的网站地址（http:www.xxx.com）,然后二层的路由也会自动去掉前面的a和b。</p>
<h3 id="3-cookie问题"><a href="#3-cookie问题" class="headerlink" title="3.cookie问题"></a>3.cookie问题</h3><p>这个实际上不是个问题，完全是自己作的，<strong>我把项目分为两层。所以从a登录，b那边刷新就会出现没有cookie的情况</strong>。</p>
<pre><code>两层路由
http://yoursite.com/a
http://yoursite.com/b
</code></pre><p>这里是因为cookie能否拿到跟存储的路由位置是有关的，之前使用hash模式因为hash模式的url<code>http://yoursite.com/#/a/b</code>，会统一存在<a href="http://yoursite.com下面。" target="_blank" rel="external">http://yoursite.com下面。</a></p>
<p>而history模式cookie就会存在<code>http://yoursite.com/a</code>或者<code>http://yoursite.com/b</code>下面，另外一边就会没有cookiie。</p>
<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><ol>
<li>不要分为两层，统一所有的路由都在一个路由地址下面。</li>
<li>在项目的路由的根地址<code>path:&#39;/&#39;</code>里面存cookie。</li>
<li><p>使用sessionStorage存信息，我就是用这个方法，<a href="http://obkoro1.com/2017/11/25/cookie%E3%80%81localStorage%E5%92%8CsessionStorage%20%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%AD%98%E5%82%A8%E3%80%81%E8%8E%B7%E5%8F%96%E3%80%81%E5%88%A0%E9%99%A4%E7%AD%89%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/" target="_blank" rel="external">使用方法</a>。</p>
<p>  sessionStorage只要在<a href="http://yoursite.com都可以访问的到，不管是存在a上面还是b上面。" target="_blank" rel="external">http://yoursite.com都可以访问的到，不管是存在a上面还是b上面。</a></p>
</li>
</ol>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>以上就是本文的所有内容，建议项目一开始还是直接跟后端说一下，开启histroy模式，省得后面的种种坑。上面的内容都是本人亲自踩坑之后的血泪教训，希望可以帮助到需要的朋友，然后祝大家圣诞节快乐。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="http://obkoro1.com/" target="_blank" rel="external">个人blog</a></strong> and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a></strong>  </p>
<p>以上2017.12.25</p>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue-router </tag>
            
            <tag> Vue-cli </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue 项目如何引入微信sdk，使用微信分享接口]]></title>
      <url>/2017/12/16/vue-%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E5%BC%95%E5%85%A5%E5%BE%AE%E4%BF%A1sdk%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>做微信的网页基本上都要接入微信的sdk，我在做的时候，也颇费了一番功夫，然后就想记录一下，供自己日后翻阅，以及让有需要的朋友可以做一下参考，如果喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h3 id="安装sdk"><a href="#安装sdk" class="headerlink" title="安装sdk"></a>安装sdk</h3><pre><code>npm install weixin-js-sdk --save
</code></pre><p>开始之前大家可以先读一读微信公众号的 <strong><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="external">接入文档</a></strong>，vue是单页面项目，比如你想要接入微信分享功能，分享功能在每个路由地址都要有，因为每个路由的url是不一样的，搜易就需要在每个路由地址都引入一遍。</p>
<h2 id="整体步骤："><a href="#整体步骤：" class="headerlink" title="整体步骤："></a>整体步骤：</h2><ol>
<li>vue引入sdk的话，就是在路由组件里面的，组件生命周期的：creatd()和mounted()里面放代码。</li>
<li><p>用伪代码，熟悉一下整体的流程，要做哪些事情：</p>
<pre><code>//wx是引入的微信sdk
wx.config(&apos;这里有一些参数&apos;);//通过config接口注入权限验证配置

wx.ready(function() { //通过ready接口处理成功验证
// config信息验证成功后会执行ready方法
    wx.onMenuShareAppMessage({ // 分享给朋友  ,在config里面填写需要使用的JS接口列表，然后这个方法才可以用 
        title: &apos;这里是标题&apos;, // 分享标题
        desc: &apos;This is a test!&apos;, // 分享描述
        link: &apos;链接&apos;, // 分享链接
        imgUrl: &apos;图片&apos;, // 分享图标
        type: &apos;&apos;, // 分享类型,music、video或link，不填默认为link
        dataUrl: &apos;&apos;, // 如果type是music或video，则要提供数据链接，默认为空
        success: function() {
            // 用户确认分享后执行的回调函数
        },
        cancel: function() {
            // 用户取消分享后执行的回调函数
        }
         });
        wx.onMenuShareTimeline({ //分享朋友圈
        title: &apos;标题&apos;, // 分享标题
        link: &apos;链接&apos;,
        imgUrl: &apos;图片&apos;, // 分享图标
        success: function() {
            // 用户确认分享后执行的回调函数
        },
        cancel: function() {
            // 用户取消分享后执行的回调函数
        }
    });
});
 wxx.error(function(res){//通过error接口处理失败验证
    // config信息验证失败会执行error函数
});
</code></pre></li>
</ol>
<p>上面的流程多看几遍，对整个流程有个概念，其中最重要的一步就是下面这个借口注入权限。</p>
<h3 id="config接口注入权限"><a href="#config接口注入权限" class="headerlink" title="config接口注入权限"></a>config接口注入权限</h3><p>接入微信接口的最主要也是最重要一步步就是填写下面这些信息，填完这些信息之后，基本就好了。下面这些信息通常是通过后端接口来获取的。</p>
<pre><code>wx.config({
    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
    appId: &apos;&apos;, // 必填，公众号的唯一标识
    timestamp: , // 必填，生成签名的时间戳
    nonceStr: &apos;&apos;, // 必填，生成签名的随机串
    signature: &apos;&apos;,// 必填，签名，见附录1
    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2
});
</code></pre><h3 id="获取config配置信息："><a href="#获取config配置信息：" class="headerlink" title="获取config配置信息："></a>获取config配置信息：</h3><p>前端要获取上面那些信息，不用做太多东西，只要调后端接口就可以了。后端会把那些信息处理好，然后通过一个接口返给你这些参数。你要给后端传一个<strong>当前路由页面的完整url</strong>，后端就会返回上述的那些信息给你，后面就可以根据自己的需求调用相应的接口，自定义里面的东西。</p>
<h4 id="坑点：url"><a href="#坑点：url" class="headerlink" title="坑点：url"></a>坑点：url</h4><p>这里要注意的就是url的问题，如果url没有正确传递，后端也会返回信息，但是签名信息会是错误的。</p>
<p>上面提到的完整url指的是：’http(s)://‘部分，以及’？’后面的GET参数部分,但不包括’#’hash后面的部分。可以通过<code>location.href</code>来获取。</p>
<p><strong>注意</strong>： 如果你的vue项目，路由没有开启history 模式,也就是你的url上面包含“#”，这个时候要从后端正确获取签名，就需要<strong>去掉url上#后面的字符</strong>。（url去掉’#’hash部分，可用<code>location.href.split(&#39;#&#39;)[0]</code>）</p>
<h3 id="封装调用sdk注入："><a href="#封装调用sdk注入：" class="headerlink" title="封装调用sdk注入："></a>封装调用sdk注入：</h3><p>因为要在每个路由页面都注入sdk，这个肯定要复用的，不然那么多代码，看着就头大。</p>
<h4 id="我是这么做的："><a href="#我是这么做的：" class="headerlink" title="我是这么做的："></a>我是这么做的：</h4><ol>
<li>因为我把axios<a href="https://juejin.im/post/59fd982c6fb9a045170490df" target="_blank" rel="external">包了一层</a>，然后把axios接口，在main.js里面挂载到Vue实例。<br><img src="https://user-gold-cdn.xitu.io/2017/12/16/1605f3933091e9d2?w=535&amp;h=98&amp;f=png&amp;s=18864" alt=""></li>
<li>然后在<a href="https://juejin.im/post/59eddbfe6fb9a0450908abb4" target="_blank" rel="external">全局函数</a>里面调用这个接口，然后在每个路由页面的相应组件里面调用这个函数，把当前页面的url以及其他标题、图片什么的传进去。</li>
</ol>
<p>里面的具体步骤就不说了，最重要的是参考上面的那个流程，函数里面的东西也都是基于那个流程的。</p>
<h3 id="签名校验："><a href="#签名校验：" class="headerlink" title="签名校验："></a>签名校验：</h3><p>当你反复确认步骤都没有问题，微信sdk注入还是签名失败的时候，这个时候你就要考虑是不是后端那边的算法有问题，可以把后端返回的签名和微信提供的<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign" target="_blank" rel="external">JS 接口签名校验工具</a>生成的签名对比一下，或许是后端那边算法的问题也不一定。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>实不相瞒，当时我做的时候就是被url这个坑了，第一次做这个东西，没有经验，折腾了好久。引入sdk并不难，重要的是那个配置信息要填写正确，然后其他的就根据实际需求来做了。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="http://obkoro1.com/" target="_blank" rel="external">个人blog</a></strong> and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a></strong>  </p>
<p>以上2017.12.16</p>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[江湖再见]]></title>
      <url>/2017/12/13/%E6%B1%9F%E6%B9%96%E5%86%8D%E8%A7%81/</url>
      <content type="html"><![CDATA[<p>事件：<a href="http://mp.weixin.qq.com/s/Lg2JgZuJ3JBFUnz-6NOHDQ" target="_blank" rel="external">http://mp.weixin.qq.com/s/Lg2JgZuJ3JBFUnz-6NOHDQ</a></p>
<h3 id="用脚投票"><a href="#用脚投票" class="headerlink" title="用脚投票"></a>用脚投票</h3><p>饱醉豚骂程序员，一竿子打翻一船的人，简叔还为之站队，深深感受到了简书的恶意。人微言轻决定用脚投票，删了所有文章，再也不来简书，可能程序员根本不是简书的用户群体吧，那么江湖再见。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/12/13/1604f5d85f5569a5?w=1310&amp;h=633&amp;f=png&amp;s=94258" alt="用脚投票"></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[手摸手教你在vue-cli里面使用vuex，以及vuex简介]]></title>
      <url>/2017/12/09/%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E5%9C%A8vue-cli%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8vuex%EF%BC%8C%E4%BB%A5%E5%8F%8Avuex%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>这篇文章是在vue-cli里面使用vuex的一个极简demo，附带一些vuex的简单介绍。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h2 id="引入步骤"><a href="#引入步骤" class="headerlink" title="引入步骤"></a>引入步骤</h2><p>我创建了一个新的vue-cli里面什么东西都没有，只引用了vuex，这里是<a href="https://gitee.com/OBKoro1/blog_vuex" target="_blank" rel="external">码云地址</a>,可以下载下来，然后<code>npm install</code>、<code>npm run dev</code>试试看，里面vuex的使用地方也全都注释了一遍。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>npm install vuex --save
</code></pre><h3 id="在src目录下创建文件夹vuex"><a href="#在src目录下创建文件夹vuex" class="headerlink" title="在src目录下创建文件夹vuex"></a>在src目录下创建文件夹vuex</h3><p><img src="https://user-gold-cdn.xitu.io/2017/12/9/1603a90a59fc5676?w=363&amp;h=335&amp;f=png&amp;s=16366" alt="文件夹包含文件"></p>
<p>该文件夹包含以上文件，创建好了之后，我们一个一个文件来说里面都有什么东西。</p>
<h4 id="vuex-index-js"><a href="#vuex-index-js" class="headerlink" title="vuex/index.js"></a>vuex/index.js</h4><pre><code>import Vue from &apos;vue&apos;;
import Vuex from &apos;vuex&apos;;
import status from &apos;./modules/status/index&apos;;//引进模块
Vue.use(Vuex);

export default new Vuex.Store({
  modules: {  
    //Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action
    dataStatus:status,//访问这里面数据的时候要使用&apos;dataStatus&apos;
  },
});
</code></pre><p>这是vuex的主文件store，这个例子是把state、mutation、action分割成模块，然后再将每个模块引用进这个index.js文件里面，等我们整个文件夹的文件都搭好之后，还要把文件引入到main.js里面、</p>
<h3 id="vuex-modules-status-index-js"><a href="#vuex-modules-status-index-js" class="headerlink" title="vuex/modules/status/index.js"></a>vuex/modules/status/index.js</h3><pre><code>import actions from &apos;./actions&apos;;
import mutations from &apos;./mutations&apos;;
//引入action和mutations 

export default {  
  state:{ //这里面是要读取或者写入数据的地方
      msg:&apos;默认状态&apos;,
  },
  //state actions mutations顺序不能乱
  actions: actions,
  mutations: mutations,
}
</code></pre><p>这是一个模块里面的主文件，模块内部拥有自己的state、actions、mutions，是从上到下进行分割的。</p>
<h3 id="vuex-modules-status-mutation-type-js"><a href="#vuex-modules-status-mutation-type-js" class="headerlink" title="vuex/modules/status/mutation_type.js"></a>vuex/modules/status/mutation_type.js</h3><pre><code>//这个js文件里面只是一些变量，把action和mutation文件里面相同变量名的链接起来
export const VUEX_TEST = &apos;VUEX_TEST&apos;;
// 一般使用的是大写来命名变量，因为尤大也是这么做 2333
</code></pre><h3 id="vuex-modules-status-actions-js"><a href="#vuex-modules-status-actions-js" class="headerlink" title="vuex/modules/status/actions.js"></a>vuex/modules/status/actions.js</h3><pre><code>import * as types from &apos;./mutation_type&apos;; //引入变量
export default {
  actionFn({commit},data){ //actionFn是在组件通过dispatch触发的函数名 可以理解成组件和actions的连接
    commit(types.VUEX_TEST,data);
    //types.VUEX_TEST 是要commit到mutation的哪个位置 变量的作用
    //data 是传过来的参数
  }
};
</code></pre><h3 id="vuex-modules-status-mutations-js"><a href="#vuex-modules-status-mutations-js" class="headerlink" title="vuex/modules/status/mutations.js"></a>vuex/modules/status/mutations.js</h3><pre><code>import * as types from &apos;./mutation_type&apos;;//引入变量

export default {
  //types.VUEX_TEST 代表接受哪个actions的commit 也就是上面引入变量的作用
  [types.VUEX_TEST](state,data){ 
    //第一个参数state是这个模块的state 第二个参数是传进来的数据 
    if(data.status==1){ //根据传进来的参数做各种操作
      //这里就是操作state了，赋值之后，各个组件上面引用该数据的地方会自动更新      
      state.msg=data.text;
    }else if(data.status==2){
        state.msg=&apos;奕迅&apos;;
    }
    //这里是随便写的一个栗子
    console.log(state.mg,data,&apos;mutation&apos;); 
  }
};
</code></pre><p>这两个文件里面有注释，解释的蛮清楚的。当把所有文件创建好了之后，再回过头来看看每个文件之间都有联系,多想想或许就懂点什么东西了 emmm</p>
<h4 id="vuex文件夹，文件目录以及下载"><a href="#vuex文件夹，文件目录以及下载" class="headerlink" title="vuex文件夹，文件目录以及下载"></a><a href="https://gitee.com/OBKoro1/blog_vuex/tree/master/src/vuex" target="_blank" rel="external">vuex文件夹</a>，文件目录以及下载</h4><h3 id="引入main-js"><a href="#引入main-js" class="headerlink" title="引入main.js"></a>引入main.js</h3><p><img src="https://user-gold-cdn.xitu.io/2017/12/9/1603ac7ca073cb0e?w=765&amp;h=427&amp;f=png&amp;s=49028" alt=""></p>
<p>上面的vuex文件夹只是搭建一个store，但是这样还不够，我们还要在项目里面使用这个。引用到main.js，如图所示。</p>
<h3 id="组件中如何使用。"><a href="#组件中如何使用。" class="headerlink" title="组件中如何使用。"></a>组件中如何使用。</h3><p><img src="https://user-gold-cdn.xitu.io/2017/12/9/1603acd24b3c1906?w=773&amp;h=875&amp;f=png&amp;s=97062" alt=""></p>
<p>使用的话就是像上面那么使用，本文只是一个简单的示例，还有更多骚操作，等大家上手之后再慢慢摸索咯。</p>
<h2 id="git地址"><a href="#git地址" class="headerlink" title="git地址"></a>git地址</h2><p>感觉写的蛮乱的，大家如果看不太懂的话，可以到<a href="https://gitee.com/OBKoro1/blog_vuex" target="_blank" rel="external">码云</a>去下载文件，然后自己跑一跑，多看看，试一试就应该没问题了。</p>
<h2 id="vuex简介"><a href="#vuex简介" class="headerlink" title="vuex简介"></a>vuex简介</h2><p>通常我是希望大家先学会用，然后再了解后面的机制，每次我看博文的时候，一大段原理贴上来，都给我弄懵逼了。。</p>
<p>vuex主要是用来<strong>复杂项目之间的组件通信功能</strong>，简单的项目不要用这套复杂的事件以及状态管理机制。项目如果不够复杂的话推荐我之前写的：<a href="https://juejin.im/post/59eddbfe6fb9a0450908abb4" target="_blank" rel="external">在vue项目中 如何定义全局变量 全局函数</a>，使用全局变量的形式的也可以实现需求。</p>
<h3 id="vuex实现的作用：数据共享机制"><a href="#vuex实现的作用：数据共享机制" class="headerlink" title="vuex实现的作用：数据共享机制"></a>vuex实现的作用：数据共享机制</h3><p>通过统一的数据中心store维护状态数据，每个组件进行更新的时候，通知数据中心store。再由stroe将共享的状态，触发每一个调用它的组件的更新。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/12/9/1603ae6d33eae6db?w=554&amp;h=570&amp;f=png&amp;s=153482" alt="store触发组件更新"></p>
<h3 id="vuex的工作流程"><a href="#vuex的工作流程" class="headerlink" title="vuex的工作流程"></a>vuex的工作流程</h3><p>大家先仔细看看下面这张图，理解他的工作机制。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/12/9/1603ae858f7da6cd?w=789&amp;h=530&amp;f=png&amp;s=148466" alt=""></p>
<ol>
<li>在vue组件里面，通过dispatch来触发actions提交修改数据的操作。</li>
<li>然后再通过actions的commit来触发mutations来修改数据。</li>
<li>mutations接收到commit的请求，就会自动通过Mutate来修改state（数据中心里面的数据状态）里面的数据。</li>
<li>最后由store触发每一个调用它的组件的更新</li>
</ol>
<h3 id="注意：这套模型是单向流动的"><a href="#注意：这套模型是单向流动的" class="headerlink" title="注意：这套模型是单向流动的"></a>注意：这套模型是单向流动的</h3><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>以上就是本文的所有内容了，希望可以帮到大家。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="http://obkoro1.com/" target="_blank" rel="external">个人blog</a></strong> and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a></strong>  </p>
<p>以上2017.12.9</p>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue-cli </tag>
            
            <tag> Vuex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cookie、localStorage和sessionStorage 三者之间的区别以及存储、获取、删除等使用方式]]></title>
      <url>/2017/11/25/cookie%E3%80%81localStorage%E5%92%8CsessionStorage%20%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%AD%98%E5%82%A8%E3%80%81%E8%8E%B7%E5%8F%96%E3%80%81%E5%88%A0%E9%99%A4%E7%AD%89%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>前端开发的时候，在网页刷新的时候，所有数据都会被清空，这时候就要用到本地存储的技术，前端本地存储的方式有三种，分别是cookie，localstorage和sessionStorage ，这是大家都知道的。本文的主要内容就是针对这三者的存放、获取，区别、应用场景。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h2 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h2><p>很多文档都是说了一大堆，后面用法都没有说，先要学会怎么用，不然后面的都是扯淡，所以这里我先把使用方式弄出来。</p>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie:"></a>cookie:</h3><p><strong>保存cookie值：</strong></p>
<pre><code>var dataCookie=&apos;110&apos;;
document.cookie = &apos;token&apos; + &quot;=&quot; +dataCookie; 
</code></pre><p><strong>获取指定名称的cookie值</strong></p>
<pre><code> function getCookie(name) { //获取指定名称的cookie值
// (^| )name=([^;]*)(;|$),match[0]为与整个正则表达式匹配的字符串，match[i]为正则表达式捕获数组相匹配的数组；
var arr = document.cookie.match(new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;));
if(arr != null) {
  console.log(arr);
  return unescape(arr[2]);
}
return null;
}
 var cookieData=getCookie(&apos;token&apos;); //cookie赋值给变量。
</code></pre><p>先贴这两个最基础的方法，文末有个<a href="http://obkoro1.com/article-demo/2017/cookieStorage/index.html" target="_blank" rel="external">demo</a>里面还有如何设置cookie过期时间，以及删除cookie的、</p>
<h3 id="localStorage和sessionStorage"><a href="#localStorage和sessionStorage" class="headerlink" title="localStorage和sessionStorage:"></a>localStorage和sessionStorage:</h3><p><strong>localStorage和sessionStorage所使用的方法是一样的</strong>，下面以sessionStorage为栗子：</p>
<pre><code>var name=&apos;sessionData&apos;;
var num=120;
sessionStorage.setItem(name,num);//存储数据
sessionStorage.setItem(&apos;value2&apos;,119);
let dataAll=sessionStorage.valueOf();//获取全部数据
console.log(dataAll,&apos;获取全部数据&apos;);
var dataSession=sessionStorage.getItem(name);//获取指定键名数据
var dataSession2=sessionStorage.sessionData;//sessionStorage是js对象，也可以使用key的方式来获取值
 console.log(dataSession,dataSession2,&apos;获取指定键名数据&apos;);
sessionStorage.removeItem(name); //删除指定键名数据
  console.log(dataAll,&apos;获取全部数据1&apos;);
 sessionStorage.clear();//清空缓存数据：localStorage.clear();
  console.log(dataAll,&apos;获取全部数据2&apos;);  
</code></pre><p>使用方式，基本上就上面这些，其实也是比较简单的。大家可以把这个copy到自己的编译器里面，或者文末有个<a href="http://obkoro1.com/article-demo/2017/cookieStorage/index.html" target="_blank" rel="external">demo</a>，可以点开看看。</p>
<h2 id="三者的异同："><a href="#三者的异同：" class="headerlink" title="三者的异同："></a>三者的异同：</h2><p>上面的使用方式说好了，下面就唠唠三者之间的区别，这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别。</p>
<h3 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h3><p>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效</p>
<p>localStorage：除非被手动清除，否则将会永久保存。</p>
<p>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p>
<h3 id="存放数据大小："><a href="#存放数据大小：" class="headerlink" title="存放数据大小："></a>存放数据大小：</h3><p>cookie：4KB左右</p>
<p>localStorage和sessionStorage：可以保存5MB的信息。</p>
<h3 id="http请求："><a href="#http请求：" class="headerlink" title="http请求："></a>http请求：</h3><p>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</p>
<p>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</p>
<h3 id="易用性："><a href="#易用性：" class="headerlink" title="易用性："></a>易用性：</h3><p>cookie：需要程序员自己封装，源生的Cookie接口不友好</p>
<p>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</p>
<h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><p>从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比stprage更好用的。其他情况下，可以使用storage，就用storage。</p>
<p>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</p>
<p>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</p>
<h2 id="浏览器支持情况："><a href="#浏览器支持情况：" class="headerlink" title="浏览器支持情况："></a>浏览器支持情况：</h2><p>localStorage和sessionStorage是html5才应用的新特性，可能有些浏览器并不支持，这里要注意。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/11/25/15ff2d54764e53af?w=861&amp;h=113&amp;f=png&amp;s=9592" alt=""></p>
<p>cookie的浏览器支持没有找到，可以通过下面这段代码来判断所使用的浏览器是否支持cookie：</p>
<pre><code>if(navigator.cookieEnabled) {
  alert(&quot;你的浏览器支持cookie功能&quot;);//提示浏览器支持cookie  
} else {
  alert(&quot;你的浏览器不支持cookie&quot;);//提示浏览器不支持cookie   }
</code></pre><h3 id="数据存放处："><a href="#数据存放处：" class="headerlink" title="数据存放处："></a>数据存放处：</h3><p><img src="https://user-gold-cdn.xitu.io/2017/11/25/15ff2f727028f37b?w=1028&amp;h=378&amp;f=png&amp;s=28065" alt="Cookie、localStorage、sessionStorage数据存放处"></p>
<h3 id="番外：各浏览器Cookie大小、个数限制。"><a href="#番外：各浏览器Cookie大小、个数限制。" class="headerlink" title="番外：各浏览器Cookie大小、个数限制。"></a>番外：各浏览器Cookie大小、个数限制。</h3><p>cookie 使用起来还是需要小心一点，有兴趣的可以看一下这个<a href="https://www.cnblogs.com/henryhappier/archive/2011/03/03/1969564.html" target="_blank" rel="external">链接</a>。</p>
<h3 id="demo链接"><a href="#demo链接" class="headerlink" title="demo链接"></a>demo链接</h3><p>把上面的demo代码，上传到github上面了，有需要的小伙伴们，可以看一下。<a href="http://obkoro1.com/article-demo/2017/cookieStorage/index.html" target="_blank" rel="external">传送门</a></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>最后要说的是：不要把什么数据都放在 Cookie、localStorage 和 sessionStorage中，毕竟前端的安全性这么低。只要打开控制台就可以任意的修改 Cookie、localStorage 和 sessionStorage的数据了。涉及到金钱或者其他比较重要的信息，还是要存在后台比较好。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><a href="http://obkoro1.com/" target="_blank" rel="external">blog网站</a>  and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong>  </p>
<p>以上2017.11.25</p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="http://www.w3school.com.cn/html5/html_5_webstorage.asp" target="_blank" rel="external">HTML 5 Web 存储</a><br><a href="http://blog.csdn.net/mafan121/article/details/60133107" target="_blank" rel="external">localStorage和sessionStorage详解</a><br><a href="https://segmentfault.com/a/1190000002723469" target="_blank" rel="external">详说 Cookie, LocalStorage 与 SessionStorage</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> -js - html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue router 使用params query传参，以及有什么区别]]></title>
      <url>/2017/11/12/vue-router-%E4%BD%BF%E7%94%A8params-query%E4%BC%A0%E5%8F%82%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>传参是前端经常需要用的一个操作，很多场景都会需要用到上个页面的参数，本文将会详细介绍vue router 是如何进行传参的，以及一些小细节问题。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h2 id="Vue-router如何传参"><a href="#Vue-router如何传参" class="headerlink" title="Vue router如何传参"></a>Vue router如何传参</h2><h3 id="params、query是什么？"><a href="#params、query是什么？" class="headerlink" title="params、query是什么？"></a>params、query是什么？</h3><p> params：/router1/:id ，/router1/123，/router1/789 ,<strong>这里的id叫做params</strong></p>
<p> query：/router1?id=123 ,/router1?id=456 ,这里的id叫做query。</p>
<h3 id="路由界面："><a href="#路由界面：" class="headerlink" title="路由界面："></a>路由界面：</h3><p>router.js:</p>
<p>路由设置这里，<strong>当你使用params方法传参的时候，要在路由后面加参数名，</strong>并且传参的时候，参数名要跟路由后面设置的参数名对应。使用query方法，就没有这种限制，直接在跳转里面用就可以。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/11/12/5a6149e063affb11b03b105c0b20a76c" alt=""></p>
<p><strong>注意：</strong>如果路由上面不写参数，也是可以传过去的，但不会在url上面显示出你的参数，并且当你跳到别的页面或者刷新页面的时候<strong>参数会丢失</strong>（如下图所示），那依赖这个参数的http请求或者其他操作就会失败。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/11/12/b26ef6ec935a56ee5ab1fe354b888178" alt=""></p>
<p>注意看上面的路由参数，id这个参数是我们有设置在路由上面的，id2我没有设置在路由里面，所以刷新之后id2就不见了，在项目中，我们总不可能要求用户不能刷新吧。</p>
<h3 id="组件1："><a href="#组件1：" class="headerlink" title="组件1："></a>组件1：</h3><pre><code>&lt;template&gt;
  &lt;div class=&quot;app_page&quot;&gt;
    &lt;h1&gt;从这个路由传参到别的路由&lt;/h1&gt;
    &lt;router-link :to=&quot;{ name:&apos;router1&apos;,params: { id: status ,id2: status3},query: { queryId:  status2 }}&quot; &gt;
      router-link跳转router1
    &lt;/router-link&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
  name: &apos;app_page&apos;,
  data () {
    return {
      status:110,
      status2:120,
      status3:119
    }
  },
}
&lt;/script&gt;
</code></pre><h3 id="编程式导航跳转："><a href="#编程式导航跳转：" class="headerlink" title="编程式导航跳转："></a>编程式导航跳转：</h3><p>上面的router-link传参，也可以使用<a href="https://router.vuejs.org/zh-cn/essentials/navigation.html" target="_blank" rel="external">router文档</a>里面的编程式导航来跳转传参。</p>
<pre><code>this.$router.push({  name:&apos;router1&apos;,params: { id: status ,id2: status3},query: { queryId:  status2 }});
//编程跳转写在一个函数里面，通过click等方法来触发
</code></pre><p><strong>这两种传参效果是一模一样的，编程式导航，可以用来做判断跳转，比如是否授权，是否登录，等等状态</strong>，对此不太了解的小伙伴们，可以跳过这个编程式导航，以后再来看。</p>
<h3 id="组件2："><a href="#组件2：" class="headerlink" title="组件2："></a>组件2：</h3><pre><code>&lt;template&gt;
  &lt;div class=&quot;router1&quot;&gt;
    &lt;h1&gt;接收参数的路由&lt;/h1&gt;
    &lt;h1&gt; params.id：{{ $route.params }}&lt;/h1&gt;
    &lt;h1&gt;query.status:{{ $route.query.queryId }}&lt;/h1&gt;
    &lt;keep-alive&gt;
      &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/keep-alive&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre><p>传参还是比较简单的，按着上面组件的使用方法就可以成功传过去了。</p>
<p><strong>提示：</strong>获取路由上面的参数，用的是$route，后面没有r。</p>
<h3 id="params传参和query传参有什么区别："><a href="#params传参和query传参有什么区别：" class="headerlink" title="params传参和query传参有什么区别："></a>params传参和query传参有什么区别：</h3><p><img src="https://user-gold-cdn.xitu.io/2017/11/12/5327acc0b3dcc403b4316ce00c808221" alt=""></p>
<p>1、params是路由的一部分,必须要有。query是拼接在url后面的参数，没有也没关系。</p>
<p><strong>params一旦设置在路由，params就是路由的一部分</strong>，如果这个路由有params传参，但是在跳转的时候没有传这个参数，会导致跳转失败或者页面会没有内容。</p>
<p>比如：跳转/router1/:id</p>
<pre><code>&lt;router-link :to=&quot;{ name:&apos;router1&apos;,params: { id: status}}&quot; &gt;正确&lt;/router-link&gt;
&lt;router-link :to=&quot;{ name:&apos;router1&apos;,params: { id2: status}}&quot;&gt;错误&lt;/router-link&gt;
</code></pre><p>2、params、query不设置也可以传参，params不设置的时候，刷新页面或者返回参数会丢失，这一点的在上面说过了</p>
<h2 id="后话："><a href="#后话：" class="headerlink" title="后话："></a>后话：</h2><p>本文到这里就结束了，写的不好的地方，请各位大佬们见谅。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><a href="http://obkoro1.com/" target="_blank" rel="external">blog网站</a>  and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<p>以上2017.11.12</p>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 传参 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Vue-cli里基于axios封装复用请求]]></title>
      <url>/2017/11/05/%E5%9C%A8Vue-cli%E9%87%8C%E5%9F%BA%E4%BA%8Eaxios%E5%B0%81%E8%A3%85%E5%A4%8D%E7%94%A8%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>自从Vue2.0推荐大家使用 axios 开始，axios 被越来越多的人所了解。使用axios发起一个请求对大家来说是比较简单的事情，但是axios没有进行封装复用，项目越来越大，引起的代码冗余。就会非常麻烦的一件事。所以本文会详细的跟大家介绍，如何封装请求，并且在项目组件中复用请求。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>只用安装一个axios就可以了。</p>
<pre><code>npm install axios --save
</code></pre><h3 id="接口代理设置"><a href="#接口代理设置" class="headerlink" title="接口代理设置"></a>接口代理设置</h3><p>为了请求可以正常发送，我们一般要进行一个接口代理的配置，这样可以避免请求跨域，项目打包之后，后端一般也要搭建一个nginx之类的东西进行转发请求，不然请求会因为跨域问题失败的。</p>
<pre><code>//文件位置：config/index.js
proxyTable: {
  &apos;/api&apos;: {
    target: &apos;http://47.95.xxx.246:8080&apos;,  // 通过本地服务器将你的请求转发到这个地址
    changeOrigin: true,  // 设置这个参数可以避免跨域
    pathRewrite: {
      &apos;/api&apos;: &apos;/&apos;
    }
  },
},
</code></pre><p><img src="https://user-gold-cdn.xitu.io/2017/10/31/3af73c621b7523aa0f3a2fd95d1bd38c" alt=""></p>
<p>设置好了之后，当你在项目中要调用<code>http://47.95.xxx.246:8080</code>这个服务器里面的接口，可以直接用<code>/api</code>代替服务器地址。</p>
<h2 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h2><h3 id="main-js入口文件中："><a href="#main-js入口文件中：" class="headerlink" title="main.js入口文件中："></a>main.js入口文件中：</h3><pre><code>import axios from &apos;axios&apos;;//引入文件
Vue.prototype.$http = axios;//将axios挂载到Vue实例中的$ajax上面,在项目中的任何位置通过this.$http使用
</code></pre><h3 id="没有封装发起请求："><a href="#没有封装发起请求：" class="headerlink" title="没有封装发起请求："></a>没有封装发起请求：</h3><pre><code>//没有封装的时候，在组件中发起请求的方式：
   this.$ajax({
       url:&apos;/api/articles&apos;,//api 代理到json文件地址，后面的后缀是文件中的对象或者是数组
       method:&apos;get&apos;,//请求方式
       //这里可以添加axios文档中的各种配置
     }).then(function (res) {
       console.log(res,&apos;成功&apos;);
     }).catch(function (err) {
       console.log(err,&apos;错误&apos;);
     })
//还可以像下面这么简写
  this.$ajax.get(&apos;api/publishContent&apos;).then((res) =&gt; {
   console.log(res,&apos;请求成功&apos;)
  },(err)=&gt;{
    console.log(err,&apos;请求失败&apos;);
  });
</code></pre><h2 id="封装请求"><a href="#封装请求" class="headerlink" title="封装请求"></a>封装请求</h2><p>封装的时候，我通常喜欢把请求抽象成三个文件，文件位置放在src中，只要你能引用到，就没问题，如下图所示：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/11/4/0eaae692ac8801448a0a7300206d6144" alt=""></p>
<p>创建三个.js文件，里面我都很认真的注释了，我就直接贴图片了，在文末我把这三个文件的地址发出来，需要的小伙伴自取。</p>
<p>fetch.js：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/11/5/3cd9e9f1ebe11929f940d567870b4ec9" alt=""></p>
<p>url.js:</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/11/5/f70bfc90db9cb1c40725e179efbd4ab5" alt=""></p>
<p>api.js</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/11/5/250690aa2ca666b6ef48f69483731ae0" alt=""></p>
<h3 id="在组件里面如何使用接口："><a href="#在组件里面如何使用接口：" class="headerlink" title="在组件里面如何使用接口："></a>在组件里面如何使用接口：</h3><p><img src="https://user-gold-cdn.xitu.io/2017/11/5/2ba68f2fad37c0285aeb0ba9e6e86a1e" alt=""></p>
<h3 id="封装axios文件地址在这里：传送门"><a href="#封装axios文件地址在这里：传送门" class="headerlink" title="封装axios文件地址在这里：传送门"></a>封装axios文件地址在这里：<a href="https://github.com/OBKoro1/article-demo/tree/master/2017/axios" target="_blank" rel="external">传送门</a></h3><p>代码注释什么的，已经蛮多了，跟着文章一步一步走，实现封装axios请求，没毛病的。本文并没有把很多功能都完整的列出来，主要是追求一个上手，剩下的东西，各位小伙伴们可以自行研究。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><a href="http://obkoro1.com/" target="_blank" rel="external">blog网站</a>  and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<p>以上2017.11.5</p>
]]></content>
      
        <categories>
            
            <category> vue-cli </category>
            
        </categories>
        
        
        <tags>
            
            <tag> axios </tag>
            
            <tag> axios封装 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue-cli 使用json server在本地模拟请求数据]]></title>
      <url>/2017/11/01/Vue-cli-%E4%BD%BF%E7%94%A8json-server%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>开发的时候，前后端不论是否分离，接口多半是滞后于页面开发的。所以建立一个REST风格的API接口，给前端页面提供虚拟的数据，是非常有必要的。json server 作为模拟工具，因为设置简单，容易上手。本文是做一个简单的上手介绍，有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<blockquote>
<p>本文首发于我的个人blog：<a href="http://obkoro1.com/" target="_blank" rel="external">obkoro1.com</a></p>
</blockquote>
<h3 id="json-server-工具"><a href="#json-server-工具" class="headerlink" title="json server 工具:"></a>json server 工具:</h3><p>在后台还没给接口之前，使用JSON-Server搭建一台JSON服务器，将接口要返回的数据放在json文件里面。然后请求这些数据，这样我们可以先做一些东西，等后台接口好了之后直接替换就可以了，不必一直傻傻的等后端的接口。</p>
<h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><pre><code>npm install json-server --save //json server
npm install axios --save //使用axios发送请求
</code></pre><h4 id="json文件："><a href="#json文件：" class="headerlink" title="json文件："></a>json文件：</h4><p>创建一个json文件，起名叫db.json，文件放置在跟index.html平级的目录中，也可以放置在static文件夹中，db.json文件里面的内容，是一个对象。</p>
<h3 id="设置："><a href="#设置：" class="headerlink" title="设置："></a>设置：</h3><p>位置： build/dev-server.js</p>
<pre><code>//json-server 假数据
var jsonServer = require(&apos;json-server&apos;) //引入文件
var apiServer = jsonServer.create(); //创建服务器
var apiRouter = jsonServer.router(&apos;db.json&apos;) //引入json 文件 ，这里的地址就是你json文件的地址
var middlewares = jsonServer.defaults(); //返回JSON服务器使用的中间件。
apiServer.use(middlewares)
apiServer.use(&apos;/json&apos;,apiRouter)
apiServer.listen( port + 1,function(){ //json服务器端口:比如你使用8080,这里的json服务器就是8081端口
  console.log(&apos;JSON Server is running&apos;)  //json server成功运行会在git bash里面打印出&apos;JSON Server is running&apos;
})
</code></pre><p>如图所示：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/31/1cd6d748943c968c65eb135b322c6f0b" alt=""></p>
<h3 id="请求接口代理："><a href="#请求接口代理：" class="headerlink" title="请求接口代理："></a>请求接口代理：</h3><pre><code>proxyTable: {
  &apos;/api&apos;: {
    target: &apos;http://localhost:8081/&apos;,  // 通过本地服务器将你的请求转发到这个地址
    changeOrigin: true,  // 设置这个参数可以避免跨域
    pathRewrite: {
      &apos;/api&apos;: &apos;/&apos;
    }
  },
},
</code></pre><p>如下图所示：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/31/3af73c621b7523aa0f3a2fd95d1bd38c" alt=""></p>
<h3 id="npm-run-dev启动项目可以访问到你的json文件："><a href="#npm-run-dev启动项目可以访问到你的json文件：" class="headerlink" title="npm run dev启动项目可以访问到你的json文件："></a>npm run dev启动项目可以访问到你的json文件：</h3><p>现在服务器已经成功启动，在地址栏输入 localhost:8081，就可以看到的json文件，加上相应后缀即可访问文件里面的数据。下面几张图片出自：<a href="http://blog.csdn.net/biubiubiuzzz/article/details/78066621" target="_blank" rel="external">biubiubiuzzz</a></p>
<p>jsonserver服务器：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/31/50baa471e48b88d8dc595e0dc8cd60b7" alt="jsonserver服务器"></p>
<p>json数据：<br><img src="https://user-gold-cdn.xitu.io/2017/10/31/cd31ad94fb979187133c4d1c8f5d9572" alt="json数据"></p>
<h2 id="axios请求json数据："><a href="#axios请求json数据：" class="headerlink" title="axios请求json数据："></a>axios请求json数据：</h2><p>光看到这些数据可不行，我们还需要发起请求，请求到这些数据，然后执行各种各样的骚操作。</p>
<h3 id="main-js文件中："><a href="#main-js文件中：" class="headerlink" title="main.js文件中："></a>main.js文件中：</h3><pre><code>import axios from &apos;axios&apos;;//引入文件
Vue.prototype.$ajax = axios;//将axios挂载到Vue实例中的$ajax上面,在项目中的任何位置通过this.$ajax使用
</code></pre><p>在组件中的使用方式，比如：</p>
<pre><code>   this.$ajax({
       url:&apos;/api/articles&apos;,//api 代理到json文件地址，后面的后缀是文件中的对象或者是数组
       method:&apos;get&apos;,//请求方式
       //这里可以添加axios文档中的各种配置
     }).then(function (res) {
       console.log(res,&apos;成功&apos;);
     }).catch(function (err) {
       console.log(err,&apos;错误&apos;);
     })
//还可以像下面这么简写
  this.$ajax.get(&apos;api/publishContent&apos;).then((res) =&gt; {
   console.log(res,&apos;请求成功&apos;)
  },(err)=&gt;{
    console.log(err,&apos;请求失败&apos;);
  });
</code></pre><h3 id="JSON-Server只接受GET请求，GitHub上提到："><a href="#JSON-Server只接受GET请求，GitHub上提到：" class="headerlink" title="JSON-Server只接受GET请求，GitHub上提到："></a>JSON-Server只接受GET请求，GitHub上提到：</h3><p>If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to db.json using lowdb.</p>
<p>lowdb介绍： <a href="http://www.jianshu.com/p/11d04a4c22af" target="_blank" rel="external">http://www.jianshu.com/p/11d04a4c22af</a></p>
<h3 id="文档："><a href="#文档：" class="headerlink" title="文档："></a>文档：</h3><p>附上<a href="https://github.com/typicode/json-server" target="_blank" rel="external">json server</a>的github，和<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="external">axios</a>的中文文档，大家可以进去研究一下。</p>
<p>json server设置和使用起来还是蛮方便的，大家感兴趣的话，可以跟着文章设置一波。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><a href="http://obkoro1.com/" target="_blank" rel="external">blog网站</a>  and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<p>以上2017.11.1</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><p><a href="http://blog.csdn.net/u012911742/article/details/73162761" target="_blank" rel="external">JSON-Server使用</a><br><a href="http://blog.csdn.net/biubiubiuzzz/article/details/78066621" target="_blank" rel="external"> vue-cli下配置json-server</a></p>
]]></content>
      
        <categories>
            
            <category> 工具类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue-cli配置 </tag>
            
            <tag> 工具 </tag>
            
            <tag> axios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在vue项目中 如何定义全局变量 全局函数]]></title>
      <url>/2017/10/23/%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD-%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F-%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>如题，在项目中，经常有些函数和变量是需要复用，比如说网站服务器地址，从后台拿到的：用户的登录token,用户的地址信息等，这时候就需要设置一波全局变量和全局函数，这两个设置不太难，而且有一些共通之处，可能有一些朋友对此不太了解，所以随便写出来分享一波。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<h2 id="定义全局变量"><a href="#定义全局变量" class="headerlink" title="定义全局变量"></a>定义全局变量</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>设置一个专用的的全局变量模块文件，模块里面定义一些变量初始状态，用export default 暴露出去，在main.js里面使用Vue.prototype挂载到vue实例上面或者在其它地方需要使用时，引入该模块便可。</p>
<h3 id="全局变量模块文件："><a href="#全局变量模块文件：" class="headerlink" title="全局变量模块文件："></a>全局变量模块文件：</h3><p> Global.vue文件：</p>
<pre><code>&lt;script&gt;
const serverSrc=&apos;www.baidu.com&apos;;
const token=&apos;12345678&apos;;
const hasEnter=false;
const userSite=&quot;中国钓鱼岛&quot;;
  export default
  {
    userSite,//用户地址
    token,//用户token身份
    serverSrc,//服务器地址
    hasEnter,//用户登录状态
  }
&lt;/script&gt;
</code></pre><h3 id="使用方式1："><a href="#使用方式1：" class="headerlink" title="使用方式1："></a>使用方式1：</h3><p><strong>在需要的地方引用进全局变量模块文件</strong>，然后通过文件里面的变量名字获取全局变量参数值。</p>
<p><strong>在text1.vue组件中使用：</strong></p>
<pre><code>&lt;template&gt;
    &lt;div&gt;{{ token }}&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import global_ from &apos;../../components/Global&apos;//引用模块进来
export default {
 name: &apos;text&apos;,
data () {
    return {
         token:global_.token,//将全局变量赋值到data里面，也可以直接使用global_.token
        }
    }
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;

&lt;/style&gt;
</code></pre><h3 id="使用方式2："><a href="#使用方式2：" class="headerlink" title="使用方式2："></a>使用方式2：</h3><p>在程序入口的main.js文件里面，将上面那个Global.vue文件挂载到Vue.prototype。</p>
<pre><code>import global_ from &apos;./components/Global&apos;//引用文件
Vue.prototype.GLOBAL = global_//挂载到Vue实例上面
</code></pre><p>接着在整个项目中不需要再通过引用Global.vue模块文件，直接通过this就可以直接访问Global文件里面定义的全局变量。</p>
<p>text2.vue：</p>
<pre><code>&lt;template&gt;
    &lt;div&gt;{{ token }}&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
 name: &apos;text&apos;,
data () {
    return {
         token:this.GLOBAL.token,//直接通过this访问全局变量。
        }
    }
}
&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;
&lt;/style&gt;
</code></pre><h3 id="Vuex也可以设置全局变量："><a href="#Vuex也可以设置全局变量：" class="headerlink" title="Vuex也可以设置全局变量："></a>Vuex也可以设置全局变量：</h3><p>通过vuex来存放全局变量，这里东西比较多，也相对复杂一些，有兴趣的小伙伴们，可自行查阅资料，折腾一波、</p>
<h2 id="定义全局函数"><a href="#定义全局函数" class="headerlink" title="定义全局函数"></a>定义全局函数</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>新建一个模块文件，然后在main.js里面通过Vue.prototype将函数挂载到Vue实例上面，通过this.函数名，来运行函数。</p>
<h3 id="1-在main-js里面直接写函数"><a href="#1-在main-js里面直接写函数" class="headerlink" title="1. 在main.js里面直接写函数"></a>1. 在main.js里面直接写函数</h3><p>简单的函数可以直接在main.js里面直接写</p>
<pre><code>Vue.prototype.changeData = function (){//changeData是函数名
  alert(&apos;执行成功&apos;);
}
</code></pre><p>组件中调用：</p>
<pre><code>this.changeData();//直接通过this运行函数
</code></pre><h3 id="2-写一个模块文件，挂载到main-js上面。"><a href="#2-写一个模块文件，挂载到main-js上面。" class="headerlink" title="2. 写一个模块文件，挂载到main.js上面。"></a>2. 写一个模块文件，挂载到main.js上面。</h3><p>base.js文件，文件位置可以放在跟main.js同一级，方便引用</p>
<pre><code>exports.install = function (Vue, options) {
   Vue.prototype.text1 = function (){//全局函数1
    alert(&apos;执行成功1&apos;);
    };
    Vue.prototype.text2 = function (){//全局函数2
    alert(&apos;执行成功2&apos;);
    };
};
</code></pre><p>main.js入口文件：</p>
<pre><code>import base from &apos;./base&apos;//引用
Vue.use(base);//将全局函数当做插件来进行注册
</code></pre><p>组件里面调用：</p>
<pre><code>this.text1();
this.text2();
</code></pre><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>上面就是如何定义全局变量 全局函数的内容了，这里的全局变量全局函数可以不局限于vue项目，vue-cli是用了webpack做模块化，其他模块化开发，定义全局变量、函数的套路基本上是差不多。上文只是对全局变量，全局函数的希望看完本文能给大家一点帮助。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><a href="http://obkoro1.com/" target="_blank" rel="external">blog网站</a>  and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<p>以上2017.10.23</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><p><a href="http://www.jb51.net/article/115093.htm" target="_blank" rel="external">详解VUE 定义全局变量的几种实现方式</a><br><a href="http://www.jianshu.com/p/04dffe7a6b74" target="_blank" rel="external"> Vue中如何定义全局函数</a><br><a href="http://www.cnblogs.com/dupd/p/6716386.html" target="_blank" rel="external">Vue.use源码分析</a><br><a href="https://segmentfault.com/q/1010000006854993" target="_blank" rel="external">export default</a></p>
]]></content>
      
        <categories>
            
            <category> Vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue-cli配置 </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js 计算两个时间的时间差]]></title>
      <url>/2017/10/15/js-%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%B6%E9%97%B4%E7%9A%84%E6%97%B6%E9%97%B4%E5%B7%AE/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>如题，就像题目说的需要计算出时间差，虽然不太难，但这个需求经常会在项目中遇到的，我在这边做一下整理，希望能够尽量全的整理出来。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<h2 id="计算时间差原理："><a href="#计算时间差原理：" class="headerlink" title="计算时间差原理："></a>计算时间差原理：</h2><h3 id="getTime-方法"><a href="#getTime-方法" class="headerlink" title="getTime()方法"></a>getTime()方法</h3><p>方法定义： getTime() 方法可返回距 1970 年 1 月 1 日之间的毫秒数。</p>
<p>通常我们计算时间差都是通过获取两个时间数据，然后分别使用getTime（）方法返回与固定的1970 年 1 月 1 日的时间差，通过对返回毫秒数的差，换算成时间单位，得出两个时间的时间差。</p>
<h2 id="开始操作："><a href="#开始操作：" class="headerlink" title="开始操作："></a>开始操作：</h2><p>首先你会有一串初始的时间数据，然后通过 new Date(你的时间数据)，将你的数据<strong>转成Date对象</strong>的形式。</p>
<pre><code>var t1=&quot;2017/08/28 04:56:38&quot;; //数据
var dateBegin = new Date(t1);//转化为Date对象的形式
//Mon Aug 28 2017 04:56:38 GMT+0800 (中国标准时间)  这里就是Date对象的数据形式
</code></pre><h3 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h3><p>这里的话就要注意一下后端给的<strong>时间数据格式</strong>的问题，比如下面两种：</p>
<pre><code>第一种：&quot;2017/08/28 04:56:38&quot;//这种格式不用再进行处理
第二种：&quot;2017-08-01 18:56:38&quot;//这种格式就要进行处理
</code></pre><p>因为new Date()方法不能处理第二种数据，所以我们这里需要<strong>将第二种数据格式转化为第一种数据的格式</strong>。</p>
<pre><code>var t1=&quot;2017-05-12 00:13:53&quot;;
var dateBegin = new Date(d1.replace(/-/g, &quot;/&quot;));//replace方法将-转为/
</code></pre><p>不知道大家是什么情况，反正因为我们后端给我的数据就是第二种的，所以我会提一下这个东西（捂脸）。</p>
<h4 id="另一个时间数据"><a href="#另一个时间数据" class="headerlink" title="另一个时间数据:"></a>另一个时间数据:</h4><p>既然是时间差的话，就肯定要有两个数据，不然怎么两相比较，一般两个数据中都会有一个当前时间的数据。</p>
<pre><code>var dateEnd = new Date();//当前时间数据
</code></pre><h3 id="完整计算时间差-天、小时、分钟、秒-的代码："><a href="#完整计算时间差-天、小时、分钟、秒-的代码：" class="headerlink" title="完整计算时间差(天、小时、分钟、秒)的代码："></a>完整计算时间差(天、小时、分钟、秒)的代码：</h3><p>先获取之间的毫秒差，通过毫秒差换算出你所需要的时间单位，然后时间单位之间的换算根据的是他们的倍数关系。</p>
<pre><code>function timeFn(d1) {//di作为一个变量传进来
    //如果时间格式是正确的，那下面这一步转化时间格式就可以不用了
    var dateBegin = new Date(d1.replace(/-/g, &quot;/&quot;));//将-转化为/，使用new Date
    var dateEnd = new Date();//获取当前时间
    var dateDiff = dateEnd.getTime() - dateBegin.getTime();//时间差的毫秒数
    var dayDiff = Math.floor(dateDiff / (24 * 3600 * 1000));//计算出相差天数
    var leave1=dateDiff%(24*3600*1000)    //计算天数后剩余的毫秒数
    var hours=Math.floor(leave1/(3600*1000))//计算出小时数
    //计算相差分钟数
    var leave2=leave1%(3600*1000)    //计算小时数后剩余的毫秒数
    var minutes=Math.floor(leave2/(60*1000))//计算相差分钟数
    //计算相差秒数
    var leave3=leave2%(60*1000)      //计算分钟数后剩余的毫秒数
    var seconds=Math.round(leave3/1000)
    console.log(&quot; 相差 &quot;+dayDiff+&quot;天 &quot;+hours+&quot;小时 &quot;+minutes+&quot; 分钟&quot;+seconds+&quot; 秒&quot;)
    console.log(dateDiff+&quot;时间差的毫秒数&quot;,dayDiff+&quot;计算出相差天数&quot;,leave1+&quot;计算天数后剩余的毫秒数&quot;
        ,hours+&quot;计算出小时数&quot;,minutes+&quot;计算相差分钟数&quot;,seconds+&quot;计算相差秒数&quot;);
}
var t3=&quot;2017-08-18 04:56:38&quot;;
timeFn(t3);
</code></pre><p><img src="https://user-gold-cdn.xitu.io/2017/10/15/3ffd4a7df082edd1f1ed6e413cfc35eb" alt="demo时间差数据截图"></p>
<h3 id="不成熟的计算月、年"><a href="#不成熟的计算月、年" class="headerlink" title="不成熟的计算月、年:"></a>不成熟的计算月、年:</h3><pre><code>//这里的dayDiff就是上文计算出的天数差
let monthDiff=Math.floor(dayDiff/30);//以30天为一个月不够精准严谨
//获取相差的月份
  if (monthDiff&lt;12){
    timeThis=monthDiff+&quot;个月前发布&quot;;//获取相差的月份
    return
  }
  let yearDiff=Math.floor(monthDiff/12);//获取相差的年份
  if(yearDiff&gt;=1){
    timeThis=yearDiff+&quot;年前发布&quot;;
    return
  }
</code></pre><p>当天数相差较大的时候，单纯计算天数已经不能满足需求了，因为我们PM说的统一以30天为一个月的分界线，然后这里月份的计算情况感觉很复杂的样子没有继续研究下去。</p>
<h3 id="获取当前月份的天数"><a href="#获取当前月份的天数" class="headerlink" title="获取当前月份的天数"></a>获取当前月份的天数</h3><pre><code> function getDays() {
    //构造当前日期对象
    var date = new Date();
    var year = date.getFullYear();//获取年份
    var mouth = date.getMonth() + 1;//获取当前月份
    var days;//定义当月的天数；
    if (mouth == 2) {//当月份为二月时，根据闰年还是非闰年判断天数
        days = year % 4 == 0 ? 29 : 28;
    }
    else if (mouth == 1 || mouth == 3 || mouth == 5 || mouth == 7 || mouth == 8 || mouth == 10 || mouth == 12) {
        //月份为：1,3,5,7,8,10,12 时，为大月.则天数为31；
        days = 31;
    }
    else {
        //其他月份，天数为：30.
        days = 30;
    }
    return days;
}
</code></pre><p>网上找了个获取当前月份天数的函数，上面的注释也足够全，我就一起贴上来，连接在下面。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>上面就是本文计算时间差的内容了，希望看完本文能给大家一点帮助。最后一个提示：一般需要处理的数据不会只有一两个，很可能会给一个数组，你需要处理每个数组元素的时间数据，这时候建议用forEach()函数遍历整个数组。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><a href="http://obkoro1.com/" target="_blank" rel="external">blog网站</a>  and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<p>以上2017.10.15</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><p><a href="http://www.cnblogs.com/rzm2wxm/p/5749151.html" target="_blank" rel="external">Js 获取当前月的天数</a><br><a href="http://blog.csdn.net/wei_jie_zhang/article/details/45873837" target="_blank" rel="external"> Js计算时间差（天、小时、分钟、秒）</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 时间差 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-cli npm run build空白页的两个坑 webpack gzip文件压缩优化打包文件]]></title>
      <url>/2017/10/11/vue-cli-npm-run-build%E7%A9%BA%E7%99%BD%E9%A1%B5%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%9D%91-webpack-gzip%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E4%BC%98%E5%8C%96%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>npm run build 是vue-cli用来打包项目的命令行，本文是关于vue-cli打包的一些常见的坑，会尽量详细的写每个步骤，大家可以一边看着文章，一边打包试试。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<h2 id="初始化一个项目："><a href="#初始化一个项目：" class="headerlink" title="初始化一个项目："></a>初始化一个项目：</h2><p>这里初始化一个项目，因为导致打包错误的原因多种多样，避免因为其他设置错误干扰，<strong>从头开始打包整体步骤也会更加清晰</strong>。</p>
<h3 id="命令行："><a href="#命令行：" class="headerlink" title="命令行："></a>命令行：</h3><pre><code>vue init webpack build1(项目名)
//吧啦吧啦进行一波设置
//进入项目文件夹
npm install
</code></pre><p>如果还不清楚如何初始化运行一个项目，可以参考我之前写的一篇文章：<a href="https://juejin.im/post/597eee92f265da3e2e56e37c" target="_blank" rel="external">传送门</a>。</p>
<h2 id="开始打包踩坑"><a href="#开始打包踩坑" class="headerlink" title="开始打包踩坑"></a>开始打包踩坑</h2><h3 id="命令行：-1"><a href="#命令行：-1" class="headerlink" title="命令行："></a>命令行：</h3><pre><code>//直接打包
npm run build
</code></pre><h3 id="打包出来的文件"><a href="#打包出来的文件" class="headerlink" title="打包出来的文件"></a>打包出来的文件</h3><p><img src="https://user-gold-cdn.xitu.io/2017/9/26/0324afbbfce9a0baf513417e07292c6b" alt="vue-cli项目文件打包位置"></p>
<h3 id="第一个坑：文件引用路径"><a href="#第一个坑：文件引用路径" class="headerlink" title="第一个坑：文件引用路径"></a>第一个坑：文件引用路径</h3><p>现在项目我们什么都没动，是初始化之后直接打包的状态，打开dist/index.htmnl文件整个网页都是一片空白的。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/26/609c0d3e25e99744930d81e892156f0b" alt=""></p>
<p>打开调试，发现有一排报错说是：<code>不能加载到资源</code>，后面就发现<strong>路径的问题</strong>，仔细看上面再看上面加载的css的引用路径，这里是有问题的。</p>
<h3 id="爬坑："><a href="#爬坑：" class="headerlink" title="爬坑："></a>爬坑：</h3><p><strong>文件位置：</strong>config文件夹/index.js文件</p>
<h4 id="1-更改assetsPublicPath属性："><a href="#1-更改assetsPublicPath属性：" class="headerlink" title="1.更改assetsPublicPath属性："></a>1.更改assetsPublicPath属性：</h4><p>文件里面有两个assetsPublicPath属性，更改第一个，也就是更改build里面的assetsPublicPath属性：</p>
<pre><code>assetsPublicPath:&apos;/&apos;//false
assetsPublicPath:&apos;./&apos;//true
</code></pre><p>assetsPublicPath属性作用是指定编译发布的根目录，<strong>‘/‘指的是项目的根目录 ，’./‘指的是当前目录。</strong></p>
<h4 id="2-改好设置之后，重新打包。"><a href="#2-改好设置之后，重新打包。" class="headerlink" title="2.改好设置之后，重新打包。"></a>2.改好设置之后，重新打包。</h4><p>打开打包文件：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/26/f4afd954cdb3dc6702dbae4a8066441a" alt="重新打开index.html"></p>
<h4 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h4><p><img src="https://user-gold-cdn.xitu.io/2017/9/26/bfc1ccd0318c288369a1d5d914ba16b6" alt="dist文件夹"></p>
<p>打包出来所有的文件都会放在dist的static文件夹下面，index.html要加载文件，那么问题来了，’/‘指的是项目的根目录 ，’./‘指的是当前目录。要选哪个？当然选择原谅她了。</p>
<h3 id="第二个坑：路由history模式。"><a href="#第二个坑：路由history模式。" class="headerlink" title="第二个坑：路由history模式。"></a>第二个坑：路由history模式。</h3><p>这个坑是当你使用了路由之后，<strong>在没有后端配合的情况下就手贱打开路由history模式的时候</strong>，打包出来的文件也会是一片空白的情况，很多人踩这个坑的时候花了很多时间，网上的教程基本上都是说的第一个坑，这个坑很少有人提起。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/9/bafef77c3943e031154d127964508072" alt="图片出自vue-router文档"></p>
<h4 id="打包之前的样子："><a href="#打包之前的样子：" class="headerlink" title="打包之前的样子："></a>打包之前的样子：</h4><p>这里我弄了个示例，因为是刚创建的项目没有其他因素干扰，当你打开路由的history模式之后，开发的时候一切正常</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/26/28200b7f45b8aac0897f62124c41eec1" alt="打包之前的路由"></p>
<h4 id="打包之后的样子："><a href="#打包之后的样子：" class="headerlink" title="打包之后的样子："></a>打包之后的样子：</h4><p><img src="https://user-gold-cdn.xitu.io/2017/9/26/f9c56757612f1dd5703fbf0fa09fb155" alt="打包之后路径也是对的，但是页面一片空白"></p>
<h4 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h4><pre><code>// mode: &apos;history&apos;,//将这个模式关闭就好
</code></pre><p>这里并不是说不能打开这个模式，这个模式需要后端设置的配合，详情可以看：<a href="https://router.vuejs.org/zh-cn/essentials/history-mode.html" target="_blank" rel="external">路由文档</a></p>
<hr>
<h3 id="Gzip-文件压缩"><a href="#Gzip-文件压缩" class="headerlink" title="Gzip 文件压缩"></a>Gzip 文件压缩</h3><p>顺带分享一个很6的优化打包的方法，用起来也简单的很，只要下载一个插件，然后打开一个设置就好了。</p>
<h4 id="设置方法："><a href="#设置方法：" class="headerlink" title="设置方法："></a>设置方法：</h4><p><img src="https://user-gold-cdn.xitu.io/2017/10/9/1f95faabfb7463e1dce708f046960398" alt=""></p>
<p>这里其实是webpack自带的一个优化打包的方法，打开这个配置后如果没有下载那个插件，会提示你下载，下载就好了。</p>
<p>然后在打包的时候，每个js和css文件会压缩一个gz后缀的文件夹，浏览器如果支持g-zip 会自动查找有没有gz文件 找到了就加载gz然后本地解压 执行。</p>
<p>打开这个配置会之后对整体的打包体积也就是dist文件夹并没有太大的变化。下图来看看他的压缩率以及对加载的提升，可以说是非常大且明显的，大家可以自己试一下就知道多好用了。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/10/9/7fd308bb2a27aba49009455266da73d3" alt=""></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>之前自己打包的时候连着踩了不少坑，可能是互相关联的，有时候你并不是错了一个地方，要想想自己其他地方是不是也是错的。上述的内容，算是自己踩坑的一些经验，希望可以帮到大家。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<p>以上2017.10.10</p>
]]></content>
      
        <categories>
            
            <category> vue-cli </category>
            
        </categories>
        
        
        <tags>
            
            <tag> build空白页 </tag>
            
            <tag> gzip文件压缩 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-cli 自定义路径别名 assets和static文件夹的区别 --save-dev和--save的区别]]></title>
      <url>/2017/10/11/vue-cli-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D-assets%E5%92%8Cstatic%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E5%8C%BA%E5%88%AB-save-dev%E5%92%8C-save%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>这是一篇vue-cli的几个小知识点简单介绍，适用于刚接触vue-cli脚手架以及对此方面并不太了解的同学，大佬们绕道。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<h2 id="静态资源处理："><a href="#静态资源处理：" class="headerlink" title="静态资源处理："></a>静态资源处理：</h2><h3 id="assets和static文件夹的区别"><a href="#assets和static文件夹的区别" class="headerlink" title="assets和static文件夹的区别"></a>assets和static文件夹的区别</h3><p>相信有很多人知道vue-cli有两个放置静态资源的地方，分别是<code>src/assets</code>文件夹和<code>static</code>文件夹,这两者的区别很多人可能不太清楚。</p>
<p><strong>assets目录中的文件会被webpack处理解析为模块依赖</strong>，只支持相对路径形式。例如，在 <code>&lt;img src=&quot;./logo.png&quot;&gt;</code><br>和 <code>background: url(./logo.png)</code>中，”./logo.png” 是相对的资源路径，将由Webpack解析为模块依赖。</p>
<p><strong>static/ 目录下的文件并不会被Webpack处理：它们会直接被复制到最终的打包目录（默认是dist/static）下。</strong>必须使用绝对路径引用这些文件，这是通过在 config.js 文件中的 build.assetsPublicPath 和 build.assetsSubDirectory 连接来确定的。</p>
<p>任何放在 static/ 中文件需要以绝对路径的形式引用：/static/[filename]。</p>
<p>在我们实际的开发中，总的来说：<strong>static放不会变动的文件 assets放可能会变动的文件。</strong></p>
<h3 id="在js数据中如何引用图片"><a href="#在js数据中如何引用图片" class="headerlink" title="在js数据中如何引用图片"></a>在js数据中如何引用图片</h3><p>因为webpack会将图片当做模块来引用，所以在js中需要使用require将图片引用进来，不能直接以字符串的形式。</p>
<pre><code>js部分：
    data () {
        return {
             imgUrl: &apos;图片地址&apos;,//错误写法
            imgUrl: require(&apos;图片地址&apos;)//正确的写法
        }
}
template部分：
img标签形式：
&lt;img :src=&quot;img&quot; /&gt;
或者div背景图形式：
&lt;div :style=&quot;{backgroundImage: &apos;url(&apos; + img + &apos;)&apos;}&quot;&gt;&lt;/div&gt;
</code></pre><p>说了图片就正好再提一下vue-cli的一个图片有关的配置，下图这个配置的意思是：在10000b 的图片以下进行base64转换，所以如果项目中有些比较小的icon就不用再进行图片精灵的处理了</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/17/a476773456af2f136aa1e1a45da18f9f" alt=""></p>
<h2 id="webpack-vue自定义路径别名"><a href="#webpack-vue自定义路径别名" class="headerlink" title="webpack+vue自定义路径别名"></a>webpack+vue自定义路径别名</h2><p>vue-cli 用的是webpack，也可以使用webpack自定义别名这个功能，自定义别名这个功能<strong>当你在多层文件夹嵌套的时候不必一层一层找路径，直接使用自定义别名就可以找到文件的位置。</strong></p>
<h3 id="设置方法："><a href="#设置方法：" class="headerlink" title="设置方法："></a>设置方法：</h3><p><strong>设置地址：</strong>build文件夹下面的webpack.base.conf.js文件<br><strong>具体设置：</strong></p>
<pre><code>resolve: {
    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],
     alias: {
        &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,
        &apos;@&apos;: resolve(&apos;src&apos;),
        &apos;static&apos;:path.resolve(__dirname, &apos;../static&apos;),//增加这一行代码
        }
    },
</code></pre><p><strong>使用方式：</strong></p>
<p>使用的时候要像下方截图的B处一样前面要加上一个’~’，这里的webstorm虽然提示报错，我们可以不用管，代码运行是正常的。</p>
<p><strong>解读：</strong></p>
<p>这里给’static’赋予了一个地址，那么在程序中引入路径的时候’~static’就直接可以代替路径’../static’，亲测，这里就算多层嵌套也可以成功找到路径。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/18/35d8e67e0a4783aba76fde31412225a4" alt="示例图片"></p>
<h2 id="清理项目中没用的插件"><a href="#清理项目中没用的插件" class="headerlink" title="清理项目中没用的插件"></a>清理项目中没用的插件</h2><p>很多人像我一样，刚开始的会安装很多插件，然后最后在项目中并没有用到。那之前安装的插件太多了，连自己都忘记了安装了哪些插件？</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p><img src="https://user-gold-cdn.xitu.io/2017/9/17/7e9d41302f682760c2eb6cccf5137acf" alt=""></p>
<p>在上图所示位置，我们项目安装的所有的模块依赖都在这个pageage.json文件中，当我们需要整理一波自己的依赖的时候，可以在这个文件里面找有没有现在已经没用的依赖，可以使用命令行<code>npm remove 模块名字</code>来删除没用的模块。</p>
<h3 id="–save-dev和–save的区别"><a href="#–save-dev和–save的区别" class="headerlink" title="–save-dev和–save的区别"></a>–save-dev和–save的区别</h3><p>上面的这些依赖有些只在开发环境里面使用的模块，有的在项目上线之后还是要继续依赖的模块。他们之间的区别就在于我们平时安装模块依赖时的：<code>--save-dev</code>和 <code>--save</code></p>
<p>当你使用<code>--save-dev</code>安装依赖的时候就会放在package.json的devDependencies对象下面，相反的，当你使用<code>--save</code>安装依赖的时候就会出现在dependencies对象下面。</p>
<p>总结：<strong> –save-dev 是你开发时候依赖的东西，–save 是你发布之后还依赖的东西。</strong></p>
<h3 id="关于vue-cli配置之前也写过两篇文章，需要的同学可以看一下："><a href="#关于vue-cli配置之前也写过两篇文章，需要的同学可以看一下：" class="headerlink" title="关于vue-cli配置之前也写过两篇文章，需要的同学可以看一下："></a>关于vue-cli配置之前也写过两篇文章，需要的同学可以看一下：</h3><p><a href="https://juejin.im/post/597eee92f265da3e2e56e37c" target="_blank" rel="external">手摸手教你使用vue-cli脚手架</a></p>
<p><a href="https://juejin.im/post/5986f5c8f265da3e0e1053cf" target="_blank" rel="external">在 vue-cli 脚手架中引用 jQuery、bootstrap 以及使用 sass、less 编写 css</a></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>以上就是这篇文章的内容了，是自己一段时间实践项目的一些小积累，后续还有一些内容，因为项目比较紧，可能会晚点和大家见面。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<p>以上2017.9.18</p>
]]></content>
      
        <categories>
            
            <category> vue-cli </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue-cli解析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在 vue-cli 脚手架中引用 jQuery、bootstrap 以及使用 sass、less 编写 css [vue-cli配置入门]]]></title>
      <url>/2017/10/11/%E5%9C%A8-vue-cli-%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%AD%E5%BC%95%E7%94%A8-jQuery%E3%80%81bootstrap-%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8-sass%E3%80%81less-%E7%BC%96%E5%86%99-css-vue-cli%E9%85%8D%E7%BD%AE%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>本文是<a href="https://juejin.im/post/597eee92f265da3e2e56e37c" target="_blank" rel="external">vue-手摸手教你使用vue-cli脚手架-详细步骤图文解析</a>之后，又一篇关于vue-cli脚手架配置相关的文章，因为有些文章步骤不够清晰，当时我引入JQuery、bootstrap的时候颇费了一番功夫，所以本文的步骤会尽量详细一点。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。</p>
<h2 id="引入bootstrap"><a href="#引入bootstrap" class="headerlink" title="引入bootstrap"></a>引入bootstrap</h2><h3 id="1-下载所需要的bootstrap文件。"><a href="#1-下载所需要的bootstrap文件。" class="headerlink" title="1. 下载所需要的bootstrap文件。"></a>1. 下载所需要的bootstrap文件。</h3><p>将要使用的bootstrap文件放入src目录下的assets文件夹中。</p>
<h3 id="2-在入口文件src-main-js中引入bootstrap"><a href="#2-在入口文件src-main-js中引入bootstrap" class="headerlink" title="2. 在入口文件src/main.js中引入bootstrap"></a>2. 在入口文件src/main.js中引入bootstrap</h3><pre><code>import &apos;./assets/bootstrap-3.3.7-dist/css/bootstrap.min.css&apos;
import &apos;./assets/bootstrap-3.3.7-dist/js/bootstrap.min&apos;//根据自己文件夹路径选择路径
</code></pre><p>这样就可以在vue项目中使用bootstrap的样式了，直接在class中使用即可，如下图按钮样式。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/7/8fa300c1f5ce01a2a6169b85b3c65717" alt=""></p>
<hr>
<h2 id="引入jquery"><a href="#引入jquery" class="headerlink" title="引入jquery"></a>引入jquery</h2><h3 id="1-下载jquery依赖。"><a href="#1-下载jquery依赖。" class="headerlink" title="1. 下载jquery依赖。"></a>1. 下载jquery依赖。</h3><pre><code>npm install jquery --save
</code></pre><p>本来我下载的jQuery依赖包，但是出现了一个警告：<br><img src="https://user-gold-cdn.xitu.io/2017/8/6/74dba74724cfd56e67b353f875c39c25" alt=""><br>这里出现了一个警告，意思是说<code>弃用jQuery@1.7.4,请使用“jquery”(全小写)。</code>，然后我就换成全小写的jquery。</p>
<h3 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2. 修改配置"></a>2. 修改配置</h3><ol>
<li>位置：build文件夹下的webpack.base.conf.js文件。<br> 加入webpack对象：<pre><code>var webpack = require(&quot;webpack&quot;);
</code></pre></li>
<li>位置：build文件夹下的webpack.base.conf.js文件（原来的位置），在下方module.exports对象里面加入。<pre><code> plugins: [// 3. 配置全局使用 jquery
    new webpack.ProvidePlugin({
    $: &quot;jquery&quot;,
    jQuery: &quot;jquery&quot;,
    jquery: &quot;jquery&quot;,
    &quot;window.jQuery&quot;: &quot;jquery&quot;
})],
</code></pre><img src="https://user-gold-cdn.xitu.io/2017/8/6/965457674692e42243cec5c8d29683be" alt="如图所示"></li>
<li>没有第三步，现在已经可以<strong>直接在组件中使用jquery的方法</strong>了，<strong>不用在其他位置引用jquery</strong>，就是这么轻松加愉快。</li>
</ol>
<h3 id="3-使用JQ插件"><a href="#3-使用JQ插件" class="headerlink" title="3. 使用JQ插件"></a>3. 使用JQ插件</h3><p>关于这一点查阅了很多资料，几乎没什么文献清楚的说明jq插件的使用方式，以至于很多使用vue很久的大佬们，也不知道jq的插件竟然可以直接在vue-cli中使用。。这一步虽然是简单的，但这里还是提一下，为各位提供一些参考。</p>
<h3 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h3><p>jq插件只需要将插件所需要的文件下载到本地src/assets或者最外层的static文件夹中，然后将插件的文件引用进组件，根据插件封装的方法来进行调用就行了，跟直接使用jq的插件基本上是一毛一样的。</p>
<h3 id="下面是一个引用jq插件的demo示例："><a href="#下面是一个引用jq插件的demo示例：" class="headerlink" title="下面是一个引用jq插件的demo示例："></a>下面是一个引用jq插件的demo示例：</h3><p><img src="https://user-gold-cdn.xitu.io/2017/8/7/8482dcb1de93a03dec7ddde5bd1aea6f" alt=""></p>
<hr>
<h2 id="关于css的部分"><a href="#关于css的部分" class="headerlink" title="关于css的部分"></a>关于css的部分</h2><p>在vue-cli中使用sass、less来编写css样式，步骤十分简洁，因为vue-cli已经配置好了sass、less，我们要使用sass或者less直接下载两个模块，然后webpack会根据 lang 属性自动用适当的加载器去处理。</p>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><ol>
<li>直接上手写样式即可，使用css规则。</li>
<li>引用外部css文件的写法。<pre><code>&lt;style lang=&quot;css&quot;&gt;
@import &apos;./index.css&apos;
&lt;/style&gt;
或者
&lt;style lang=&quot;css&quot; src=&quot;./index.css&quot;&gt;&lt;/style&gt;
</code></pre></li>
</ol>
<h3 id="如果需要使用sass"><a href="#如果需要使用sass" class="headerlink" title="如果需要使用sass"></a>如果需要使用sass</h3><ol>
<li>安装sass模块<pre><code>npm install node-sass --save-dev
npm install sass-loader --save-dev
</code></pre></li>
<li>在组件的style部分使用内联写法<pre><code>&lt;template&gt;&lt;/template&gt;
&lt;script&gt;&lt;/script&gt;
&lt;style lang=&quot;scss&quot; scoped&gt;//在这个部分添加lang=&quot;scss&quot;
//sass样式
&lt;/style&gt;
</code></pre></li>
<li>引用sass外部文件的写法。<pre><code>&lt;style lang=&quot;scss&quot; src=&quot;./index.scss&quot;&gt;&lt;/style&gt;
</code></pre></li>
</ol>
<h3 id="如果需要使用less"><a href="#如果需要使用less" class="headerlink" title="如果需要使用less"></a>如果需要使用less</h3><ol>
<li>安装less模块<pre><code>npm install less --save-dev
npm install less-loader --save-dev
</code></pre></li>
<li>在组件的style部分使用内联写法<pre><code>&lt;template&gt;&lt;/template&gt;
&lt;script&gt;&lt;/script&gt;
&lt;style lang=&quot;less&quot; scoped&gt;//在这个部分添加lang=&quot;less&quot;
//less样式
&lt;/style&gt;
</code></pre></li>
<li>引用less外部文件的写法。<pre><code>&lt;style lang=&quot;less&quot; src=&quot;./index.less&quot;&gt;&lt;/style&gt;
</code></pre></li>
</ol>
<hr>
<h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>仔细阅读，按步骤来基本上可以配置成功。<strong>如果有哪个地方写的不够清楚的，欢迎指正。</strong>本文面向小白，写着玩，大手请轻喷。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！写文偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="http://blog.csdn.net/tanhao_282700/article/details/68955607" target="_blank" rel="external"> vue-cli快速构建项目以及引入bootstrap、jq</a><br><a href="http://www.cnblogs.com/xiaofenguo/p/6605302.html" target="_blank" rel="external">vue中引入jQuery和Bootstrap</a><br><a href="http://blog.csdn.net/itKingOne/article/details/74729508" target="_blank" rel="external">Vue-cli单文件组件引入less、sass、css样式的不同方法</a></p>
<p>以上2017.8.10</p>
]]></content>
      
        <categories>
            
            <category> vue-cli </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue-cli配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手摸手教你使用vue-cli脚手架-详细步骤图文解析[vue入门]]]></title>
      <url>/2017/10/11/%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6-%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%E5%9B%BE%E6%96%87%E8%A7%A3%E6%9E%90-vue%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>使用 vue-cli 可以快速创建 vue 项目，vue-cli很好用，但是在最初搭建环境安装vue-cli及相关内容的时候，对一些人来说是很头疼的一件事情，本人在搭建vue-cli的项目环境的时候也是踩了相当多的坑，特此写了一篇搭建环境的教程，每一步尽量详细解析。需要的朋友可以过来参考下，喜欢的可以点波赞，或者关注一下本人，希望可以帮到大家。</p>
<h2 id="vue-cli脚手架的优势："><a href="#vue-cli脚手架的优势：" class="headerlink" title="vue-cli脚手架的优势："></a>vue-cli脚手架的优势：</h2><ol>
<li>有一套成熟的vue项目架构设计,能够快速初始化一个Vue项目.</li>
<li><a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">vue-cli</a>是官方支持的一个脚手架，会随本版本进行迭代更新。</li>
<li>vue-cli提供了一套本地的node测试服务器，使用vue-cli自己提供的命令，就可以启动服务器。</li>
<li>集成打包上线方案。</li>
<li>还有一些优点，包括：模块化，转译，预处理，热加载，静态检测和自动化测试等，等大家深入使用下去就会发现vue-cli的强大之处。</li>
</ol>
<hr>
<h3 id="本教程是基于windows系统。"><a href="#本教程是基于windows系统。" class="headerlink" title="本教程是基于windows系统。"></a>本教程是基于windows系统。</h3><p>下面正式开始搭建vue-cli脚手架。</p>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><p>命令行工具是我们操作npm的基础，这个必须要有的，很多教程没有写清楚，那些教程一上来就贴上一大堆命令，当初也不知道在哪里使用命令行工具。。。</p>
<h4 id="git-bash命令行工具"><a href="#git-bash命令行工具" class="headerlink" title="git bash命令行工具"></a>git bash命令行工具</h4><ol>
<li><p>windows下本人推荐使用GitHub的桌面管理工具自带的git bash命令行工具，正常下载安装就可以。</p>
</li>
<li><p><a href="https://desktop.github.com/" target="_blank" rel="external">下载地址</a>，下图是下载安装完成之后，git bash的使用方法。</p>
</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/1/9a10ec89f6a6613a793f4a8a1f1ed294" alt="git bash命令行工具的使用方法"></p>
<p>ps:当然如果想使用自带的终端cmd命令行工具也是可以，但是毕竟没有git bash来的好用方便。</p>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><ol>
<li><p>在<a href="http://nodejs.cn/download/" target="_blank" rel="external">node.js中文官网</a>正常下载安装node.js就可以，没有什么特别需要注意的点（傻瓜式安装）。</p>
</li>
<li><p>在官网下载安装node.js后，就已经自带npm（包管理工具），不需要另外再进行安装npm了。</p>
</li>
<li><h4 id="注意下载node-js版本要在4-0以上，避免版本过低影响使用。"><a href="#注意下载node-js版本要在4-0以上，避免版本过低影响使用。" class="headerlink" title="注意下载node.js版本要在4.0以上，避免版本过低影响使用。"></a>注意下载node.js版本要在4.0以上，避免版本过低影响使用。</h4></li>
<li><p>打开命令行工具（随便哪个文件夹），输入命令行 <code>node -v</code>，<code>npm -v</code>，如下图，如果出现相应的版本号，则说明安装成功。</p>
</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/1/d2f7f37faba936f99a249017e065a3e8" alt="检测node npm安装情"></p>
<h2 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h2><h3 id="cnpm（淘宝镜像）相关："><a href="#cnpm（淘宝镜像）相关：" class="headerlink" title="cnpm（淘宝镜像）相关："></a>cnpm（淘宝镜像）相关：</h3><ol>
<li>这是一个完整 npmjs.org 镜像，是用来<strong>同步npm上面的模块</strong>。</li>
<li>cnpm的同步频率为 10分钟 （<strong>新发布的模块有滞后性</strong>，同步是需要时间的，等不及的可以使用npm）。</li>
<li>安装cnpm的原因：npm的服务器是外国的，所以有时候我们安装“模块”会很很慢很慢超级慢。</li>
<li>cnpm的作用：淘宝镜像将npm上面的模块同步到国内服务器，<strong>提高我们安装模块的时间。</strong></li>
<li>安装完淘宝镜像之后，<strong><code>cnpm</code>和<code>npm</code>命令行皆可使用，二者并不冲突</strong><br><img src="https://user-gold-cdn.xitu.io/2017/8/3/686a5c34f6c9b89d0b27b16d2378ac77" alt="截图出自淘宝镜像官网"></li>
</ol>
<p>安装方法：打开命令行工具，输入命令行：</p>
<pre><code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre><p>cnpm使用方法:</p>
<pre><code>$ cnpm install [name]
</code></pre><p>安装模块的时候，将npm换成cnpm就行，国内很多coder都是使用cnpm的，个人建议大家都装一下，附上：<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝镜像网址</a>、</p>
<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><p>安装方法：打开命令行工具，输入命令行：</p>
<pre><code>npm install webpack -g
</code></pre><p>安装成功后输入<code>webpack -v</code>,如果出现相应的版本号，则说明安装成功。</p>
<h2 id="安装vue-cli脚手架构建工具"><a href="#安装vue-cli脚手架构建工具" class="headerlink" title="安装vue-cli脚手架构建工具"></a>安装vue-cli脚手架构建工具</h2><p>安装方法：全局安装，随便一个文件夹，输入命令行：</p>
<pre><code>npm install vue-cli -g
</code></pre><p>安装完成之后，输入命令行<code>vue -V</code>查看版本号，出现相应得到版本号即为成功：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/3/eabb4e01fee257f93d466aa9b80d61ee" alt="查看vue-cli是否安装成功"></p>
<h4 id="注：这里是大写的V"><a href="#注：这里是大写的V" class="headerlink" title="注：这里是大写的V"></a>注：这里是大写的V</h4><h2 id="通过vue-cli，初始化vue项目"><a href="#通过vue-cli，初始化vue项目" class="headerlink" title="通过vue-cli，初始化vue项目"></a>通过vue-cli，初始化vue项目</h2><p>通过以上几步，将我们安装脚手架所需要的环境和工具都准备好好了，下面就可以使用vue-cli来初始化项目。</p>
<h3 id="1。新建一个vuetext（项目名）文件夹来放置项目，"><a href="#1。新建一个vuetext（项目名）文件夹来放置项目，" class="headerlink" title="1。新建一个vuetext（项目名）文件夹来放置项目，"></a>1。新建一个vuetext（项目名）文件夹来放置项目，</h3><p>在<strong>新建文件夹的上一级文件夹</strong>右键打开命令行工具，输入命令行：</p>
<pre><code>vue init webpack vuetext1(项目名)
</code></pre><p><strong>注：</strong>项目名不能大写，不能使用中文<br>解释一下这个命令，这个命令的意思是<strong>初始化一个vue项目</strong>，其中webpack是构建工具，也就是整个项目是<strong>基于webpack</strong>的。其中vuetext1是整个项目文件夹的名称，这个<strong>文件夹会自动生成在你指定的目录</strong>中。</p>
<h3 id="2。以下是脚手架安装过程（安装步骤解析在图片下面）"><a href="#2。以下是脚手架安装过程（安装步骤解析在图片下面）" class="headerlink" title="2。以下是脚手架安装过程（安装步骤解析在图片下面）"></a>2。以下是脚手架安装过程（安装步骤解析在图片下面）</h3><p><img src="https://user-gold-cdn.xitu.io/2017/8/4/8d84c6de896ece8579089b8351d8cfb3" alt=""></p>
<h3 id="vue-cli初始化项目选项配置详细解析"><a href="#vue-cli初始化项目选项配置详细解析" class="headerlink" title="vue-cli初始化项目选项配置详细解析"></a>vue-cli初始化项目选项配置详细解析</h3><pre><code>$ vue init webpack vuetext1--------------------- 安装vue-cli,初始化vue项目的命令
? Target directory exists. Continue? (Y/n) y---------------------找到了vuetext1这个目录是否要继续
? Target directory exists. Continue? Yes
? Project name (vuetext1)---------------------项目的名称（默认是文件夹的名称），ps：项目的名称不能有大写，不能有中文，否则会报错
? Project name vuetext1
? Project description (A Vue.js project)---------------------项目描述，可以自己写
? Project description A Vue.js project
? Author (OBKoro1)---------------------项目创建者
? Author OBKoro1
? Vue build (Use arrow keys)--------------------选择打包方式，有两种方式（runtime和standalone），使用默认即可
? Vue build standalone
? Install vue-router? (Y/n) y--------------------是否安装路由，一般都要安装
? Install vue-router? Yes
? Use ESLint to lint your code? (Y/n) n---------------------是否启用eslint检测规则，这里个人建议选no，因为经常会各种代码报错，新手还是不安装好
? Use ESLint to lint your code? No
? Setup unit tests with Karma + Mocha? (Y/n)--------------------是否安装单元测试
? Setup unit tests with Karma + Mocha? Yes
? Setup e2e tests with Nightwatch? (Y/n) y)--------------------是否安装e2e测试
? Setup e2e tests with Nightwatch? Yes

vue-cli · Generated &quot;vuetext1&quot;.
To get started:)--------------------如何开始
 cd vuetext1)--------------------进入你安装的项目
 npm install)--------------------安装项目依赖
 npm run dev)--------------------运行项目
Documentation can be found at https://vuejs-templates.github.io/webpack)--------------------vue-cli官方文档
</code></pre><p>现在vuetext1项目已经初步初始化完成了，里面也有一些文件，但是现在还不能成功运行。</p>
<h3 id="3-如何运行项目"><a href="#3-如何运行项目" class="headerlink" title="3.如何运行项目"></a>3.如何运行项目</h3><ol>
<li>进入你刚才创建在vuetext1项目的文件夹里面，<strong>在vuetext1项目的文件夹里面右键运行git bash 命令行工具</strong>。</li>
<li><p><strong>安装项目依赖。</strong>命令行： <code>npm  install</code>。前面在项目初始化的时候，已经存在了package.json文件，直接使用npm install 安装项目所需要的依赖，否则项目不能正确运行。</p>
<h3 id="创建完成的“vuetext1”目录如下："><a href="#创建完成的“vuetext1”目录如下：" class="headerlink" title="创建完成的“vuetext1”目录如下："></a>创建完成的“vuetext1”目录如下：</h3><p><img src="https://user-gold-cdn.xitu.io/2017/8/5/9d766e8dc72c4e9ce241f8ba2ec3618b" alt="创建完成的项目结构"></p>
</li>
<li><p>到这里，我们已经成功使用vue-cli初始化了一个vue项目。</p>
<h4 id="启动项目："><a href="#启动项目：" class="headerlink" title="启动项目："></a>启动项目：</h4><p>在vuetext1目录运行命令行<code>npm run dev</code>，启动服务，服务启动成功后浏览器会默认打开一个“欢迎页面”，如下图。</p>
</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/5/c1c35aec19a4cd9ea6b587b93720a4e2" alt="vue-cli项目成功启动"></p>
<p><strong>注意：</strong>这里是默认服务启动的是本地的8080端口，所以请确保你的8080端口不被别的程序所占用，当有其他vue项目运行的时候，可以使用ctrl+c来中断运行。</p>
<h3 id="vue-cli配置相关"><a href="#vue-cli配置相关" class="headerlink" title="vue-cli配置相关:"></a>vue-cli配置相关:</h3><p>这是我写的另外一篇关于vue-cli配置相关的文章，有需要的朋友可以参考一下。<br><a href="https://juejin.im/post/5986f5c8f265da3e0e1053cf" target="_blank" rel="external">在vue-cli脚手架中引用JQuery、bootstrap以及使用sass、less编写css[vue-cli配置入门]</a></p>
<h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>本文关于如何搭建vue-cli脚手架已经尽量详细了，仔细阅读，按步骤来基本上可以成功。如果有哪个地方写的不够清楚的，欢迎指正。本文面向小白，写着玩，大手请轻喷。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！写文偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
]]></content>
      
        <categories>
            
            <category> vue-cli </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 初始化vue-cli </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[angular ui-router：简单的单页面嵌套路由的实现过程]]></title>
      <url>/2017/10/11/angular-ui-router%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>ui-router是angular的一个插件，因为angular前面几个版本自带的原生ng-router不能很好的满足开发需求，所以在实现angular单页面嵌套的时候，都是使用ui-router。本文是的内容关于angular ui-router实现过程，内含demo以及代码地址，需要的朋友可以过来参考下，喜欢的可以点波赞，或者关注一下本人，ui-router的实现过程并不复杂，希望通过本文大家能够学会ui-router的使用方法。</p>
<h2 id="ui-router与ng-router："><a href="#ui-router与ng-router：" class="headerlink" title="ui-router与ng-router："></a>ui-router与ng-router：</h2><p>UI-Router是angular原生ng-route进化版，相较与ng-router有如下两条优点：</p>
<ol>
<li><p>视图不能嵌套,这意味着$scope会发生不必要的重新载入。</p>
</li>
<li><p>同一URL下不支持多个视图。这一需求也是常见的：我们希望导航栏用一个视图（和相应的控制器）、内容部分用另一个视图（和相应的控制器）。</p>
</li>
</ol>
<h2 id="最终实现demo效果"><a href="#最终实现demo效果" class="headerlink" title="最终实现demo效果"></a>最终实现demo效果</h2><p><img src="https://dn-mhke0kuv.qbox.me/1035fc96102e99ed0631.gif" alt=""></p>
<h2 id="AngularJS单页面实现原理："><a href="#AngularJS单页面实现原理：" class="headerlink" title="AngularJS单页面实现原理："></a>AngularJS单页面实现原理：</h2><p>AngularJS 路由允许我们通过不同的 URL 访问不同的内容，通常我们的<strong>URL形式</strong>为<a href="http://runoob.com/first/page" target="_blank" rel="external">http://runoob.com/first/page</a> ，在单页Web应用中 AngularJS 通过<strong> # + 标记 </strong>实现，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://runoob.com/#/first</div><div class="line">http://runoob.com/#/second</div><div class="line">http://runoob.com/#/third</div></pre></td></tr></table></figure>
<ol>
<li>当我们访问这上面任意一个链接的时候，向服务端<strong>请求的都是同一个地址</strong>： <a href="http://runoob.com/" target="_blank" rel="external">http://runoob.com/</a></li>
<li><strong>#号之后的内容</strong>在向服务端请求时会<strong>被浏览器忽略掉</strong></li>
<li><p>路由就通过<strong> # + 标记</strong>帮助我们<strong>区分不同的逻辑页面并将不同的页面绑定到对应的控制器上</strong>，如下图所示：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/6fe0883403f7cb72acd7" alt="不同的视图页面对应不同的控制器"></p>
</li>
</ol>
<h3 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a><a href="https://obkoro1.github.io/article-demo/2017/uiRouter/index.html#/PageTab/Page3" target="_blank" rel="external">demo地址</a></h3><hr>
<h1 id="ui-router实现过程"><a href="#ui-router实现过程" class="headerlink" title="ui-router实现过程"></a>ui-router实现过程</h1><h2 id="1、创建页面："><a href="#1、创建页面：" class="headerlink" title=" 1、创建页面："></a> 1、创建页面：</h2><p>要实现上文那个demo效果，我们需要创建如下页面：</p>
<ol>
<li>app.js<br> 这是路由的配置页面</li>
<li>index.html<br> 通常叫做index.html是单页面的首页，里面导入了各种css样式、库，插件，框架之类的。</li>
<li>PageTab.html<br> 进入index.html首先展示的视图页面，下面几个是PageTab下面的嵌套页面</li>
<li>Page-1.html</li>
<li>Page-2.html</li>
<li>Page-3.html</li>
</ol>
<p>代码上传到github上面了，需要的朋友可以自行查看： <a href="https://github.com/OBKoro1/article-demo/tree/master/2017/uiRouter" target="_blank" rel="external">代码地址</a></p>
<p><strong>注：</strong>angular用的是：1.4.6，ui-router用的是1.0</p>
<p>ps：现在angular4，自带的原生ng-router好像也已经支持了多层嵌套。但是因为还没流传开，市面上，大多还是1.4，所以还是需要用到ui-router。</p>
<h2 id="2、在index-html里面导入js文件"><a href="#2、在index-html里面导入js文件" class="headerlink" title=" 2、在index.html里面导入js文件"></a> 2、在index.html里面导入js文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.4.6/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;https://cdn.bootcss.com/angular-ui-router/1.0.0-rc.1/angular-ui-router.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;App.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>1.angular文件，2.ui-router插件,3.路由js页面</p>
<h4 id="注意：angular文件必须在ui-router前面，因为ui-router是依赖angular的插件。"><a href="#注意：angular文件必须在ui-router前面，因为ui-router是依赖angular的插件。" class="headerlink" title="注意：angular文件必须在ui-router前面，因为ui-router是依赖angular的插件。"></a>注意：angular文件必须在ui-router前面，因为ui-router是依赖angular的插件。</h4><p>这几个文件是最基本的页面，如果是一个<strong>完整的angular单页面项目</strong>的话，<strong>index,html</strong>是这幅样子：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/a7e76d330ad49be344e8" alt=""></p>
<p>在单页面中，不管你从哪个视图查看网页代码，都是这样子，第一次看的都醉了！</p>
<h2 id="3-app-js"><a href="#3-app-js" class="headerlink" title=" 3.app.js"></a> 3.app.js</h2><p><strong>app.js声明了AngularJS模块和路由配置</strong>。当页面加载的时候我们会在index.html中显示PageTab.html的内容。具体代码如下，每一个关键的地方都有相应的<strong>注释注释注释</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var myApp = angular.module(&quot;myApp&quot;, [&quot;ui.router&quot;]);</div><div class="line">//这里叫做App模块，这将告诉HTML页面这是一个AngularJS作用的页面，并把ui-router注入AngularJS主模块，它的内容由AngularJS引擎来解释。</div><div class="line">myApp.config(function ($stateProvider, $urlRouterProvider) &#123;</div><div class="line">    //这一行声明了把 $stateProvider 和 $urlRouteProvider 路由引擎作为函数参数传入，这样我们就可以为这个应用程序配置路由了.</div><div class="line">    $urlRouterProvider.when(&quot;&quot;, &quot;/PageTab&quot;);</div><div class="line">    //如果没有路由引擎能匹配当前的导航状态，默认将路径路由至 PageTab.html, 那它就像switch case语句中的default选项.就是一个默认的视图选项</div><div class="line">    $stateProvider</div><div class="line">        //这一行定义了会在main.html页面第一个显示出来的状态（就是进入页面先加载的html），作为页面被加载好以后第一个被使用的路由.</div><div class="line">        .state(&quot;PageTab&quot;, &#123;//导航用的名字</div><div class="line">            url: &quot;/PageTab&quot;,//#+标识符，这里就是url地址栏上面的标识符，通过标识符，进入不同的html页面</div><div class="line">            templateUrl: &quot;PageTab.html&quot;//这里是html的路径，这是跟标识符相对应的html页面</div><div class="line">        &#125;)</div><div class="line">        .state(&quot;PageTab.Page1&quot;, &#123;//引号里面代表Page1是PageTab的子页面，用.隔开</div><div class="line">            url:&quot;/Page1&quot;,</div><div class="line">            templateUrl: &quot;Page-1.html&quot;</div><div class="line">        &#125;)</div><div class="line">        .state(&quot;PageTab.Page2&quot;, &#123;//需要跳转页面的时候，就是用这双引号里面的地址</div><div class="line">            url:&quot;/Page2&quot;,</div><div class="line">            templateUrl: &quot;Page-2.html&quot;</div><div class="line">        &#125;)</div><div class="line">        .state(&quot;PageTab.Page3&quot;, &#123;</div><div class="line">            url:&quot;/Page3&quot;,</div><div class="line">            templateUrl: &quot;Page3.html&quot;</div><div class="line">        &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>现在已经成功把appjs实现出来，然后需要在html里面定义视图，以及视图跳转链接</p>
<h2 id="4-html定义视图"><a href="#4-html定义视图" class="headerlink" title=" 4.html定义视图"></a> 4.html定义视图</h2><p>现在要把我们写好的html视图页面在页面中展示出来，我们来看看index.html里面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;body data-ng-app=&quot;myApp&quot;&gt;</div><div class="line">&lt;!--ui-router的html代码--&gt;</div><div class="line">&lt;div data-ui-view=&quot;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;!--这里要引入上面说的文件--&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;html&gt;</div></pre></td></tr></table></figure></p>
<h4 id="在ui-view-””的双引号里面，ui-view展示的页面是根据app-js设置的url对应的html来展示的。"><a href="#在ui-view-””的双引号里面，ui-view展示的页面是根据app-js设置的url对应的html来展示的。" class="headerlink" title="在ui-view=””的双引号里面，ui-view展示的页面是根据app.js设置的url对应的html来展示的。"></a>在ui-view=””的双引号里面，ui-view展示的页面是根据app.js设置的url对应的html来展示的。</h4><h3 id="嵌套页面跳转："><a href="#嵌套页面跳转：" class="headerlink" title="嵌套页面跳转："></a>嵌套页面跳转：</h3><ol>
<li><p>导航里面的名字必须是“<strong>父页面的名字.子页面的名字</strong>”<br>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.state(&quot;PageTab&quot;, &#123;//这里是名字</div><div class="line">          url: &quot;/PageTab&quot;,</div><div class="line">          templateUrl: &quot;PageTab.html&quot;</div><div class="line">      &#125;)</div><div class="line">      .state(&quot;PageTab.Page1&quot;, &#123;//意思是PageTab视图下面的Page1视图</div><div class="line">          url:&quot;/Page1&quot;,</div><div class="line">          templateUrl: &quot;Page-1.html&quot;</div><div class="line">      &#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>在html里面，用<strong>ui-sref</strong>进行跳转<br> demo代码栗子：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">       &lt;h1&gt;下面这几个按钮是在主页面下面再嵌套一层的页面&lt;/h1&gt;</div><div class="line">       &lt;!--ui-sref跳转--&gt;</div><div class="line">       &lt;span style=&quot;width:100px&quot; ui-sref=&quot;.Page1&quot;&gt;&lt;a href=&quot;&quot;&gt;Page-1&lt;/a&gt;&lt;/span&gt;</div><div class="line">       &lt;span style=&quot;width:100px&quot; ui-sref=&quot;.Page2&quot;&gt;&lt;a href=&quot;&quot;&gt;Page-2&lt;/a&gt;&lt;/span&gt;</div><div class="line">       &lt;span style=&quot;width:100px&quot; ui-sref=&quot;.Page3&quot;&gt;&lt;a href=&quot;&quot;&gt;Page-3&lt;/a&gt;&lt;/span&gt;</div><div class="line">   &lt;/div&gt;</div><div class="line">   &lt;div&gt;</div><div class="line">       &lt;!--PageTap嵌套的视图html展示的地方--&gt;</div><div class="line">       &lt;div ui-view=&quot;&quot;/&gt;</div><div class="line">   &lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果觉得不太明白可以点击下面的代码地址，将代码复制到本地，自己多试一试，应该就明白了：<br><a href="https://obkoro1.github.io/article-demo/2017/uiRouter/index.html#/PageTab/Page3" target="_blank" rel="external">demo地址</a>、<a href="https://github.com/OBKoro1/article-demo/tree/master/2017/uiRouter" target="_blank" rel="external">demo代码地址</a></p>
<hr>
<h2 id="写在后面："><a href="#写在后面：" class="headerlink" title="写在后面："></a>写在后面：</h2><p>现在只是一个最简单的使用方式，本来想在写一些深一点的使用方式（内容：路由的其他参数、路由懒加载引用文件、路由视图页面传递参数），写了好久，结果发现还是需要demo结合起来写，比较清楚，等我写好了在下面加个链接。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong>ps</strong>：目前<strong>待业</strong>，<strong>城市：杭州/北京（纠结中）</strong>，本人适应互联网快节奏，高强度的工作状态，认真，严谨，学习积极性强。<strong>中小公司大佬求带走</strong>，邮箱：obkoro1@foxmail.com。<br><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="http://www.runoob.com/angularjs/angularjs-routing.html" target="_blank" rel="external">AngularJS 路由,菜鸟教程</a><br><a href="http://blog.csdn.net/zcl_love_wx/article/details/52034193" target="_blank" rel="external">深究AngularJS——ui-router详解</a>\<br><a href="http://www.oschina.net/translate/angularjs-ui-router-nested-routes" target="_blank" rel="external">AngularJS ui-router (嵌套路由)</a></p>
]]></content>
      
        <categories>
            
            <category> angular </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angular ui-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小白来实现一个Ajax请求[Ajax使用方法及相关知识点详细解析——超级全]]]></title>
      <url>/2017/10/11/%E5%B0%8F%E7%99%BD%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAAjax%E8%AF%B7%E6%B1%82-Ajax%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94%E8%B6%85%E7%BA%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>本文主要总结整理Ajax使用方法背景知识点的详细解析，以及Ajax跨域的具体使用方式并且对栗子进行了讲解，需要的朋友可以过来参考下，喜欢的可以点波赞，或者关注一下本人，希望通过本文能够作为一个Ajax的查找资料，不懂Ajax？看这篇文章就可以了。</p>
<h2 id="ajax简介："><a href="#ajax简介：" class="headerlink" title="ajax简介："></a>ajax简介：</h2><ul>
<li>Ajax 的全称是Asynchronous JavaScript and XML，意思是：异步 JavaScript 和 XML</li>
<li>Ajax是使用XMLHttpRequest对象与服务器端通信的脚本语言</li>
<li>可以发送及接收各种格式的信息，包括JSON、XML、HTML和文本文件。</li>
<li>AJAX可以无需刷新页面而与服务器端进行通信。</li>
<li>允许你根据用户事件来更新部分页面内容。</li>
</ul>
<h2 id="Ajax工作原理："><a href="#Ajax工作原理：" class="headerlink" title="Ajax工作原理："></a>Ajax工作原理：</h2><p>Ajax的工作原理相当于<strong>在用户和服务器之间加了一个中间层(Ajax引擎),使用户操作与服务器响应异步化</strong>。并不是所有的用户请求都提交给服务器,像—些数据验证(比如判断用户是否输入了数据)和数据处理(比如判断用户输入数据是否是数字)等都交给Ajax引擎自己来做, 只有确定<strong>需要从服务器读取新数据时再由Ajax引擎代为向服务器提交请求</strong>。把这些交给了Ajax引擎，用户操作起来也就感觉更加流畅了。</p>
<h2 id="Ajax的优点："><a href="#Ajax的优点：" class="headerlink" title="Ajax的优点："></a>Ajax的优点：</h2><ol>
<li><p>页面无刷新，用户体验好。</p>
<ul>
<li>AJAX最大优点就是能在不刷新整个页面的前提下与服务器通信维护数据。这使得Web应用程序更为迅捷地响应用户交互，并避免了在网络上发送那些没有改变的信息，减少用户等待时间，带来非常好的用户体验。</li>
</ul>
</li>
<li><p>异步通信，更加快的响应能力。</p>
<ul>
<li>AJAX使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。优化了Browser和Server之间的沟通，减少不必要的数据传输、时间及降低网络上数据流量。</li>
</ul>
</li>
<li><p>减少冗余请求，减轻了服务器负担</p>
<ul>
<li>AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。  </li>
</ul>
</li>
<li><p>基于标准化的并被广泛支持的技术，不需要下载插件或者小程序</p>
<ul>
<li>AJAX基于标准化的并被广泛支持的技术，不需要下载浏览器插件或者小程序，但需要客户允许JavaScript在浏览器上执行。</li>
</ul>
</li>
<li>界面与应用分离。 <ul>
<li>Ajax使WEB中的界面与应用分离（也可以说是数据与呈现分离），有利于分工合作、减少非技术人员对页面的修改造成的WEB应用程序错误、提高效率、也更加适用于现在的发布系统。</li>
</ul>
</li>
</ol>
<h2 id="Ajax应用场景："><a href="#Ajax应用场景：" class="headerlink" title="Ajax应用场景："></a>Ajax应用场景：</h2><ul>
<li>数据验证。用户的注册，登录功能，通过与后台交互数据，进行数据验证</li>
<li>按需取数据。按照需求，展示所需要的部分数据，而不是一股脑的将整个网页全都展示出来。</li>
<li>自动更新页面。栗子：百度搜索的提示,出现联想提示语，展示用户最有可能搜索的词汇。</li>
<li>自动更新页面。栗子：在线聊天室，设置一个定时器，每隔几秒向请求数据，实时更新页面信息。</li>
</ul>
<h3 id="同步执行和异步执行。"><a href="#同步执行和异步执行。" class="headerlink" title="同步执行和异步执行。"></a>同步执行和异步执行。</h3><p>javascript同步表示sync，指的就是：代码依次执行。javascript 异步表示async，指：代码执行不按顺序，可以这么理解：同步是在一条直线上的队列，异步不在一个队列上 各走各的。javascript所谓的“线程”，就是这样的一种概念。</p>
<p>虽然异步执行可以<strong>实现多任务并行执行</strong>，使执行的效率大大提高，但是异步执行也会<strong>占用浏览器的性能</strong>，不要胡乱的使用异步执行。</p>
<p>举个栗子：在负荷很重的客户/服务器系 统中，时间延迟频繁且漫长，在这种环境下就比较适宜宜采用异步执行模式。</p>
<p>关于同步和异步，大概只能说这些，有兴趣的朋友可以自己深入了解一下。</p>
<hr>
<h1 id="开始一个Ajax请求需要了解的背景知识："><a href="#开始一个Ajax请求需要了解的背景知识：" class="headerlink" title="开始一个Ajax请求需要了解的背景知识："></a>开始一个Ajax请求需要了解的背景知识：</h1><h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象:"></a>XMLHttpRequest对象:</h2><p><strong>Ajax的核心是XMLHttpRequest对象</strong>，它是Ajax实现的关键，发送异步请求、接受响应以及执行回调都是通过它来完成，下面我们就来聊一聊XMLHttpRequest对象是什么鬼？拥有哪些属性、方法，这些都是用来干什么的，这对于我们系统性的了解Ajax请求是非常有帮助的。</p>
<h2 id="XMLHttpRequest对象的属性："><a href="#XMLHttpRequest对象的属性：" class="headerlink" title="XMLHttpRequest对象的属性："></a>XMLHttpRequest对象的属性：</h2><p><img src="https://dn-mhke0kuv.qbox.me/3210e9b464b7a2e6ae3b" alt="XMLHttpRequest对象的属性"></p>
<h2 id="XMLHttpRequest对象的方法："><a href="#XMLHttpRequest对象的方法：" class="headerlink" title="XMLHttpRequest对象的方法："></a>XMLHttpRequest对象的方法：</h2><p><img src="https://dn-mhke0kuv.qbox.me/5e62e2775f857c5ee426" alt="XMLHttpRequest对象的方法"></p>
<p><a href="https://juejin.im/entry/583a9e02ac502e006c214b81" target="_blank" rel="external">图片出处</a></p>
<p>XMLHttpRequest虽然目前还没有被W3C所采纳，但是它已经是一个事实的标准，因为所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均支持 XMLHttpRequest 对象。，XMLHttpRequest对象的使用方式极其简单，先不要懵逼。继续往下看。</p>
<h2 id="Ajax的跨域请求由哪些部分组成的"><a href="#Ajax的跨域请求由哪些部分组成的" class="headerlink" title="Ajax的跨域请求由哪些部分组成的"></a>Ajax的跨域请求由哪些部分组成的</h2><ul>
<li><strong>HTTP请求的方法或动作</strong>，Ajax请求方式 (“POST” 或 “GET”)， 默认为 “GET”。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</li>
<li>你<strong>需要请求的URL</strong>,总得告诉服务器请求的地址是什么吧?</li>
<li><strong>请求头</strong>,包含一些客户端环境信息,身份验证信息等</li>
<li><strong>请求体</strong>,也就是请求正文,请求正文中可以包含客户端提交的查询字符串信息,表单信息等等.</li>
</ul>
<h3 id="GET和POST两种请求方式对比："><a href="#GET和POST两种请求方式对比：" class="headerlink" title="GET和POST两种请求方式对比："></a>GET和POST两种请求方式对比：</h3><p><img src="https://dn-mhke0kuv.qbox.me/55cec81020363c5a0499" alt=""></p>
<p>在前后端分离的情况下，对于前端的小伙伴来说，一般是后端选择请求接口，请求方式，让我们去使用，所以请求方式的选择这点，稍微了解一下即可。</p>
<h2 id="Ajax的跨域请的回复：http响应："><a href="#Ajax的跨域请的回复：http响应：" class="headerlink" title="Ajax的跨域请的回复：http响应："></a>Ajax的跨域请的回复：http响应：</h2><ul>
<li>一个数字和文字组成的状态码,用来显示请求是成功还是失败</li>
<li>响应头,响应头和请求头一样包含许多有用的信息,例如服务器类型,日期时间,内容类型和长度等.</li>
<li>响应体,也就是响应正文.</li>
</ul>
<h3 id="服务器端返回的：常见的HTTP状态码"><a href="#服务器端返回的：常见的HTTP状态码" class="headerlink" title="服务器端返回的：常见的HTTP状态码"></a>服务器端返回的：常见的HTTP状态码</h3><p><img src="https://dn-mhke0kuv.qbox.me/90fcc69d12c28cba1338" alt=""></p>
<p>关于http的状态码还有非常多，不止上图这点这么简单，有兴趣的可以看本人之前写的一篇文章：<a href="https://juejin.im/post/590082e6a22b9d0065be1a5c" target="_blank" rel="external">http状态码详解</a>。</p>
<hr>
<h1 id="如何使用Ajax"><a href="#如何使用Ajax" class="headerlink" title="如何使用Ajax"></a>如何使用Ajax</h1><h3 id="本文中的栗子采用菜鸟教程ajax的栗子：ajax实例"><a href="#本文中的栗子采用菜鸟教程ajax的栗子：ajax实例" class="headerlink" title="本文中的栗子采用菜鸟教程ajax的栗子：ajax实例"></a>本文中的栗子采用菜鸟教程ajax的栗子：<a href="http://www.runoob.com/ajax/ajax-xmlhttprequest-send.html" target="_blank" rel="external">ajax实例</a></h3><h2 id="实现Ajax的四个步骤："><a href="#实现Ajax的四个步骤：" class="headerlink" title="实现Ajax的四个步骤："></a>实现Ajax的四个步骤：</h2><ol>
<li>新建一个XMLHttpRequest对象。</li>
<li>open方法表示初始化请求，此时并没有发送。</li>
<li>定义数据返回后的回调函数，里面的代码在readystatechange值改变的时候执行。</li>
<li>发送请求。</li>
</ol>
<h3 id="使用Ajax的一个栗子，里面注释的也较为详细："><a href="#使用Ajax的一个栗子，里面注释的也较为详细：" class="headerlink" title="使用Ajax的一个栗子，里面注释的也较为详细："></a>使用Ajax的一个栗子，里面注释的也较为详细：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function loadXMLDoc()</div><div class="line">&#123;//点击事件</div><div class="line">  var xmlhttp;</div><div class="line">  if (window.XMLHttpRequest)</div><div class="line">  &#123;</div><div class="line">    // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</div><div class="line">    xmlhttp=new XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line">  else</div><div class="line">  &#123;</div><div class="line">    // IE6, IE5 浏览器执行代码</div><div class="line">    xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class="line">  &#125;</div><div class="line"> //1、上面是创建XMLHttpRequest对象</div><div class="line">  xmlhttp.open(&quot;POST&quot;,&quot;/try/Ajax/demo_post2.php&quot;,true);// 2、open方法表示初始化请求，此时并没有发送。</div><div class="line">  xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">  xmlhttp.send(&quot;fname=Henry&amp;lname=Ford&quot;);//4、发送请求</div><div class="line">  xmlhttp.onreadystatechange=function();</div><div class="line">  &#123;//3、当参数被传入服务器的时候，引用监听事件。</div><div class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</div><div class="line">    //判断readyState四种状态，当执行四步完成之后，并且返回的是200（成功）</div><div class="line">    &#123;</div><div class="line">      document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1、新建一个XMLHttpRequest对象："><a href="#1、新建一个XMLHttpRequest对象：" class="headerlink" title="1、新建一个XMLHttpRequest对象："></a>1、新建一个XMLHttpRequest对象：</h3><p>XMLHttpRequest对象在上文介绍了他的属性和方法，如上所述， Ajax的核心是XMLHttpRequest对象，这一步是必不可少的，下面就是它的使用语法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var xmlhttp = new XMLHttpRequest();//没看错，就是这么简单</div></pre></td></tr></table></figure>
<h3 id="Ajax兼容IE7以下："><a href="#Ajax兼容IE7以下：" class="headerlink" title="Ajax兼容IE7以下："></a>Ajax兼容IE7以下：</h3><p>XMLHttpRequest对象是IE7才开始支持的，老版本IE5和IE6使用的是ActiveX 对象，使用方式是一样的，区别在于要创建不同的对象。<strong>IE7以上自带XMLHttpRequest对象，如果要兼容IE5和IE6只需判断浏览器中是否存在XMLHttpRequest对象。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var xmlhttp;</div><div class="line">  if (window.XMLHttpRequest)//检查是否有XMLHttpRequest对象</div><div class="line">  &#123;</div><div class="line">    // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</div><div class="line">    xmlhttp=new XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line">  else</div><div class="line">  &#123;</div><div class="line">    // IE6, IE5 浏览器执行代码</div><div class="line">    xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="2、open方法表示初始化请求，此时并没有发送。"><a href="#2、open方法表示初始化请求，此时并没有发送。" class="headerlink" title="2、open方法表示初始化请求，此时并没有发送。"></a>2、open方法表示初始化请求，此时并没有发送。</h3><p>open方法的语法<code>open(method,url,async)</code></p>
<ol>
<li>参数一：method——请求方式，get或者post。（默认为get）</li>
<li>参数二：url——请求路径,文件在服务器上的位置</li>
<li>参数三：async——true：异步请求。false:同步请求。（默认为true，异步请求。）</li>
</ol>
<h3 id="3-定义数据返回后的回调函数，里面的代码在readystatechange值改变的时候执行。"><a href="#3-定义数据返回后的回调函数，里面的代码在readystatechange值改变的时候执行。" class="headerlink" title="3.定义数据返回后的回调函数，里面的代码在readystatechange值改变的时候执行。"></a>3.定义数据返回后的回调函数，里面的代码在readystatechange值改变的时候执行。</h3><p>触发Ajax的时候，XMLHttpRequest 的状态会不断变化，这个值就存在readyState属性中。</p>
<h4 id="readyState属性："><a href="#readyState属性：" class="headerlink" title="readyState属性："></a>readyState属性：</h4><p>readyState只有5个值{0，1，2，3，4}，只读不能写。</p>
<p>0: XMLHttpRequest对象创建完成。————还没有调用open()方法</p>
<p>1: XMLHttpRequest对象初始化完成。————open() 方法已调用，但是 send()方法未调用。请求还没有被发送。</p>
<p>2: 请求已经发送。———Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应。</p>
<p>3: 服务器已经返回了数据（但是还没有被解析，可能只一段http报文）。————正在解析响应内容</p>
<p>4: 数据解析已经完成。————响应内容解析完成,可以在客户端调用了</p>
<p>数据解析完成之后会返回一个http的状态码，通过XMLHttpRequest.status获得该值，判断是否为200，<strong>判断是否请求成功</strong>。</p>
<h4 id="onreadystatechange事件："><a href="#onreadystatechange事件：" class="headerlink" title="onreadystatechange事件："></a>onreadystatechange事件：</h4><p>每当readyState属性值改变时，就会触发 onreadystatechange 事件。——通过监听onreadystatechange事件,来判断请求的状态。</p>
<h3 id="4、发送请求"><a href="#4、发送请求" class="headerlink" title="4、发送请求"></a>4、发送请求</h3><ol>
<li>send（）方法必须在open（）之后。</li>
<li><ul>
<li>在使用GET方式请求时无需填写参数</li>
<li>在使用POST方式时需要使用setRequestHeader()来添加http头，然后在 send() 方法中规定您希望发送的数据</li>
</ul>
</li>
</ol>
<p>get:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;GET&quot;,&quot;/try/ajax/ajax_info.txt&quot;,true);</div><div class="line">	xmlhttp.send();</div></pre></td></tr></table></figure></p>
<p>post：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;POST&quot;,&quot;/try/ajax/demo_post2.php&quot;,true);</div><div class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">xmlhttp.send(&quot;fname=Henry&amp;lname=Ford&quot;);</div></pre></td></tr></table></figure></p>
<p>菜鸟教程的栗子：<a href="http://www.runoob.com/try/try.php?filename=tryajax_first" target="_blank" rel="external">get方式</a>、<a href="http://www.runoob.com/try/try.php?filename=tryajax_post2" target="_blank" rel="external">post方式</a></p>
<h3 id="写在后面："><a href="#写在后面：" class="headerlink" title="写在后面："></a>写在后面：</h3><p>想到当初自己不会Ajax的时候，畏Ajax如洪水猛兽，希望小伙伴们，看了本文就能写出自己的第一个Ajax来，这也是我想写这篇文章的意义所在。十多天没写文了，这篇文章也准备了好几天，写的不好之后，欢迎指正，谢谢。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！本人写文章本着交流记录的心态，写的不好之处，不撕逼，但是欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong><a href="http://obkoro1.com/" target="_blank" rel="external">个人blog</a></strong> and <strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a></strong>  </p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p> <a href="http://www.jianshu.com/p/4905270afb71#" target="_blank" rel="external">Ajax与数据传输</a></p>
<p> <a href="http://blog.guowenfh.com/2015/12/18/Ajax-elementary-course-1/" target="_blank" rel="external">Ajax入门（一）从0开始到一次成功的GET请求</a></p>
<p> <a href="https://juejin.im/entry/583a9e02ac502e006c214b81" target="_blank" rel="external">Ajax 总结篇</a></p>
<p> <a href="http://www.runoob.com/ajax/ajax-tutorial.html" target="_blank" rel="external">菜鸟教程——AJAX 教程</a></p>
<p>以上。2017.6.1</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小白实现ajax请求 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js定时器用法详解——setTimeout()、setInterval()、clearTimeout()、clearInterval()]]></title>
      <url>/2017/10/11/js%E5%AE%9A%E6%97%B6%E5%99%A8%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3%E2%80%94%E2%80%94setTimeout-%E3%80%81setInterval-%E3%80%81clearTimeout-%E3%80%81clearInterval/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>在js应用中，定时器的作用就是可以设定当到达一个时间来执行一个函数，或者每隔几秒重复执行某段函数。这里面涉及到了三个函数方法：setInterval()、setTimeout()、clearInterval()，本文将围绕这三种函数的用法，来实现定时器的功能，需要的朋友可以过来参考下，喜欢的可以点波赞，或者关注一下本人，希望对大家有所帮助。</p>
<h2 id="定时器的应用需求："><a href="#定时器的应用需求：" class="headerlink" title="定时器的应用需求："></a>定时器的应用需求：</h2><p>1.设定一个时间，当时间到达的时候执行函数————比如：倒计时跳转页面等等。</p>
<p>2.每隔一段时间重复执行某段函数————比如抢票软件，比如设定500毫秒就重复刷新一次页面等等。</p>
<h3 id="倒计时跳转实现demo："><a href="#倒计时跳转实现demo：" class="headerlink" title="倒计时跳转实现demo："></a>倒计时跳转实现demo：</h3><p><img src="https://dn-mhke0kuv.qbox.me/c80c87f943e1ca56de5f.gif" alt="里面也有实时显示时间的方法。"></p>
<h3 id="js定时器："><a href="#js定时器：" class="headerlink" title="js定时器："></a>js定时器：</h3><p>菜鸟教程中是这么说的——js 定时器有以下两个方法：</p>
<p><strong>setTimeout() ：</strong>在指定的毫秒数后调用函数或计算表达式。</p>
<p><strong>setInterval() ：</strong>按照指定的周期（以毫秒计）来调用函数或计算表达式。方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。</p>
<h3 id="使用语法："><a href="#使用语法：" class="headerlink" title="使用语法："></a>使用语法：</h3><p>setTimeout（）：setTimeout(code,millisec)</p>
<p>setInterval（）：setInterval(code,millisec[,”lang”])</p>
<p><strong>参数：</strong>code————要进行<strong>调用的函数或者要执行的代码串</strong>。millisec————<strong>时间</strong>（默认毫秒来计算），lang————可选。 JScript | VBScript | JavaScript（）</p>
<p>以上来自W3C：<a href="http://www.w3school.com.cn/jsref/met_win_settimeout.asp" target="_blank" rel="external">setTimeout() </a>,<a href="http://www.jb51.net/shouce/htmldom/jb51.net.htmldom/htmldom/met_win_setinterval.asp.html" target="_blank" rel="external">setInterval()</a></p>
<h2 id="然而setTimeout-、setInterval-的区别在于"><a href="#然而setTimeout-、setInterval-的区别在于" class="headerlink" title="然而setTimeout()、setInterval()的区别在于"></a>然而setTimeout()、setInterval()的区别在于</h2><p><strong>setTimeout()</strong>：当方法执行完成定时器就立即停止(但是定时器还在,只不过没用了);</p>
<p><strong>setInterval()：</strong>当方法执行完成,定时器并没有停止,以后每隔[interval]这么长的时间都会重新的执行对应的方法[function],直到我们手动清除定时器为止;</p>
<h3 id="意思就是："><a href="#意思就是：" class="headerlink" title="意思就是："></a>意思就是：</h3><p><strong>setTimeout()时间到了只会执行一次，setInterval()不会停止，会不间断的执行对应的函数</strong>，直到我们手动暂停或窗口被关闭。</p>
<p><strong>文章下面有demo讲解：</strong></p>
<hr>
<h2 id="那么如何暂停setTimeout-、setInterval"><a href="#那么如何暂停setTimeout-、setInterval" class="headerlink" title=" 那么如何暂停setTimeout()、setInterval():"></a> 那么如何暂停setTimeout()、setInterval():</h2><h3 id="clearTimeout（）取消由setTimeout-方法设置的-timeout。"><a href="#clearTimeout（）取消由setTimeout-方法设置的-timeout。" class="headerlink" title="clearTimeout（）取消由setTimeout() 方法设置的 timeout。"></a>clearTimeout（）取消由setTimeout() 方法设置的 timeout。</h3><p><img src="https://dn-mhke0kuv.qbox.me/a8470e43082a064424f8" alt=""></p>
<h3 id="clearInterval-，这个函数只有一个作用，就是暂停setInterval-调用函数。"><a href="#clearInterval-，这个函数只有一个作用，就是暂停setInterval-调用函数。" class="headerlink" title="clearInterval() ，这个函数只有一个作用，就是暂停setInterval()调用函数。"></a>clearInterval() ，这个函数只有一个作用，就是暂停setInterval()调用函数。</h3><p><img src="https://dn-mhke0kuv.qbox.me/0474fc212be6107c7c4b" alt=""></p>
<h3 id="参数id-of-settimeout的意思是："><a href="#参数id-of-settimeout的意思是：" class="headerlink" title="参数id_of_settimeout的意思是："></a>参数id_of_settimeout的意思是：</h3><p>clearTimeout是：使用clearTimeout()的函数名字，或者clearTimeout()调用的函数的名字。</p>
<p>setInterval是：使用setInterval()的函数名字，或者setInterval()调用的函数的名字。</p>
<p><strong>提示：</strong>setTimeout、setInterval在设置定时器的时候有区别，然而他们在清除定时器的时候没有区别。</p>
<p>W3C资料:<a href="http://www.w3school.com.cn/jsref/met_win_cleartimeout.asp" target="_blank" rel="external">clearTimeout()</a>，<a href="http://www.w3school.com.cn/jsref/met_win_clearinterval.asp" target="_blank" rel="external">clearInterval()</a></p>
<hr>
<h3 id="倒计时跳转demo讲解："><a href="#倒计时跳转demo讲解：" class="headerlink" title="倒计时跳转demo讲解："></a>倒计时跳转demo讲解：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//html相关部分：</div><div class="line">    &lt;div class=&quot;time&quot;&gt;请等待&lt;span id=&quot;dd&quot;&gt;5&lt;/span&gt;秒&lt;/div&gt;</div><div class="line">    //这里的5是初始5秒跳转。</div><div class="line">//js部分：</div><div class="line">function run()&#123;</div><div class="line">            var s = document.getElementById(&quot;dd&quot;);//获取dd的dom</div><div class="line">            if(s.innerHTML == 0)&#123;// 当dd==0的时候，跳转链接并且暂停函数</div><div class="line">                window.location.href = &quot;https://juejin.im/user/58714f0eb123db4a2eb95372/article&quot;;</div><div class="line">                clearInterval(run());//取消由 setInterval() 设置的 timeout，，这里数字暂停在0这里，否则时间会继续往下减会出现负数。</div><div class="line">                //setInterval调用了run()，所以setInterval的返回ID值是run（）</div><div class="line">            &#125;</div><div class="line">            s.innerHTML = s.innerHTML -1;//从5秒开始，隔一秒跑一次run()然后减1</div><div class="line">        &#125;</div><div class="line">        window.setInterval(&quot;run();&quot;, 1000); //这段代码的效果是一秒调用一次run()，</div><div class="line">        //“run()”是要执行的代码块，1000是时间，默认单位是毫秒</div></pre></td></tr></table></figure>
<p>上面这段代码主要是一个倒计时的效果，setInterval每隔一秒调用一次代码块run()，当时间被减到0的时候，暂停继续调用run()，否则会出现-1、-2的情况，然后跳转链接。<strong>具体的不懂的可以看代码注释，写的很详细。</strong></p>
<p>如果还不知道的话，可以自己做个demo试试效果就知道了。</p>
<h3 id="demo链接："><a href="#demo链接：" class="headerlink" title="demo链接："></a>demo链接：</h3><p><strong><a href="https://obkoro1.github.io/article-demo/js-time/time-countDown.html" target="_blank" rel="external">倒计时跳转</a></strong></p>
<h3 id="菜鸟教程也有一个demo："><a href="#菜鸟教程也有一个demo：" class="headerlink" title="菜鸟教程也有一个demo："></a>菜鸟教程也有一个demo：</h3><p><img src="https://dn-mhke0kuv.qbox.me/73b6c1d56121335f3a97.gif" alt=""></p>
<p>这也是一篇文章，写的听不错的，推荐一波！</p>
<p>链接地址：<a href="http://www.runoob.com/w3cnote/js-timer.html" target="_blank" rel="external">js 定时器</a></p>
<hr>
<h2 id="写在后面："><a href="#写在后面：" class="headerlink" title="写在后面："></a>写在后面：</h2><p>就十天没写文了，写的时候就感觉有点不知道怎么入手了，纠结了半天。我觉得应该把定时器的用法介绍清楚了，如果有什么地方写的不好的，欢迎指正，会在文章内勘误的。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，本人适应互联网快节奏，高强度，持续学习，持续成长，认真，严谨，学习积极性强。<strong>中小公司大佬求带走</strong>，邮箱：obkoro1@foxmail.com。<br><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="http://www.runoob.com/w3cnote/js-timer.html" target="_blank" rel="external">js 定时器</a><br><a href="http://www.cnblogs.com/wangying731/p/5164780.html" target="_blank" rel="external">关于js中两种定时器的设置及清除</a><br><a href="http://www.w3school.com.cn/jsref/met_win_settimeout.asp" target="_blank" rel="external">w3c：setTimeout()</a>,<br><a href="http://www.jb51.net/shouce/htmldom/jb51.net.htmldom/htmldom/met_win_setinterval.asp.html" target="_blank" rel="external">w3c：setInterval()</a>，<br><a href="http://www.w3school.com.cn/jsref/met_win_cleartimeout.asp" target="_blank" rel="external">w3c：clearTimeout()</a>，<br><a href="http://www.w3school.com.cn/jsref/met_win_clearinterval.asp" target="_blank" rel="external">w3c：clearInterval()</a>。</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js定时器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[随机数详解]生成一个随机数，生成指定范围的随机数及随机数组去重]]></title>
      <url>/2017/10/11/%E9%9A%8F%E6%9C%BA%E6%95%B0%E8%AF%A6%E8%A7%A3-%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%8C%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%8F%8A%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>很早之前在简书写过几篇关于随机数的文章之前写的很乱，现在重新整理一下这些知识点。本文包含了如下这些知识点：js生成随机数，生成指定范围的随机数，获得不重复随机数组。</p>
<h2 id="js生成随机数。"><a href="#js生成随机数。" class="headerlink" title="js生成随机数。"></a>js生成随机数。</h2><h3 id="Math-random-——生成大于等于0-0且小于1-0的一个随机数"><a href="#Math-random-——生成大于等于0-0且小于1-0的一个随机数" class="headerlink" title="Math.random()——生成大于等于0.0且小于1.0的一个随机数;"></a>Math.random()——生成大于等于0.0且小于1.0的一个随机数;</h3><p>通常我们生成随机数都是使用这个方法，这个方法返回值是一个伪随机选择的数，<strong>该值大于等于0.0且小于1.0</strong>，即取值范围是[0.0,1.0)的左闭右开区间，在该范围内（近似）<strong>均匀分布</strong>。</p>
<p>下面有张动态图栗子，可以看一下。</p>
<h3 id="Math-floor-Math-random-20-——取0-20之间的随机整数："><a href="#Math-floor-Math-random-20-——取0-20之间的随机整数：" class="headerlink" title="Math.floor(Math.random()*20)——取0~20之间的随机整数："></a>Math.floor(Math.random()*20)——取0~20之间的随机整数：</h3><p>Math.floor(x)——使后面括号内的x（任意数值或表达式），生成一个<strong>小于等于 x，且与 x 最接近的整数</strong>。</p>
<p>Math.floor(x)，可以<strong>简单理解为下舍入</strong>。这里有几个栗子帮助理解，//后面是输出的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">document.write(Math.floor(0.60) + &quot;&lt;br /&gt;&quot;)//0</div><div class="line">document.write(Math.floor(0.40) + &quot;&lt;br /&gt;&quot;)//0</div><div class="line">document.write(Math.floor(5) + &quot;&lt;br /&gt;&quot;)//5</div><div class="line">document.write(Math.floor(5.1) + &quot;&lt;br /&gt;&quot;)//5</div><div class="line">document.write(Math.floor(-5.1) + &quot;&lt;br /&gt;&quot;)//-6</div><div class="line">document.write(Math.floor(-5.9))//-6</div></pre></td></tr></table></figure></p>
<h4 id="解析上面Math-floor-Math-random-20-的栗子："><a href="#解析上面Math-floor-Math-random-20-的栗子：" class="headerlink" title="解析上面Math.floor(Math.random()*20)的栗子："></a>解析上面Math.floor(Math.random()*20)的栗子：</h4><p>1.通过Math.random()生成0-1之间的随机数<br>2.然后乘以20，就是取从0~20间的随机数，注意这里并不是整数。这里的<strong>范围可以改变</strong>，只要改后面那个数字为50,、8，就可以变成0~50,0~80之间的随机数。<br>3.Math.floor()，使括号里面的(Math.random()乘以20)这个表达式，<strong>下舍入</strong>，生成为一个整数。</p>
<h2 id="上面两个方法的demo动态图。"><a href="#上面两个方法的demo动态图。" class="headerlink" title="上面两个方法的demo动态图。"></a>上面两个方法的demo动态图。</h2><p><img src="https://dn-mhke0kuv.qbox.me/28f0d68a124f814fdc95.gif" alt=""></p>
<p>文末有<strong>demo链接</strong>，可以把代码复制回去，自己试试</p>
<h2 id="生成指定范围的随机数（从任意值到任意值）"><a href="#生成指定范围的随机数（从任意值到任意值）" class="headerlink" title="生成指定范围的随机数（从任意值到任意值）"></a>生成指定范围的随机数（从任意值到任意值）</h2><p>这里是从任意值开始，我们刚才取的随机数都是从0开始。但是有些场景可能需要我们取一个<strong>指定范围的随机数，比如20-30,80-120等等</strong>。</p>
<h3 id="这里有一个公式：Math-floor-Math-random-max-min-1-min"><a href="#这里有一个公式：Math-floor-Math-random-max-min-1-min" class="headerlink" title="这里有一个公式：Math.floor(Math.random()*(max-min+1)+min);"></a>这里有一个公式：Math.floor(Math.random()*(max-min+1)+min);</h3><p>ps： max - 范围内的最大值，min - 单位内的最小值</p>
<p>按照这个公式来，就没错了，下面是demo栗子。</p>
<h3 id="值得注意的是："><a href="#值得注意的是：" class="headerlink" title="值得注意的是："></a>值得注意的是：</h3><p>如果是<strong>负数范围的随机数</strong>，要<strong>进行符号转换</strong>的，比如–30（这里是说减去三十。），转换符号后变成+。不转换符号，会出现报错！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.floor(Math.random()*(-10--30+1)+-30)//错误</div><div class="line">Math.floor(Math.random()*(-10+30+1)-30);//正确。</div></pre></td></tr></table></figure>
<h3 id="生成指定范围的随机数的栗子："><a href="#生成指定范围的随机数的栗子：" class="headerlink" title="生成指定范围的随机数的栗子："></a>生成指定范围的随机数的栗子：</h3><p><img src="https://dn-mhke0kuv.qbox.me/0ce56e1004e532fa864d.gif" alt="生成指定范围的随机数的栗子"></p>
<h3 id="获得不重复的随机数组。"><a href="#获得不重复的随机数组。" class="headerlink" title="获得不重复的随机数组。"></a>获得不重复的随机数组。</h3><p>获得不重复随机数组的方法非常多，这里就介绍一种：<strong>使用indexOf()的方法来去重，然后通过push()方法来添加数组</strong>。</p>
<h3 id="push-方法的作用："><a href="#push-方法的作用：" class="headerlink" title="push() 方法的作用："></a>push() 方法的作用：</h3><p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>
<h3 id="indexOf-方法的定义及介绍："><a href="#indexOf-方法的定义及介绍：" class="headerlink" title="indexOf()方法的定义及介绍："></a>indexOf()方法的定义及介绍：</h3><p><img src="https://dn-mhke0kuv.qbox.me/2c45c7ba19472ed64d1e" alt="来自W3C"></p>
<p>看完了还是一脸懵逼，到底跟随机数组去重有什么关系？？</p>
<p>这里有一句特别关键：</p>
<h4 id="注释：如果要检索的字符串值没有出现，则该方法返回-1。"><a href="#注释：如果要检索的字符串值没有出现，则该方法返回-1。" class="headerlink" title="注释：如果要检索的字符串值没有出现，则该方法返回 -1。"></a>注释：如果要检索的字符串值没有出现，则该方法返回 -1。</h4><p>依靠这句注释，<strong>通过if条件判断</strong>，我们就可以做出<strong>随机数组去重</strong>的功能。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//num是一个数组，randomNum是一个随机数值。</div><div class="line"> while (num.length&lt;3)&#123;//num.length代表数组的长度，当数组的长度不再满足小于3，跳出循环</div><div class="line">       var randomNum=Math.floor(Math.random()*9);//获得在0-9之间的随机数</div><div class="line">       if (num.indexOf(randomNum)&lt;0)&#123;</div><div class="line"> //判断randomNum之前有没有在数组里面，如果没有，就添加进去，如果有，重新循环。</div><div class="line">            num.push(randomNum);</div><div class="line">            // 将randomNum这个随机数，添加到num这个数组里面。</div><div class="line">         &#125;</div><div class="line">        console.log(num);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="代码思路："><a href="#代码思路：" class="headerlink" title="代码思路："></a>代码思路：</h3><p>1.先限定数组的长度，否则就成死循环了。<br>2.获得一个随机数<br>3.判断是否已经在数组里面，如果没有，就执行if下面的函数。<br>4.<strong>没有出现这个随机数，indexOf（）这个方法会返回-1</strong>，这是判断条件的依据。<br>5.当随机数达到三个了就跳出循环。此时num数组已经去重完毕。</p>
<h3 id="代码执行演示："><a href="#代码执行演示：" class="headerlink" title="代码执行演示："></a>代码执行演示：</h3><p>以下是演示的一个栗子，当<strong>数组里面已经有6了，再随机到6的时候，就会跳过push，直到随机到不重复的</strong>。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/588f5a1dc540001c7ca1.gif" alt=""></p>
<h3 id="ps：indexOf（）这个方法去重效率到后期偏低，仅适用于数据量比较小的时候，因为后期数据量大的话，数组中每一个都进行依次比较的话，时间方面会花很长时间。"><a href="#ps：indexOf（）这个方法去重效率到后期偏低，仅适用于数据量比较小的时候，因为后期数据量大的话，数组中每一个都进行依次比较的话，时间方面会花很长时间。" class="headerlink" title="ps：indexOf（）这个方法去重效率到后期偏低，仅适用于数据量比较小的时候，因为后期数据量大的话，数组中每一个都进行依次比较的话，时间方面会花很长时间。"></a>ps：indexOf（）这个方法去重效率到后期偏低，仅适用于数据量比较小的时候，因为后期数据量大的话，数组中每一个都进行依次比较的话，时间方面会花很长时间。</h3><h3 id="文中出现栗子的：demo链接"><a href="#文中出现栗子的：demo链接" class="headerlink" title="文中出现栗子的：demo链接"></a>文中出现栗子的：<a href="https://obkoro1.github.io/article-demo/2017/js-random/randomDemo.html" target="_blank" rel="external">demo链接</a></h3><p>以上就是本文介绍的一些随机数的知识点。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，本人适应互联网快节奏，高强度，持续学习，持续成长，认真，严谨，学习积极性强。<strong>中小公司大佬求带走</strong>，邮箱：1677593011@qq.com。<br><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<p>2017.5.9</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js随机数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用原生 JS 实现双向绑定及应用实例]]></title>
      <url>/2017/10/11/%E7%94%A8%E5%8E%9F%E7%94%9F-JS-%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8F%8A%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>所谓的双向绑定，无非是从<strong>界面的操作能实时反映到数据，数据的变更也能实时展现到界面</strong>。angular封装了双向绑定的方法，使双向绑定变得十分简单。但是在有些场景下（比如下面那个场景），不能使用angular来实现双向绑定，需要我们使用js来实现双向绑定。</p>
<h2 id="需求场景："><a href="#需求场景：" class="headerlink" title="需求场景："></a>需求场景：</h2><p>写了一个点击事件，当点击的时候在后台赋值了，但是在页面视图上面没有显示出来，想到要使用双向绑定来实现这个功能。因为代码之前是用js和jq写的，引入angular的话，会导致之前的代码不能用。在网上参考了一篇文章之后做出来了这个功能</p>
<p>ps零碎知识点：楼主踩过坑了，<strong>引用angular写的话，不能再使用JQ写代码</strong>，楼主上次代码都删的差不多了，还不能使用，最后才发现是angular和JQ冲突了，所以最好不要混着使用。</p>
<h2 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a>实现效果：</h2><p><img src="https://dn-mhke0kuv.qbox.me/32d23e28a9dfdc1696a2.gif" alt=""></p>
<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>点击按钮的时候，<strong>在后台赋值，然后直接在页面中显示出来，在方框里面输入值，也可以实时反映到数据</strong>。</p>
<p>ps：<strong>文末有demo链接</strong>，可以直接复制到本地试一试</p>
<h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><p>比如实现一个在后台赋值，然后界面出现一个随机的选项，谁是卧底、狼人杀这类型的。</p>
<hr>
<h3 id="实现原生js过程中的三个步骤："><a href="#实现原生js过程中的三个步骤：" class="headerlink" title="实现原生js过程中的三个步骤："></a>实现原生js过程中的三个步骤：</h3><p>1.需要一个U<strong>I元素和属性相互绑定</strong>的方法（核心）</p>
<p>2.监视属性和UI元素的变化</p>
<p>3.需要让所有绑定的对象和元素都能感知到变化</p>
<h3 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h3><p>我们使用数据特性来为HTML代码进行绑定，所有被绑定在一起的JavaScript对象和DOM元素都会订阅一个PubSub对象。只要JavaScript对象或者一个HTML输入元素监听到数据的变化时，就会触发绑定到PubSub对象上的事件，从而其他绑定的对象和元素都会做出相应的变化。</p>
<h2 id="代码实现部分："><a href="#代码实现部分：" class="headerlink" title="代码实现部分："></a>代码实现部分：</h2><h3 id="html代码部分："><a href="#html代码部分：" class="headerlink" title="html代码部分："></a>html代码部分：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;原生js双向绑定及其应用&lt;/h1&gt;</div><div class="line">&lt;div class=&quot;js-2-1section2 col-sm-10 col-xs-10&quot;&gt;</div><div class="line">    &lt;div&gt;&lt;input type=&quot;text&quot; data-bind-1=&quot;peopleName&quot;  id=&quot;text1&quot;/&gt;</div><div class="line">        &lt;!--data-bind-1=&quot;peopleName&quot; 原生js双向绑定的格式--&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;&lt;input  type=&quot;text&quot; data-bind-2=&quot;killName&quot; id=&quot;text2&quot; /&gt;</div><div class="line">        &lt;button class=&quot;btn btn-primary&quot; onclick=&quot;randomGroup()&quot;&gt;随机词组&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;p data-bind-1=&quot;peopleName&quot;&gt;&lt;/p&gt;</div><div class="line">    &lt;p data-bind-2=&quot;killName&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>上面代码中data-bind-1=”peopleName” 比较重要，其他一些乱七八糟，用来实现效果的，可以不用管。</p>
<h3 id="分析一下————data-bind-1-”peopleName”："><a href="#分析一下————data-bind-1-”peopleName”：" class="headerlink" title="分析一下————data-bind-1=”peopleName”："></a>分析一下————data-bind-1=”peopleName”：</h3><p>格式：data-bind-可以更改，只能是数字=”可以更改，相当于变量名”</p>
<p>ps：第一个地方只能更改数字，因为创建的是对象。这里的数字可以不按照顺序，我试了999都可以。</p>
<h3 id="js代码双向绑定部分"><a href="#js代码双向绑定部分" class="headerlink" title="js代码双向绑定部分"></a>js代码双向绑定部分</h3><p>js代码是封装好了的一个方法，可以按照前面几行的方式调用，代码里面有注释。</p>
<h4 id="实际上以下这段代码已经实现了双向绑定，下面还有一个应用实例，感兴趣的可以看看。文末有demo链接，可以直接复制到本地试一试。"><a href="#实际上以下这段代码已经实现了双向绑定，下面还有一个应用实例，感兴趣的可以看看。文末有demo链接，可以直接复制到本地试一试。" class="headerlink" title="实际上以下这段代码已经实现了双向绑定，下面还有一个应用实例，感兴趣的可以看看。文末有demo链接，可以直接复制到本地试一试。"></a>实际上以下这段代码已经实现了双向绑定，下面还有一个应用实例，感兴趣的可以看看。文末有demo链接，可以直接复制到本地试一试。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">var DBind1 = new DBind( 1 );</div><div class="line">   var DBind2 = new DBind( 2 );//前面是变量，括号里面的是html那里填的数字</div><div class="line">   DBind1.set( &quot;peopleName&quot;, &apos;第一个&apos; );</div><div class="line">   DBind2.set( &quot;killName&quot;, &apos;第二个&apos; );//第一个是刚才html格式那里的变量名，第二个方框是赋值</div><div class="line"></div><div class="line">   function DataBinder( object_id ) &#123;</div><div class="line">       // 创建一个简单的pubSub对象</div><div class="line">       var pubSub = &#123;</div><div class="line">                   callbacks: &#123;&#125;,</div><div class="line"></div><div class="line">                   on: function( msg, callback ) &#123;</div><div class="line">                       this.callbacks[ msg ] = this.callbacks[ msg ] || [];</div><div class="line">                       this.callbacks[ msg ].push( callback );</div><div class="line">                   &#125;,</div><div class="line">                   publish: function( msg ) &#123;</div><div class="line">                       this.callbacks[ msg ] = this.callbacks[ msg ] || [];</div><div class="line">                       for ( var i = 0, len = this.callbacks[ msg ].length; i &lt; len; i++ ) &#123;</div><div class="line">                           this.callbacks[ msg ][ i ].apply( this, arguments );</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;,</div><div class="line">               data_attr = &quot;data-bind-&quot; + object_id,</div><div class="line">               message = object_id + &quot;:input&quot;,</div><div class="line">               timeIn;</div><div class="line"></div><div class="line">       changeHandler = function( evt ) &#123;</div><div class="line">           var target = evt.target || evt.srcElement, //  IE8兼容</div><div class="line">                   prop_name = target.getAttribute( data_attr );</div><div class="line"></div><div class="line">           if ( prop_name &amp;&amp; prop_name !== &quot;&quot; ) &#123;</div><div class="line">               clearTimeout(timeIn);</div><div class="line">               timeIn = setTimeout(function()&#123;</div><div class="line">                   pubSub.publish( message, prop_name, target.value );</div><div class="line">               &#125;,50);</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line"></div><div class="line">       // 监听事件变化，并代理到pubSub</div><div class="line">       if ( document.addEventListener ) &#123;</div><div class="line">           document.addEventListener( &quot;input&quot;, changeHandler, false );</div><div class="line">       &#125; else &#123;</div><div class="line">           // IE8使用attachEvent而不是addEventListenter</div><div class="line">           document.attachEvent( &quot;oninput&quot;, changeHandler );</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       // pubSub将变化传播到所有绑定元素</div><div class="line">       pubSub.on( message, function( evt, prop_name, new_val ) &#123;</div><div class="line">           var elements = document.querySelectorAll(&quot;[&quot; + data_attr + &quot;=&quot; + prop_name + &quot;]&quot;),</div><div class="line">                   tag_name;</div><div class="line"></div><div class="line">           for ( var i = 0, len = elements.length; i &lt; len; i++ ) &#123;</div><div class="line">               tag_name = elements[ i ].tagName.toLowerCase();</div><div class="line"></div><div class="line">               if ( tag_name === &quot;input&quot; || tag_name === &quot;textarea&quot; || tag_name === &quot;select&quot; ) &#123;</div><div class="line">                   elements[ i ].value = new_val;</div><div class="line">               &#125; else &#123;</div><div class="line">                   elements[ i ].innerHTML = new_val;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       return pubSub;</div><div class="line">   &#125;</div><div class="line">   function DBind( uid ) &#123;</div><div class="line">       var binder = new DataBinder( uid ),</div><div class="line"></div><div class="line">               user = &#123;</div><div class="line">                   // 属性设置器使用数据绑定器pubSub来发布</div><div class="line">                   attributes: &#123;&#125;,</div><div class="line">                   set: function( attr_name, val ) &#123;</div><div class="line">                       this.attributes[ attr_name ] = val;</div><div class="line">                       // Use the `publish` method</div><div class="line">                       binder.publish( uid + &quot;:input&quot;, attr_name, val, this );</div><div class="line">                   &#125;,</div><div class="line">                   get: function( attr_name ) &#123;</div><div class="line">                       return this.attributes[ attr_name ];</div><div class="line">                   &#125;,</div><div class="line"></div><div class="line">                   _binder: binder</div><div class="line">               &#125;;</div><div class="line"></div><div class="line">       // Subscribe to the PubSub</div><div class="line">       binder.on( uid + &quot;:input&quot;, function( evt, attr_name, new_val, initiator ) &#123;</div><div class="line">           if ( initiator !== user ) &#123;</div><div class="line">               user.set( attr_name, new_val );</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       return user;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="原生js双向绑定应用实例："><a href="#原生js双向绑定应用实例：" class="headerlink" title="原生js双向绑定应用实例："></a>原生js双向绑定应用实例：</h3><h4 id="做了一个实现像谁是卧底中，随机抽取词汇，类似的功能。"><a href="#做了一个实现像谁是卧底中，随机抽取词汇，类似的功能。" class="headerlink" title="做了一个实现像谁是卧底中，随机抽取词汇，类似的功能。"></a>做了一个实现像谁是卧底中，随机抽取词汇，类似的功能。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">function randomGroup() &#123;</div><div class="line">    var oGroup=[];//存放所有词汇的词组、</div><div class="line">    for(var i=0;i&lt;20;i++)&#123;</div><div class="line">        oGroup[i]=&#123;&#125;;//设置数组中的每个元素都是一个对象</div><div class="line">    &#125;</div><div class="line">    //一个一个定义他们状态的字符串，然后在下面赋值</div><div class="line">    oGroup[0].people=&quot;降龙十八掌&quot;;</div><div class="line">    oGroup[0].killer=&quot;九阴白骨爪&quot;;</div><div class="line">    oGroup[1].people=&quot;快乐大本营&quot;;</div><div class="line">    oGroup[1].killer=&quot;天天向上&quot;;</div><div class="line">    oGroup[2].people=&quot;零花钱&quot;;</div><div class="line">    oGroup[2].killer=&quot;生活费&quot;;</div><div class="line">    oGroup[3].people=&quot;爷爷&quot;;</div><div class="line">    oGroup[3].killer=&quot;姥爷&quot;;</div><div class="line">    oGroup[4].people=&quot;同学&quot;;</div><div class="line">    oGroup[4].killer=&quot;同桌&quot;;</div><div class="line">    oGroup[5].people=&quot;小沈阳&quot;;</div><div class="line">    oGroup[5].killer=&quot;宋小宝&quot;;</div><div class="line">    oGroup[6].people=&quot;成吉思汗&quot;;</div><div class="line">    oGroup[6].killer=&quot;努尔哈赤&quot;;</div><div class="line">    oGroup[7].people=&quot;谢娜张杰&quot;;</div><div class="line">    oGroup[7].killer=&quot;邓超孙俪&quot;;</div><div class="line">    oGroup[8].people=&quot;新年&quot;;</div><div class="line">    oGroup[8].killer=&quot;跨年&quot;;</div><div class="line">    oGroup[9].people=&quot;保安&quot;;</div><div class="line">    oGroup[9].killer=&quot;保镖&quot;;</div><div class="line">    oGroup[10].people=&quot;眉毛&quot;;</div><div class="line">    oGroup[10].killer=&quot;胡须&quot;;</div><div class="line">    oGroup[11].people=&quot;端午节&quot;;</div><div class="line">    oGroup[11].killer=&quot;中秋节&quot;;</div><div class="line">    oGroup[12].people=&quot;摩托车&quot;;</div><div class="line">    oGroup[12].killer=&quot;电动车&quot;;</div><div class="line">    oGroup[13].people=&quot;高跟鞋&quot;;</div><div class="line">    oGroup[13].killer=&quot;增高鞋&quot;;</div><div class="line">    oGroup[14].people=&quot;汉堡包&quot;;</div><div class="line">    oGroup[14].killer=&quot;肉夹馍&quot;;</div><div class="line">    oGroup[15].people=&quot;牛奶&quot;;</div><div class="line">    oGroup[15].killer=&quot;豆浆&quot;;</div><div class="line">    oGroup[16].people=&quot;唇膏&quot;;</div><div class="line">    oGroup[16].killer=&quot;口红&quot;;</div><div class="line">    oGroup[17].people=&quot;公交&quot;;</div><div class="line">    oGroup[17].killer=&quot;地铁&quot;;</div><div class="line">    oGroup[18].people=&quot;结婚&quot;;</div><div class="line">    oGroup[18].killer=&quot;订婚&quot;;</div><div class="line">    oGroup[19].people=&quot;面包&quot;;</div><div class="line">    oGroup[19].killer=&quot;蛋糕&quot;;</div><div class="line">    //词汇出自——————谁是卧底的词汇大全</div><div class="line">    var oGroupNum=Math.floor(Math.random()*20);//抽取一个随机数，随机数范围跟上面数组的长度是一致的</div><div class="line">    oPeople=oGroup[oGroupNum].people;</div><div class="line">    okiller=oGroup[oGroupNum].killer;//随机数的对应下标的状态字符串赋值给这个变量。</div><div class="line">    console.log(oPeople,okiller);</div><div class="line">    DBind1.set( &quot;peopleName&quot;, oPeople );//将上面的状态字符串赋值给input框，。这一步将在界面中直接显示出来</div><div class="line">    DBind2.set( &quot;killName&quot;, okiller );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a><a href="https://obkoro1.github.io/article-demo/2017/jsTwoWayBinding/jsTwoWay.html" target="_blank" rel="external">demo地址</a></h3><p>以上就是用原生js实现双向绑定及其应用的所有内容了，本文主要是分享给之前不知道的小伙伴们看的，或者需要此类资料的小伙伴们。</p>
<p><strong>最后</strong>：如需转载，请放上原文链接并署名。码字不易，<strong>感谢</strong>支持！因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，本人适应互联网快节奏，高强度，持续学习，持续成长，认真，严谨，学习积极性强。<strong>中小公司大佬求带走</strong>，邮箱：1677593011@qq.com。<br><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a> </strong></p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://www.oschina.net/translate/easy-two-way-data-binding-in-javascript" target="_blank" rel="external">JavaScript 实现简单的双向数据绑定 </a></p>
<p><a href="http://www.cnblogs.com/shytong/p/5080900.html" target="_blank" rel="external">Javascript实现简单的双向绑定 </a></p>
<p><a href="http://blog.csdn.net/huang100qi/article/details/50395904" target="_blank" rel="external">用原生js实现数据双向绑定</a></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js双向绑定 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【闭包概念】关于闭包概念不同解读——你可以自己理解。]]></title>
      <url>/2017/10/11/%E3%80%90%E9%97%AD%E5%8C%85%E6%A6%82%E5%BF%B5%E3%80%91%E5%85%B3%E4%BA%8E%E9%97%AD%E5%8C%85%E6%A6%82%E5%BF%B5%E4%B8%8D%E5%90%8C%E8%A7%A3%E8%AF%BB%E2%80%94%E2%80%94%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1%E7%90%86%E8%A7%A3%E3%80%82/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>闭包是被讲烂的内容，但是当我不了解的情况下，看过很多教程，听过很多道理，还是无法完全理解闭包这个东西。所以想要写一篇比较详细，前端小白也能够真正理解闭包概念的干货文章，本文参考很多闭包资料，希望能真正把闭包这个东西讲清楚，喜欢的朋友可以点个赞，或者点波关注。</p>
<h3 id="首先需要了解一波js变量的作用域以及变量的生存周期。"><a href="#首先需要了解一波js变量的作用域以及变量的生存周期。" class="headerlink" title="首先需要了解一波js变量的作用域以及变量的生存周期。"></a>首先需要了解一波js变量的作用域以及变量的生存周期。</h3><p>前几天我发在掘金上面了，下面是一个内容概要，墙裂推荐所有小伙伴，还是点进去学习一波，作用域这个问题可以说是闭包最为重要的内容。</p>
<h4 id="里面的内容包括："><a href="#里面的内容包括：" class="headerlink" title="里面的内容包括："></a>里面的内容包括：</h4><p>1.变量的作用域（变量的有效范围）。<br>2.变量作用域，js高级程序设计（红宝书）中的解释。<br>3.红宝书中的作用域链栗子（还有一个例子的解析：画重点，这里关于<strong>作用域讲的比较详细</strong>，看完这个作用域就了解差不多）。<br>4.变量的生存周期。</p>
<p>这里是链接，点进去学习一波：<a href="https://juejin.im/post/590324e661ff4b0066977c85" target="_blank" rel="external">js 变量的作用域详解、生存周期，以及一些小细节。</a></p>
<hr>
<h3 id="闭包的概念：不同解读一览。"><a href="#闭包的概念：不同解读一览。" class="headerlink" title="闭包的概念：不同解读一览。"></a>闭包的概念：不同解读一览。</h3><p>以下节选了一些对闭包概念的不同理解，基本都没偏离本质，我进行一些解释和画重点操作，小伙伴们可以从中挑选一款相对于自己来说比较好理解的概念，<strong>自己意会</strong>。</p>
<h4 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h4><p>闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍然访问非本地变量</p>
<h4 id="MDN上面这么说："><a href="#MDN上面这么说：" class="headerlink" title="MDN上面这么说："></a>MDN上面这么说：</h4><p>闭包是一种特殊的对象。闭包是由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。</p>
<h4 id="闭包概念-根据《javascript权威指南》里对闭包的解释："><a href="#闭包概念-根据《javascript权威指南》里对闭包的解释：" class="headerlink" title="闭包概念 根据《javascript权威指南》里对闭包的解释："></a>闭包概念 根据《javascript权威指南》里对闭包的解释：</h4><p>所有的javascript函数都是闭包。而当一个嵌套函数被导出到它所定义的作用域外时，闭包会更有趣。</p>
<p>ps：我们通常意义上的闭包指的是在一个函数内部嵌套另一个函数，这里的概念很有趣。把所有函数都当成闭包，相当于把所有局部环境都当成了一个闭包，细细想想觉得蛮有道理的，这里就见仁见智了。</p>
<h4 id="阮一峰的理解："><a href="#阮一峰的理解：" class="headerlink" title="阮一峰的理解："></a>阮一峰的理解：</h4><p>闭包就是能够读取其他函数内部变量的函数。</p>
<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<h3 id="javascript高级程序设计（红宝书）的解释）："><a href="#javascript高级程序设计（红宝书）的解释）：" class="headerlink" title="javascript高级程序设计（红宝书）的解释）："></a>javascript高级程序设计（红宝书）的解释）：</h3><p>闭包就是指<strong>有权访问另一个函数作用域中的变量的函数</strong>。</p>
<h3 id="感觉这里比较简单且清晰，对此要解释一波，上面的意思是："><a href="#感觉这里比较简单且清晰，对此要解释一波，上面的意思是：" class="headerlink" title="感觉这里比较简单且清晰，对此要解释一波，上面的意思是："></a>感觉这里比较简单且清晰，对此要解释一波，上面的意思是：</h3><p>闭包是一个函数内部嵌套着另一个函数，而被嵌套的那个函数有权利访问嵌套它的那个函数的作用域中变量。</p>
<h4 id="上面这里分点来读，慢慢读。"><a href="#上面这里分点来读，慢慢读。" class="headerlink" title="上面这里分点来读，慢慢读。"></a>上面这里分点来读，慢慢读。</h4><p>1.被嵌套的那个函数<br>2.有权利访问<br>3.嵌套它的那个函数<br>4.的作用域中<br>5.的变量。</p>
<hr>
<h3 id="这里有一张帮助你理解闭包概念的图片："><a href="#这里有一张帮助你理解闭包概念的图片：" class="headerlink" title="这里有一张帮助你理解闭包概念的图片："></a>这里有一张帮助你理解闭包概念的图片：</h3><p>用图片来记忆，记忆效率还是高一点，而且是这么特别的一张图片，这么6的图片，出自<a href="https://juejin.im/entry/58c60adf61ff4b005d9e1593/detail" target="_blank" rel="external">一张图搞定闭包概念</a></p>
<p><img src="https://dn-mhke0kuv.qbox.me/6d5b8759fafb5e99cdc4" alt="号称一张图搞定闭包概念，哈哈，反正我单单看这张图片，我是猜不透想表达什么"></p>
<h3 id="图片解释：描述嵌套函数的闭包情况。"><a href="#图片解释：描述嵌套函数的闭包情况。" class="headerlink" title="图片解释：描述嵌套函数的闭包情况。"></a>图片解释：描述嵌套函数的闭包情况。</h3><p>1.打个比方：有一只袜子，它的<strong>内部</strong>就好比是一个<strong>链式作用域</strong>；<br>ps:作用域链的定义以及解析，在上面变量部分的链接里面。</p>
<p>2.小人<strong>无法直接获得</strong>袜子内部的<strong>“a”</strong>。这里的“a”就好比链式作用域里的一个局部变量；<br>ps：蓝色圈圈里面的作用域形成了一个闭包，所以外面的无法访问a。</p>
<p>3.蓝色小圆圈就好比是内部链式作用域里的<strong>嵌套函数（闭包）</strong>。它可以通过链式作用域获取到“a”；</p>
<p>4.蓝色小圆圈通过伸出到袜子外的箭头，让小人可以拉取。这好比嵌套函数返回到外部；（return）</p>
<p>5.小人不断拉取小圆圈的线，把袜子里面翻了出来。他通过获取的蓝色小圆圈，顺利的获取到了“a”；</p>
<h4 id="ps：这里想表达的意思是：小人是全局环境，袜子是一个函数，蓝色圈圈是袜子函数里面嵌套的函数，a是嵌套函数中的变量。"><a href="#ps：这里想表达的意思是：小人是全局环境，袜子是一个函数，蓝色圈圈是袜子函数里面嵌套的函数，a是嵌套函数中的变量。" class="headerlink" title="ps：这里想表达的意思是：小人是全局环境，袜子是一个函数，蓝色圈圈是袜子函数里面嵌套的函数，a是嵌套函数中的变量。"></a>ps：这里想表达的意思是：小人是全局环境，袜子是一个函数，蓝色圈圈是袜子函数里面嵌套的函数，a是嵌套函数中的变量。</h4><hr>
<h4 id="产生一个闭包："><a href="#产生一个闭包：" class="headerlink" title="产生一个闭包："></a>产生一个闭包：</h4><p>创建闭包最常见方式，就是<strong>在一个函数内部创建另一个函数</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function func()&#123;</div><div class="line">  var a = 1,b = 2;</div><div class="line"></div><div class="line">  function closure()&#123;</div><div class="line">    return a+b;</div><div class="line">  &#125;</div><div class="line">  return closure;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面例子中的 函数closure（） 就是一个闭包。</p>
<p><strong>闭包的作用域链</strong>：包含着它自己的作用域，以及包含它的函数的作用域和全局作用域。<br>（作用域链这块儿前面变量那里讲的很清楚了，不再赘述）</p>
<hr>
<h2 id="以下，我会再扩展开-过几天发出来："><a href="#以下，我会再扩展开-过几天发出来：" class="headerlink" title="以下，我会再扩展开,过几天发出来："></a>以下，我会再扩展开,过几天发出来：</h2><p>闭包的注意事项。<br>闭包的应用。<br>常见错误，在循环中创建闭包。<br>闭包的面试题。</p>
<h2 id="后话："><a href="#后话：" class="headerlink" title=" 后话："></a> 后话：</h2><p>想认真写明白一个东西真难，本文其实写到这里好几天了。最后那些没有扩展开的，希望能够写的详细点，然后就一直想着怎么写的更通俗一点。so，我先发这个出来，后面几个一个一个，慢慢解决。到时候，放链接链接起来。</p>
<p><strong>最后</strong>：码字不易，<strong>感谢</strong>支持！因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，本人适应互联网快节奏，高强度，持续学习，持续成长，认真，严谨，学习积极性强。<strong>中小公司大佬求带走</strong>，邮箱：1677593011@qq.com。<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> </strong></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js闭包概念 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[布局概念] 关于CSS-BFC深入理解]]></title>
      <url>/2017/10/11/%E5%B8%83%E5%B1%80%E6%A6%82%E5%BF%B5-%E5%85%B3%E4%BA%8ECSS-BFC%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>好记性不如烂笔头，研究了一下BFC，发现里面比较细的东西也是很多的！关于BFC，很多人可能都听说过BFC这个东西，大概知道这是个啥东西，相信很多人对此并没有一个非常细致的了解，本文预计篇幅较长，认真，耐着性子看，应该都能够比较深入的理解BFC这个概念的规则、作用以及用法。希望喜欢的朋友可以点个赞，或者关注一波本人，谢谢。</p>
<h2 id="BFC是什么鬼？"><a href="#BFC是什么鬼？" class="headerlink" title="BFC是什么鬼？"></a>BFC是什么鬼？</h2><p><strong>BFC概括：</strong>可以在心中记住这么一个概念———<strong>所谓的BFC就是css布局的一个概念，是一块区域，一个环境。</strong></p>
<p>先稳住别懵逼，接着往下走。</p>
<h4 id="关于BFC的定义："><a href="#关于BFC的定义：" class="headerlink" title="关于BFC的定义："></a>关于BFC的定义：</h4><p>BFC(Block formatting context)直译为”块级格式化上下文”。它<strong>是一个独立的渲染区域</strong>，只有<strong>Block-level box</strong>参与（在下面有解释）， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p>
<p>我们常说的文档流其实分为定位流、浮动流和普通流三种。而<strong>普通流其实就是指BFC中的FC</strong>。</p>
<p><strong>FC</strong>是formatting context的首字母缩写，直译过来是格式化上下文，它<strong>是页面中的一块渲染区域</strong>，有一套渲染规则，决定了其<strong>子元素如何布局，以及和其他元素之间的关系和作用。</strong></p>
<p>常见的FC有BFC、IFC（行级格式化上下文），还有GFC（网格布局格式化上下文）和FFC（自适应格式化上下文），这里就不再展开了。</p>
<h4 id="通俗一点的方式解释"><a href="#通俗一点的方式解释" class="headerlink" title="通俗一点的方式解释:"></a>通俗一点的方式解释:</h4><p>BFC 可以简单的理解为<strong>某个元素的一个 CSS 属性</strong>，只不过这个属性<strong>不能被开发者显式的修改</strong>，拥有这个属性的元素对内部元素和外部元素会表现出一些特性，这就是BFC。</p>
<h2 id="下面列一波目录，然后分别展开来讲："><a href="#下面列一波目录，然后分别展开来讲：" class="headerlink" title="下面列一波目录，然后分别展开来讲："></a>下面列一波目录，然后分别展开来讲：</h2><h3 id="触发条件或者说哪些元素会生成BFC："><a href="#触发条件或者说哪些元素会生成BFC：" class="headerlink" title="触发条件或者说哪些元素会生成BFC："></a>触发条件或者说哪些元素会生成BFC：</h3><p>　　满足下列条件之一就可触发BFC</p>
<p>　　【1】根元素，即HTML元素</p>
<p>　　【2】float的值不为none</p>
<p>　　【3】overflow的值不为visible</p>
<p>　　【4】display的值为inline-block、table-cell、table-caption</p>
<p>　　【5】position的值为absolute或fixed
　　</p>
<h3 id="BFC布局规则："><a href="#BFC布局规则：" class="headerlink" title="BFC布局规则："></a>BFC布局规则：</h3><p>1.内部的Box会在垂直方向，一个接一个地放置。</p>
<p>2.Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p>
<p>3.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p>
<p>4.BFC的区域不会与float box重叠。</p>
<p>5.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</p>
<p>6.计算BFC的高度时，浮动元素也参与计算</p>
<h3 id="BFC有哪些作用："><a href="#BFC有哪些作用：" class="headerlink" title="BFC有哪些作用："></a>BFC有哪些作用：</h3><ol>
<li>自适应两栏布局<br>2可以阻止元素被浮动元素覆盖<br>3可以包含浮动元素——清除内部浮动<br>4.分属于不同的BFC时可以阻止margin重叠</li>
</ol>
<hr>
<h4 id="BFC布局规则1：内部的Box会在垂直方向，一个接一个地放置。"><a href="#BFC布局规则1：内部的Box会在垂直方向，一个接一个地放置。" class="headerlink" title="BFC布局规则1：内部的Box会在垂直方向，一个接一个地放置。"></a>BFC布局规则1：内部的Box会在垂直方向，一个接一个地放置。</h4><p>上文定义中提到过的块级盒：block-level box，在这里解析一波：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/b80801d8707be24ecbc0" alt="这个就是我们平常操作盒子的组成"></p>
<p>我们平常说的盒子是由margin、border、padding、content组成的，实际上每种类型的四条边定义了一个盒子，分别是分别是<strong>content box、padding box、border box、margin box</strong>，这四种类型的盒子一直存在，即使他们的值为0.决定块盒在包含块中与相邻块盒的垂直间距的便是margin-box。</p>
<p><strong>提示：</strong>Box之间的距离虽然也可以使用padding来控制，但是此时实际上还是属于box内部里面，而且使用padding来控制的话就不能再使用border属性了。</p>
<p>布局规则1就是我们<strong>平常div一行一行块级放置的样式</strong>，大家想一下就知道了，这里就不展开了。</p>
<h3 id="BFC布局规则2：Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。"><a href="#BFC布局规则2：Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。" class="headerlink" title="BFC布局规则2：Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。"></a>BFC布局规则2：Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</h3><p><img src="https://dn-mhke0kuv.qbox.me/6b0fc0e3d34f94875d35.gif" alt=""></p>
<p>上文提到过，决定块盒在包含块中与相邻块盒的垂直间距的便是margin-box。，上面的栗子就是这种情况。</p>
<p><strong>演示中css属性设置：</strong>上面的box：margin-bottom: 100px;下面的box：margin-top: 100px;（他们是同一侧的margin，所以会发生margin重叠的情况，两个div的距离实际上只有100px。）</p>
<h3 id="BFC的作用4：阻止margin重叠"><a href="#BFC的作用4：阻止margin重叠" class="headerlink" title="BFC的作用4：阻止margin重叠:"></a>BFC的作用4：阻止margin重叠:</h3><p>当两个相邻块级子元素<strong>分属于不同的BFC</strong>时可以<strong>阻止margin重叠</strong></p>
<p><strong>操作方法：</strong>给其中一个div外面包一个div，然后通过触发外面这个div的BFC，就可以阻止这两个div的margin重叠</p>
<p>下面是代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;text&quot;&gt;</div><div class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;!--下面是css代码--&gt;</div><div class="line"> .aside &#123;</div><div class="line">            margin-bottom: 100px;//margin属性</div><div class="line">            width: 100px;</div><div class="line">            height: 150px;</div><div class="line">            background: #f66;</div><div class="line">        &#125;</div><div class="line">        .main &#123;</div><div class="line">            margin-top: 100px;//margin属性</div><div class="line">            height: 200px;</div><div class="line">            background: #fcc;</div><div class="line">        &#125;</div><div class="line">         .text&#123;</div><div class="line">            /*盒子main的外面包一个div，通过改变此div的属性使两个盒子分属于两个不同的BFC，以此来阻止margin重叠*/</div><div class="line">            overflow: hidden;//此时已经触发了BFC属性。</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p><strong>ps：</strong>触发方式可以参考上文给出的触发条件。</p>
<h3 id="这里有一个网址可以在线演示，通过演示，可以更直观一点："><a href="#这里有一个网址可以在线演示，通过演示，可以更直观一点：" class="headerlink" title="这里有一个网址可以在线演示，通过演示，可以更直观一点："></a>这里有一个网址可以在线演示，通过演示，可以更直观一点：</h3><p><img src="https://dn-mhke0kuv.qbox.me/6daeb3cbf5f82d1f6db8.gif" alt="这里面也是一篇好文章，关于BFC的"></p>
<p>链接地址：<a href="http://www.cnblogs.com/xiaohuochai/p/5248536.html" target="_blank" rel="external">http://www.cnblogs.com/xiaohuochai/p/5248536.html</a></p>
<h3 id="BFC布局规则3：每个元素的margin-box的左边，-与包含块border-box的左边相接触-对于从左往右的格式化，否则相反-。即使存在浮动也是如此。"><a href="#BFC布局规则3：每个元素的margin-box的左边，-与包含块border-box的左边相接触-对于从左往右的格式化，否则相反-。即使存在浮动也是如此。" class="headerlink" title="BFC布局规则3：每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。"></a>BFC布局规则3：每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;par&quot;&gt;</div><div class="line">    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</div><div class="line">    //给这两个子div加浮动，浮动的结果，如果没有清除浮动的话，父div不会将下面两个div包裹，但还是在父div的范围之内。</div><div class="line">    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><strong>解析：</strong>给这两个子div加浮动，浮动的结果，如果没有清除浮动的话，父div不会将下面两个div包裹，但还是在父div的范围之内，<strong>左浮是子div的左边接触父div的borderbox的左边，右浮是子div接触父div的borderbox右边</strong>，除非设置margin来撑开距离，否则一直是这个规则。</p>
<h3 id="BFC作用3：可以包含浮动元素——清除内部浮动"><a href="#BFC作用3：可以包含浮动元素——清除内部浮动" class="headerlink" title="BFC作用3：可以包含浮动元素——清除内部浮动"></a>BFC作用3：可以包含浮动元素——清除内部浮动</h3><p>给父divpar加上 overflow: hidden;</p>
<p><strong>清除浮动原理：</strong>触发父div的BFC属性，使下面的子div都<strong>处在父div的同一个BFC区域之内</strong>，此时已成功清除浮动。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/dfe63a3d19cae8adf5fa.gif" alt=""></p>
<p>还可以向同一个方向浮动来达到清除浮动的目的，清除浮动的原理是两个div都位于同一个浮动的BFC区域之中。</p>
<h3 id="BFC布局规则4：BFC的区域不会与float-box重叠："><a href="#BFC布局规则4：BFC的区域不会与float-box重叠：" class="headerlink" title="BFC布局规则4：BFC的区域不会与float box重叠："></a>BFC布局规则4：BFC的区域不会与float box重叠：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;text&quot;&gt;</div><div class="line">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;!--下面是css代码--&gt;</div><div class="line"> .aside &#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 150px;</div><div class="line">            float: left;</div><div class="line">            background: #f66;</div><div class="line">        &#125;</div><div class="line">        .main &#123;</div><div class="line">            height: 200px;</div><div class="line">            overflow: hidden;//触发main盒子的BFC</div><div class="line">            background: #fcc;</div><div class="line">        &#125;</div><div class="line">           .text&#123;</div><div class="line">            width: 500px;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面aside盒子有一个浮动属性，覆盖了main盒子的内容，main盒子没有清除aside盒子的浮动。只做了一个动作，就是<strong>触发自身的BFC</strong>，然后就<strong>不再被aside盒子覆盖</strong>了。所以：<strong>BFC的区域不会与float box重叠</strong>。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/0e2c7b710c4a13111120.gif" alt=""></p>
<h4 id="BFC作用：自适应两栏布局。"><a href="#BFC作用：自适应两栏布局。" class="headerlink" title="BFC作用：自适应两栏布局。"></a>BFC作用：自适应两栏布局。</h4><p><img src="https://dn-mhke0kuv.qbox.me/304255779293ba4c2082.gif" alt=""></p>
<p>还是上面的代码，此时BFC的区域不会与float box重叠，因此<strong>会根据包含块（父div）的宽度，和aside的宽度，自适应宽度。</strong></p>
<hr>
<h3 id="BFC-与-Layout"><a href="#BFC-与-Layout" class="headerlink" title="BFC 与 Layout"></a>BFC 与 Layout</h3><p>IE 作为浏览器中的奇葩，当然不可能按部就班的支持 BFC 标准，于是乎 IE 中有了 Layout 这个东西。<strong>Layout 和 BFC 基本是等价的</strong>，为了处理 IE 的兼容性，在需要触发 BFC 时，我们除了需要用触发条件中的 CSS 属性来触发 BFC，还需要针对 IE 浏览器使用 zoom: 1 来触发 IE 浏览器的 Layout。</p>
<h3 id="有趣的文本"><a href="#有趣的文本" class="headerlink" title="有趣的文本:"></a>有趣的文本:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.par &#123;</div><div class="line">           margin-top: 3rem;</div><div class="line">           border: 5px solid #fcc;</div><div class="line">           width: 300px;</div><div class="line">       &#125;</div><div class="line">       .child &#123;</div><div class="line">           border: 5px solid #f66;</div><div class="line">           width:100px;</div><div class="line">           height: 100px;</div><div class="line">           float: left;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p><img src="https://dn-mhke0kuv.qbox.me/216207666aa8bef15115" alt=""></p>
<p><del>当我使用上面的属性，再加上一个没有属性的p或者span标签，就发现两个子div的float属性自动被清除了，这是因为span或者p这类文本自带一个BFC吗？还是什么？求路过的大神解释。。。</del></p>
<p>以上是错误的。这里两个div被撑开，是因为父div被p标签撑开了，并不是因为清除浮动的原因，从下面这张图片可以清楚的知道。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/5f7dc07585ae6c512bb8" alt=""></p>
<p>其实以上的几个例子都体现了BFC布局规则第五条————
　</p>
<h3 id="BFC布局规则5：BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。"><a href="#BFC布局规则5：BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。" class="headerlink" title="BFC布局规则5：BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。"></a>BFC布局规则5：BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</h3><hr>
<h3 id="文本环绕float："><a href="#文本环绕float：" class="headerlink" title="文本环绕float："></a>文本环绕float：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;float: left; width: 100px; height: 100px; background: #000;&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div style=&quot;height: 200px; background: #AAA;&quot;&gt;</div><div class="line">    &lt;div style=&quot; width: 30px; height: 30px; background: red;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;p&gt;content&lt;/p&gt; &lt;p&gt;content&lt;/p&gt; &lt;p&gt;content&lt;/p&gt; &lt;p&gt;content&lt;/p&gt; &lt;p&gt;content&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><img src="https://dn-mhke0kuv.qbox.me/c02b2396d987f4d7439a" alt=""></p>
<p>问题：为什么 div 的左上角被覆盖了，而文本却没有被覆盖，float不是应该跟普通流不在一个层级吗？是因为float属性不生效吗？</p>
<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><h3 id="float的定义和用法："><a href="#float的定义和用法：" class="headerlink" title="float的定义和用法："></a>float的定义和用法：</h3><p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，<strong>使文本围绕在图像周围</strong>，不过在 CSS 中，<strong>任何元素都可以浮动</strong>。浮动元素会生成一个块级框，而不论它本身是何种元素。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/5994ed11ebc3e4b971db.gif" alt=""></p>
<p>从上图可以看到，float属性确实生效，将float隐藏后，下面还有一个红色的div，这个div是被黑色div所覆盖掉的。<strong>div会被float覆盖，而文本却没有被float覆盖</strong>，是因为<strong>float当初设计的时候</strong>就是为了<strong>使文本围绕在浮动对象的周围</strong>。</p>
<hr>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>上面说的有些东西，其实在我们平常的布局中，已经有在使用这些规律，只是没有总结出来，如果写的不好之处欢迎批评指导。还有一篇关于闭包的，还没写完。。五一三天净打游戏了！应该很快就会写好了。</p>
<p><strong>最后</strong>：码字不易，<strong>感谢</strong>支持！因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，本人适应互联网快节奏，高强度，持续学习，持续成长，认真，严谨，学习积极性强。<strong>中小公司大佬求带走</strong>，邮箱：1677593011@qq.com。<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> </strong></p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html" target="_blank" rel="external">BFC神奇背后的原理</a>，<br><a href="http://www.cnblogs.com/xiaohuochai/p/5248536.html" target="_blank" rel="external">深入理解BFC</a><br><a href="http://web.jobbole.com/84808/" target="_blank" rel="external">什么是BFC</a><br><a href="https://zjy.name/archives/bfc-introduction.html" target="_blank" rel="external">Block Formatting Context (BFC) 浅析</a></p>
<p>以上。2017.5.4.</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Css-BFC作用域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js变量的作用域详解、生存周期，以及一些小细节。]]></title>
      <url>/2017/10/11/js%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%AF%A6%E8%A7%A3%E3%80%81%E7%94%9F%E5%AD%98%E5%91%A8%E6%9C%9F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%86%E8%8A%82%E3%80%82/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>是想写一个闭包的，因为写的比较细，基于篇幅，所以闭包前面关于变量的部分就单独发出来，到时候放个链接引进来，js闭包虽然是一个被讲烂的东西，但其实很多人刚接触这个概念也不太懂，所以希望写一篇接地气，能够让一个从前不知道这个内容的小伙伴能够清楚的理解闭包这个东西。so，本文是基于闭包的变量部分。</p>
<h3 id="首先需要理解变量的作用域（变量的有效范围）："><a href="#首先需要理解变量的作用域（变量的有效范围）：" class="headerlink" title="首先需要理解变量的作用域（变量的有效范围）："></a>首先需要理解变量的作用域（变量的有效范围）：</h3><p>变量的作用域有两种：全局变量和局部变量。</p>
<p>全局变量很好理解：就是我们平时没有再函数内部声明的那些变量，在全局中任何地方（函数，对象等）都可以被引用。</p>
<p>栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var n=999;</div><div class="line">　　function f1()&#123;</div><div class="line">　　　　alert(n);</div><div class="line">　　&#125;</div><div class="line">　　f1(); // 输出999,说明全局变量n在函数内部被读取</div></pre></td></tr></table></figure>
<p> 局部变量：在函数内部声明的变量。函数内部的变量，外部无法读取。<br> 栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　function f1()&#123;</div><div class="line">　　　　var n=999;</div><div class="line">　　&#125;</div><div class="line">　　alert(n); // 没有定义，说明函数内部的变量，外部无法读取。</div></pre></td></tr></table></figure>
<p>在函数内部声明变量没有使用var，实际上是声明了一个全局变量，前提是需要先调用函数（闭包函数中，也是全局变量。）！</p>
<p>栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var func1=function()&#123;</div><div class="line">     a1=1;</div><div class="line">    console.log(a1); //输出:1</div><div class="line">    function func2() &#123;//func2()是一个闭包</div><div class="line">        a2=2;</div><div class="line">        console.log(a2);</div><div class="line">    &#125;</div><div class="line">    func2()；//闭包函数中的变量在调用函数之后，变量也是全局变量</div><div class="line">    console.log(a2);//输出2</div><div class="line">&#125;;</div><div class="line">func1();//调用函数，才会使变量生效</div><div class="line">console.log(a1);//输出1</div><div class="line"> console.log(a2);//输出2，说明闭包中没有用var声明的变量也是全局变量。</div></pre></td></tr></table></figure>
<p>上面栗子中在函数里面声明变量没有用var，在调用函数之后，a1，a2都能有效输出，看完栗子之后，相信你们对变量的作用域也有一些了解了，我们总结一下：</p>
<hr>
<h3 id="变量作用域，js高级程序设计（红宝书）中的解释："><a href="#变量作用域，js高级程序设计（红宝书）中的解释：" class="headerlink" title="变量作用域，js高级程序设计（红宝书）中的解释："></a>变量作用域，js高级程序设计（红宝书）中的解释：</h3><p>内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。这些环境是线性、有次序的。每个环境都可以向上搜索作用域链，以查询变量和函数名；</p>
<p>意思就是：比如函数的局部环境可以访问到外界所有的变量的函数，而且环境的搜索是先从自己本身的环境开始，一级一级往上搜索，这样<strong>由多个执行上下文的变量对象构成的链表就叫做作用域链。</strong></p>
<h3 id="关于查找变量，红宝书中有一句话是这样的："><a href="#关于查找变量，红宝书中有一句话是这样的：" class="headerlink" title="关于查找变量，红宝书中有一句话是这样的："></a>关于查找变量，红宝书中有一句话是这样的：</h3><p>标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级的向后查找，直至找到标识符位置（如果找不到标识符，通常会导致错误的发生、）</p>
<p>ps：标识符指的是变量的名字，作用域链的前端指的是当前执行代码所在环境的变量对象。</p>
<h3 id="作用域链的用途："><a href="#作用域链的用途：" class="headerlink" title="作用域链的用途："></a>作用域链的用途：</h3><p>保证对<strong>执行环境有权访问</strong>的所有<strong>变量和函数的有序访问</strong>。</p>
<h3 id="红宝书中的作用域链栗子："><a href="#红宝书中的作用域链栗子：" class="headerlink" title="红宝书中的作用域链栗子："></a>红宝书中的作用域链栗子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var color = &apos;blue&apos;;</div><div class="line"></div><div class="line">function text1()&#123;</div><div class="line">    var anotherColor = &apos;red&apos;;</div><div class="line"></div><div class="line">    function text2()&#123;</div><div class="line">        var tempCplor = anotherColor;</div><div class="line">        anotherColor = color;</div><div class="line">        //这里可以访问到color、anotherColor和tempColor</div><div class="line">    &#125;</div><div class="line">    //这里可以访问color和anotherColor,但不能访问到tempColor</div><div class="line">    text2();</div><div class="line">&#125;</div><div class="line">//这里只能访问到color</div><div class="line">text1();</div></pre></td></tr></table></figure>
<h3 id="解析（画重点，这里关于作用域讲的比较详细，看完这个作用域就了解差不多）："><a href="#解析（画重点，这里关于作用域讲的比较详细，看完这个作用域就了解差不多）：" class="headerlink" title="解析（画重点，这里关于作用域讲的比较详细，看完这个作用域就了解差不多）："></a>解析（画重点，这里关于作用域讲的比较详细，看完这个作用域就了解差不多）：</h3><p>以上代码一共涉及三个执行环境：全局环境，text1()的局部环境和text2()的局部环境。</p>
<p>1.全局环境中有一个变量color和一个函数text1()。</p>
<p>2.text1()的局部环境中有一个anotherColor变量和一个text2()的函数，但它可以访问到全局环境中的变量color。</p>
<p>3.text2()的局部环境有一个变量tempColor，该变量只能在text2()自身的环境中被访问到。这是一个闭包，无论是全局环境还是text1()的局部环境都无权访问tempColor。但是在text2()的内部环境中，可以访问到全局环境和text1()中的所有变量，因为这两个环境是text2()的父执行环境。</p>
<p>这个作用域链为：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/323770f94a8ee79c4231" alt="只是把函数的名字改了，图方便"></p>
<p>ps：<strong>函数参数也被当做变量</strong>来对待，因此其访问规则与执行函数中的其他变量相同。</p>
<p>以上出自红宝书，自己修改了一丢丢，红宝书还是神器啊，常看常新，每次都会有新发现。</p>
<hr>
<h3 id="关于变量的生存周期："><a href="#关于变量的生存周期：" class="headerlink" title="关于变量的生存周期："></a>关于变量的生存周期：</h3><p>1.全局变量的生存周期是永久的，除非我们主动销毁。</p>
<p>ps：变量永久生存，且可以随时调用，但是使用的时候要适度，正是因为<strong>它的生命周期长，所以将占据更多的内存</strong>，如果声明的变量都是全局变量，当<strong>项目比较大</strong>的时候，就可能出现<strong>性能问题</strong>,养成一个好的习惯还是有必要的。</p>
<p>2.而对于在函数内用 var 关键字声明的局部变量来说,当退出函数时,这些局部变量即失去了它们的价值,它们都会<strong>随着函数的调用的结束而销毁。</strong></p>
<p>ps：调用函数结束，局部变量确实会销毁。但并不是完全销毁，而是一直函数的内部环境中存活着，当函数再度被调用时，变量就“复活”了，所以局部变量还是非常方便的，不会影响二次使用。</p>
<p><strong>值得注意的是：</strong>在局部环境中，出现<strong>全局变量与局部变量重名</strong>的时候，<strong>起作用的是局部变量</strong>，全局变量被屏蔽掉。这是因为上文说过作用域链的原因，先由局部开始搜索变量，当局部找到该变量的时候，就不会再我继续往父级找变量了。</p>
<hr>
<h2 id="后话："><a href="#后话：" class="headerlink" title="后话："></a>后话：</h2><p>就这些吧，觉得内容不够多，平常多一点的。本来想写个面试题的，后来几经修改，觉得写的不好，就删掉了。这几天五一，争取把闭包这个东西写出来，写的不好之处，欢迎指导。</p>
<p><strong>最后</strong>：码字不易，<strong>感谢</strong>支持！因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，本人适应互联网快节奏，高强度，持续学习，持续成长，认真，严谨，学习积极性强。<strong>中小公司大佬求带走</strong>，邮箱：1677593011@qq.com。<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> </strong></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js变量作用域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http状态码是什么，有什么用，在哪里查看，分别代表什么意思？]]></title>
      <url>/2017/10/11/http%E7%8A%B6%E6%80%81%E7%A0%81%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%8C%E5%9C%A8%E5%93%AA%E9%87%8C%E6%9F%A5%E7%9C%8B%EF%BC%8C%E5%88%86%E5%88%AB%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。本文主要是：关于http状态码是什么，有什么用，在哪里查看状态码分别代表什么意思的分享，这里面内容也是非常多的，所以在此科普一下，做波分享。这里面有关键词版本和详细介绍每个错误的版本。</p>
<hr>
<h3 id="http状态码有什么用？"><a href="#http状态码有什么用？" class="headerlink" title="http状态码有什么用？"></a>http状态码有什么用？</h3><p>http状态码的核心作用是Web Server<strong>服务器用来告诉客户端</strong>，当前的<strong>网页请求发生了什么事</strong>，或者说当前Web服务器的响应状态。所以HTTP状态码常用来判断和分析当前Web服务器的运行状况。</p>
<p>我们作为程序猿，需要对这些状态码，<strong>尽可能了解的更多一些</strong>，将这些状态码一一弄清楚，工作中遇到的时候，能够明白问题出在哪里，针对性的解决问题。</p>
<h3 id="常用的http状态码："><a href="#常用的http状态码：" class="headerlink" title="常用的http状态码："></a>常用的http状态码：</h3><p>200 OK 服务器成功处理了请求（这个是我们见到最多的）</p>
<p>301/302 Moved Permanently（重定向）请求的URL已移走。Response中应该包含一个Location URL, 说明资源现在所处的位置</p>
<p>404 Not Found(页面丢失)未找到资源</p>
<p>501 Internal Server Error服务器遇到一个错误，使其无法对请求提供服务</p>
<h3 id="常见的HTTP状态码的概括（文章下面有详细的介绍）："><a href="#常见的HTTP状态码的概括（文章下面有详细的介绍）：" class="headerlink" title="常见的HTTP状态码的概括（文章下面有详细的介绍）："></a>常见的HTTP状态码的概括（文章下面有详细的介绍）：</h3><p><strong>1开头：（被接受，需要继续处理。）</strong><br>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。</p>
<p><strong>2开头 （请求成功）</strong><br>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受</p>
<p><strong>3开头 （请求被重定向）</strong><br>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。</p>
<p><strong>4开头：（请求错误）</strong><br>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p><strong>5开头：（服务器错误）</strong><br>这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。</p>
<hr>
<h3 id="http状态码在哪里查看？"><a href="#http状态码在哪里查看？" class="headerlink" title="http状态码在哪里查看？"></a>http状态码在哪里查看？</h3><h4 id="1-浏览器的F12调试（或者右键检查），network查看Status，如下图所示，status就是http返回的状态码。"><a href="#1-浏览器的F12调试（或者右键检查），network查看Status，如下图所示，status就是http返回的状态码。" class="headerlink" title="1.浏览器的F12调试（或者右键检查），network查看Status，如下图所示，status就是http返回的状态码。"></a>1.浏览器的F12调试（或者右键检查），network查看Status，如下图所示，status就是http返回的状态码。</h4><p><img src="https://dn-mhke0kuv.qbox.me/1e5301068afae71adca2" alt="浏览器如何查看状态码"></p>
<h4 id="2-各种在线输入网址查询HTTP状态的工具："><a href="#2-各种在线输入网址查询HTTP状态的工具：" class="headerlink" title="2.各种在线输入网址查询HTTP状态的工具："></a>2.各种在线输入网址查询HTTP状态的工具：</h4><p>比如：站长工具，http状态查询：<a href="http://tool.chinaz.com/pagestatus/" target="_blank" rel="external">http://tool.chinaz.com/pagestatus/</a></p>
<p>像这样的网站，也提供这个功能。。。。<a href="http://www.3464.com/Tools/PageStatus/" target="_blank" rel="external">http://www.3464.com/Tools/PageStatus/</a></p>
<p>其他的应该还有很多，可以自己去搜索一下。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/d93660054c77ef0faadd" alt="站长工具查询http状态码"></p>
<h3 id="状态码的变化转换："><a href="#状态码的变化转换：" class="headerlink" title="状态码的变化转换："></a>状态码的变化转换：</h3><p>在进行一个<strong>http请求的时候</strong>，我们<strong>看到的只是最后服务器返回来的状态码</strong>，比如出错了404之类，或者成功了200.这说明整个http状态请求的过程中，状态码都只是最后返回的那个状态码吗？</p>
<p>实际上在请求的过程中，http状态码的变化的非常快，像刚才说的1开头的状态码（被接受，需要继续处理。），这类状态码只是一个临时响应的状态码，http请求还是要继续进行下去的，这种状态码是用来反映现在请求进行到哪一步了。除非是类似那种像打断点的东西，一步操作停一下，才会清晰的看出http状态码是如何进行变化的。</p>
<hr>
<h2 id="http状态码的概括："><a href="#http状态码的概括：" class="headerlink" title="http状态码的概括："></a>http状态码的概括：</h2><p>这里是对每个http状态的主要作用进行概括，关于详细的http状态有兴趣了解的朋友们，可以点这里：<a href="http://baike.baidu.com/link?url=djR1a8qTw3slQRLhArsZ41zApZKHoqs56LdRx9AnRyOPiVsBhO71S0ejuhqlRl_IarKDo13eM-MIsBNPVuofcpnHdtfB8fVN3zuLA1DorljDkkwMRRDXu6Aw4A8uCk_F" target="_blank" rel="external">HTTP状态码</a>,这里是百度百科的对http状态码的详细解析，是我看到的最全的了。</p>
<h3 id="1开头：（被接受，需要继续处理。）"><a href="#1开头：（被接受，需要继续处理。）" class="headerlink" title="1开头：（被接受，需要继续处理。）"></a>1开头：（被接受，需要继续处理。）</h3><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以<strong>除非在某些试验条件下</strong>，<strong>服务器禁止向</strong>此类<strong>客户端</strong>发送 <strong>1xx</strong> 响应。</p>
<p><strong>100（客户端继续发送请求，这是临时响应）</strong>：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p>
<p><strong>101服务器根据客户端的请求切换协议。</strong>只能切换到更高级的协议，例如，切换到HTTP的新版本协议。</p>
<p><strong>102 (代表处理将被继续执行) </strong>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</p>
<h3 id="2开头-这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。"><a href="#2开头-这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。" class="headerlink" title="2开头 这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。"></a>2开头 这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</h3><p><strong>200   （成功）</strong>  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</p>
<p><strong>201   （已创建）</strong>  请求成功并且服务器创建了新的资源。</p>
<p><strong>202   （已接受）</strong>  服务器已接受请求，但尚未处理。</p>
<p><strong>203   （非授权信息）</strong>  服务器已成功处理了请求，但返回的信息可能来自另一来源。</p>
<p><strong>204   （无内容） </strong> 服务器成功处理了请求，但没有返回任何内容。</p>
<p><strong>205   （重置内容）</strong> 服务器成功处理了请求，但没有返回任何内容。</p>
<p><strong>206   （部分内容）</strong>  服务器成功处理了部分 GET 请求。</p>
<p><strong>207 (代表之后的消息体将是一个XML消息)</strong>，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
<h3 id="3开头-（请求被重定向）表示要完成请求，需要进一步操作。-通常，这些状态代码用来重定向。"><a href="#3开头-（请求被重定向）表示要完成请求，需要进一步操作。-通常，这些状态代码用来重定向。" class="headerlink" title="3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。"></a>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</h3><p><strong>300   （多种选择）</strong>  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p>
<p><strong>301   （永久移动）</strong>  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p>
<p><strong>302   （临时移动）</strong>  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>
<p><strong>303   （查看其他位置）</strong> 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p>
<p><strong>304   （未修改）</strong>自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p>
<p><strong>305   （使用代理）</strong> 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</p>
<p><strong>307   （临时重定向）</strong>  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>
<h3 id="4开头-（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。"><a href="#4开头-（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。" class="headerlink" title="4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。"></a>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</h3><p><strong>400   （错误请求）</strong> 服务器不理解请求的语法。</p>
<p><strong>401   （未授权）</strong> 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</p>
<p><strong>403   （禁止）</strong> 服务器拒绝请求。</p>
<p><strong>404   （未找到）</strong> 服务器找不到请求的网页。</p>
<p><strong>405   （方法禁用）</strong> 禁用请求中指定的方法。</p>
<p><strong>406   （不接受）</strong> 无法使用请求的内容特性响应请求的网页。</p>
<p><strong>407   （需要代理授权）</strong> 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</p>
<p><strong>408   （请求超时）</strong>  服务器等候请求时发生超时。</p>
<p><strong>409   （冲突）</strong>  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</p>
<p><strong>410   （已删除）</strong>  如果请求的资源已永久删除，服务器就会返回此响应。</p>
<p><strong>411   （需要有效长度）</strong> 服务器不接受不含有效内容长度标头字段的请求。</p>
<p><strong>412   （未满足前提条件）</strong> 服务器未满足请求者在请求中设置的其中一个前提条件。</p>
<p><strong>413   （请求实体过大）</strong> 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p>
<p><strong>414   （请求的 URI 过长）</strong> 请求的 URI（通常为网址）过长，服务器无法处理。</p>
<p><strong>415   （不支持的媒体类型）</strong> 请求的格式不受请求页面的支持。</p>
<p><strong>416   （请求范围不符合要求）</strong> 如果页面无法提供请求的范围，则服务器会返回此状态代码。</p>
<p><strong>417   （未满足期望值）</strong> 服务器未满足”期望”请求标头字段的要求。</p>
<h3 id="5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。"><a href="#5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。" class="headerlink" title="5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。"></a>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。</h3><p>这些错误可能是服务器本身的错误，而不是请求出错。</p>
<p><strong>500   （服务器内部错误）</strong>  服务器遇到错误，无法完成请求。</p>
<p><strong>501   （尚未实施）</strong> 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</p>
<p><strong>502   （错误网关）</strong> 服务器作为网关或代理，从上游服务器收到无效响应。</p>
<p><strong>503   （服务不可用） </strong>服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</p>
<p><strong>504   （网关超时）</strong>  服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p>
<p><strong>505   （HTTP 版本不受支持）</strong> 服务器不支持请求中所用的 HTTP 协议版本。</p>
<p><strong>ps：</strong>还有一些状态码还没写出来，有兴趣了解的，点这里：<a href="http://baike.baidu.com/link?url=djR1a8qTw3slQRLhArsZ41zApZKHoqs56LdRx9AnRyOPiVsBhO71S0ejuhqlRl_IarKDo13eM-MIsBNPVuofcpnHdtfB8fVN3zuLA1DorljDkkwMRRDXu6Aw4A8uCk_F" target="_blank" rel="external">http百度百科</a></p>
<hr>
<p><strong>最后</strong>：码字不易，<strong>感谢</strong>支持！因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我。<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，中小公司大佬求带走，qq：1677593011。<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> </strong></p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="http://blog.csdn.net/dufufd/article/details/53112184" target="_blank" rel="external">常见的HTTP状态码(HTTP Status Code)说明</a><br><a href="http://baike.baidu.com/link?url=djR1a8qTw3slQRLhArsZ41zApZKHoqs56LdRx9AnRyOPiVsBhO71S0ejuhqlRl_IarKDo13eM-MIsBNPVuofcpnHdtfB8fVN3zuLA1DorljDkkwMRRDXu6Aw4A8uCk_F" target="_blank" rel="external">百度百科HTTP状态码</a></p>
<p>以上。2017.4.27</p>
]]></content>
      
        <categories>
            
            <category> http </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http状态码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 jQuery, Angular.js 实现登录界面验证码详解]]></title>
      <url>/2017/10/11/%E4%BD%BF%E7%94%A8-jQuery-Angular-js-%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>前段事件，做了一个用ajax后台异步交互的登录功能，自己在上面加了一个验证码的功能，这个功能背后的原理挺好理解的，实现起来也十分简单，特此写波分享，，自己写的过程中踩了不少坑，这里还是照例写的详细点，大家可以做个参考，喜欢的朋友可以点个赞，或者关注一波。</p>
<h2 id="最终实现的效果："><a href="#最终实现的效果：" class="headerlink" title="最终实现的效果："></a>最终实现的效果：</h2><p><img src="https://dn-mhke0kuv.qbox.me/c4f72f1e1ae450c6b3ef" alt=""></p>
<h3 id="验证码效果"><a href="#验证码效果" class="headerlink" title="验证码效果"></a>验证码效果</h3><p>当点击登录之前，会先判断验证码是否正确（验证码可以不区分大小写，也可以区分大小写），验证码错误会刷新验证码，验证码验证之前，不会进行跨域登录操作。</p>
<h3 id="整体思路。"><a href="#整体思路。" class="headerlink" title="整体思路。"></a>整体思路。</h3><p>1.取四位随机数</p>
<p>2.赋值到验证码的input框里。</p>
<p>3.在点击登录之前先用if判断验证码input框的值和输入框的值是否相等，相等时进入下一步操作，不相等直接返回错误</p>
<p>4.里面ajax的部分可以直接套进去。</p>
<h3 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h3><p>1.这里的<strong>验证码框的背景图片</strong>是网上自己找的，显得验证码比较正式，不然显得有点low。</p>
<p>2.<strong>不区分大小写</strong>实际上就是利用js的toUpperCase()方法是把小写转换成大写，因为是原生js所以在angular中也可以使用！</p>
<p>3.将验证码封装成一个函数，然后在点击登录时在最后调用这个函数，可以<strong>每次都刷新函数</strong>。</p>
<p>4.<strong>避免验证码被复制</strong>，在html里面使用：disabled=”disabled”——禁止验证码框文字被选中。</p>
<h3 id="下面是代码部分实现过程详解（注释写的比较详细）："><a href="#下面是代码部分实现过程详解（注释写的比较详细）：" class="headerlink" title="下面是代码部分实现过程详解（注释写的比较详细）："></a>下面是代码部分实现过程详解（注释写的比较详细）：</h3><p>html代码应该不会解释了，有不懂的，可以在评论区问我。下面<strong>有部分关于angular的内容，暂时还没学到这里可以跳过去</strong>，没有影响到实现效果的。(可以把代码复制过去，然后在自己本地试试。)</p>
<p><strong>先放用jq实现的过程，然后放angular实现的过程</strong>，看过我几篇文章的都知道，我尽量会把所有代码，每一步都注释的清清楚楚，希望可以帮助到大家。</p>
<h3 id="这里是html的内容："><a href="#这里是html的内容：" class="headerlink" title="这里是html的内容："></a>这里是html的内容：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;js5-form&quot; id=&quot;js5-form&quot; ng-controller=&quot;enterCtrl&quot;&gt;</div><div class="line">        &lt;div id=&quot;enter-all&quot; &gt;</div><div class="line">            &lt;h3&gt;jnshu后台登录&lt;/h3&gt;</div><div class="line">            &lt;form action=&quot;&quot; name=&quot;myForm&quot;&gt;</div><div class="line">                &lt;div class=&quot;js5-input-div&quot;&gt;</div><div class="line">                    &lt;div class=&quot;js5-input-img1&quot;&gt;&lt;/div&gt;</div><div class="line">                    &lt;input id=&quot;js5-userNum&quot; type=&quot;text&quot; name=&quot;userName&quot; placeholder=&quot;用户名&quot; maxlength=&quot;12&quot;  ng-model=&quot;userName&quot; ng-keyup=&quot;mykey($event)&quot; required/&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/form&gt;</div><div class="line">            &lt;form action=&quot;&quot; name=&quot;registerForm&quot;&gt;</div><div class="line">                &lt;div class=&quot;js5-input-div&quot;&gt;</div><div class="line">                    &lt;div class=&quot;js5-input-img2&quot;&gt;&lt;/div&gt;</div><div class="line">                    &lt;input id=&quot;js5-password&quot; type=&quot;password&quot; name=&quot;userPsd&quot; placeholder=&quot;密码&quot; maxlength=&quot;20&quot; ng-model=&quot;userPsd&quot; ng-keyup=&quot;mykey($event)&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;16&quot; required/&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/form&gt;</div><div class="line">            &lt;!--账号和密码的登录框--&gt;</div><div class="line">            &lt;form action=&quot;&quot; &gt;</div><div class="line">                &lt;div class=&quot;js5-input-div&quot;&gt;</div><div class="line">                    &lt;span class=&quot;js5-input-divSpan&quot;&gt;验证码：&lt;/span&gt;</div><div class="line">                    &lt;input type=&quot;text&quot; placeholder=&quot;不区分大小写&quot; class=&quot;js5-form3-input&quot; id=&quot;js5-form3-input&quot; ng-model=&quot;writeCode&quot;  maxlength=&quot;6&quot; ng-keyup=&quot;mykey($event)&quot;&gt;</div><div class="line">                    &lt;input type=&quot;text&quot; class=&quot;js5-authCode&quot; value=&quot;&quot;  id=&quot;js5-authCode&quot; ng-model=&quot;showAuthCode&quot; disabled=&quot;disabled&quot;&gt;</div><div class="line">                     &lt;!--disabled=&quot;disabled&quot;禁止验证码框文字被选中--&gt;</div><div class="line">                    &lt;span class=&quot;spanShift&quot; ng-click=&quot;changeVerify()&quot;&gt;获取&lt;/span&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/form&gt;</div></pre></td></tr></table></figure>
<h3 id="这里是jq代码实现部分："><a href="#这里是jq代码实现部分：" class="headerlink" title="这里是jq代码实现部分："></a>这里是jq代码实现部分：</h3><p>记得引入jq文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">var authCode;</div><div class="line">    randomCode=$(&quot;#js5-authCode&quot;).eq(0);//获取验证码出现的方框dom</div><div class="line">console.log(randomCode);</div><div class="line"></div><div class="line">function createCode() &#123;</div><div class="line">    authCode=&quot;&quot;;//设置这个为空变量，然后往里面添加随机数</div><div class="line">    var authCodeLength=4;//随机数的长度</div><div class="line">    randomArray=[0,1,2,3,4,5,6,7,8,9,&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,&apos;L&apos;,&apos;M&apos;,&apos;N&apos;,&apos;O&apos;,&apos;P&apos;,&apos;Q&apos;,&apos;R&apos;, &apos;S&apos;,&apos;T&apos;,&apos;U&apos;,&apos;V&apos;,&apos;W&apos;,&apos;X&apos;,&apos;Y&apos;,&apos;Z&apos;];</div><div class="line">    //创建一个数组，随机数从里面选择四位数或者更多</div><div class="line">    for(var i=0;i&lt;authCodeLength;i++)&#123;</div><div class="line">        var index=Math.floor(Math.random()*36);//随机取一位数</div><div class="line">        authCode +=randomArray[index];//取四位数，并+相连</div><div class="line">    &#125;</div><div class="line">    console.log(authCode);//取到四位随机数之后，跳出循环</div><div class="line">    randomCode.val(authCode);//将四位随机数赋值给验证码出现的方框</div><div class="line">    console.log(randomCode.val());</div><div class="line">&#125;</div><div class="line"></div><div class="line">//以上是封装的获取验证码的函数</div><div class="line"></div><div class="line">$(function () &#123;//当文档加载结束后，运行这个函数</div><div class="line">    createCode();//一开始先运行一遍取随机数的函数</div><div class="line">    $(&quot;#js5-btn&quot;).click(function () &#123;//这里是一个点击事件</div><div class="line">        console.log(window.randomCode);</div><div class="line">        //这里写了一个必报，window.randomCode是在文档里面找到这个dom，否则上文的四个随机数传不到这里来</div><div class="line">        var randomCode=window.randomCode.val();</div><div class="line">        console.log(randomCode);</div><div class="line">        var authInput=$(&quot;#js5-form3-input&quot;).val().toUpperCase(),</div><div class="line">            user=$(&quot;#js5-userNum&quot;).val(),</div><div class="line">            psd=$(&apos;#js5-password&apos;).val();</div><div class="line">        //上面三个是分别获取验证码输入框的值，账号的值，密码的值。</div><div class="line">        //验证码输入框这里，最后toUpperCase()方法是把小写转换成大写</div><div class="line">        console.log(authInput);</div><div class="line">        console.log(randomCode);</div><div class="line">        console.log(user,psd);</div><div class="line">        if (randomCode===authInput) &#123;</div><div class="line">        //验证验证码，在验证码输入框与验证码的值不相等之前，是不会进入下面登录的步骤的，验证码是第一步关卡</div><div class="line">            var firstAjax = new XMLHttpRequest();</div><div class="line">            //创建ajax对象，这里是ajax跨域的部分</div><div class="line">            firstAjax.open(&quot;POST&quot;, &quot;这里是你url跨域的地址&quot;, true);</div><div class="line">            //连接服务器，跨域。</div><div class="line">            firstAjax.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);</div><div class="line">            //setRequestHeader() 方法指定了一个 HTTP 请求的头部，它应该包含在通过后续 send() 调用而发布的请求中。</div><div class="line">            //可以理解为，这是http的请求头，固定格式，位置必须要在open之后，send之前。</div><div class="line">            firstAjax.send(&quot;name=&quot; + user + &quot;&amp;pwd=&quot; + psd);</div><div class="line">            //在使用POST方式时参数代表着向服务器发送的数据，前面两个是账号框和密码框</div><div class="line">            firstAjax.onreadystatechange = function () &#123;//当参数被传入服务器的时候，引用监听事件。</div><div class="line">                if (firstAjax.readyState == 4) &#123;//readyState四种状态，当执行四步完成之后</div><div class="line">                    if (firstAjax.status == 200) &#123;//返回的是200，代表成功，404未找到。</div><div class="line">                        var returnValue = JSON.parse(firstAjax.responseText);//取回由服务器返回的数据</div><div class="line">                        console.log(returnValue);</div><div class="line">                        if (returnValue.code == 0) &#123;//这里是后端定义的，当code==0的时候，代表登录正确。</div><div class="line">                            window.location.href = &quot;https://www.baidu.com/index.php?tn=98012088_3_dg&amp;ch=1&quot;;</div><div class="line">                            //后端返回的数据验证成功就跳转链接。</div><div class="line">                        &#125;</div><div class="line">                        else &#123;</div><div class="line">                            $(&quot;#js5Message&quot;).text(returnValue.message);//当code不等于0时，返回出错信息</div><div class="line">                        &#125;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        alert(&quot;出错咯，咯咯咯&quot;);//返回的不是200的时候，出错。</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            createCode();//点击登录按钮，验证之后会刷新验证码</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            $(&quot;#js5Message&quot;).text(&quot;验证码错误，请重新输入&quot;);</div><div class="line">            createCode();//验证码错误，刷新验证码。</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="这是是angular代码实现部分："><a href="#这是是angular代码实现部分：" class="headerlink" title="这是是angular代码实现部分："></a>这是是angular代码实现部分：</h3><p>jq部分写的详细一点，这里也挺详细的，如果不懂的话，可以回头看看jq部分，原理都是一样的，复制到本地自己多试试，记得引angular文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">var enter=angular.module(&quot;myApp&quot;);</div><div class="line">enter.controller(&apos;enterCtrl&apos;,[&apos;$scope&apos;,&apos;$http&apos;,&apos;$state&apos;,function ($scope,$http,$state) &#123;</div><div class="line">    $scope.changeVerify=function () &#123;//定义了一个点击事件，获取验证码</div><div class="line">        var authCode=&quot;&quot;;</div><div class="line">        var authCodeLength=4;//取几个随机数字</div><div class="line">        var randomArray=[0,1,2,3,4,5,6,7,8,9,&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,&apos;L&apos;,&apos;M&apos;,&apos;N&apos;,&apos;O&apos;,&apos;P&apos;,&apos;Q&apos;,&apos;R&apos;, &apos;S&apos;,&apos;T&apos;,&apos;U&apos;,&apos;V&apos;,&apos;W&apos;,&apos;X&apos;,&apos;Y&apos;,&apos;Z&apos;];</div><div class="line">        for(var i=0;i&lt;authCodeLength;i++)&#123;</div><div class="line">            var index=Math.floor(Math.random()*36);//随机取一位数</div><div class="line">            authCode +=randomArray[index];//取四位数，并+相连</div><div class="line">        &#125;</div><div class="line">        $scope.showAuthCode=authCode;//赋值</div><div class="line">        console.log($scope.showAuthCode);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //上面是封装的获取验证码的函数，会在下面进行调用</div><div class="line">  (function () &#123;</div><div class="line">        $scope.changeVerify();//调用点击事件。</div><div class="line">        $scope.enter=function (userName,userPsd) &#123;</div><div class="line">            //点击登录按钮事件，将双向绑定的账号密码当做参数传入函数</div><div class="line">            if ($scope.writeCode.toUpperCase() ==$scope.showAuthCode)&#123;//toUpperCase()将小写转化为大写</div><div class="line">                //双向绑定验证码输入框，可以直接使用，这里是验证验证码</div><div class="line">                $http(&#123;</div><div class="line">                    method:&quot;POST&quot;,</div><div class="line">                    url:&quot;你的跨域地址&quot;,//$http的固定格式</div><div class="line">                    params:&#123;</div><div class="line">                        &quot;name&quot;:userName,</div><div class="line">                        &quot;pwd&quot;:userPsd</div><div class="line">                        //双向绑定的参数传到下个页面</div><div class="line">                    &#125;</div><div class="line">                &#125;).then(function (res) &#123;</div><div class="line">                    //获取服务器返回的参数</div><div class="line">                    console.log(res);</div><div class="line">                    if (res.data.code!==0)&#123;</div><div class="line">                        //参数不为0的时候，弹出提示</div><div class="line">                        alert(res.data.message);</div><div class="line">                    &#125;else &#123;</div><div class="line">                        //参数为0的时候，跳转页面</div><div class="line">                        $state.go(&quot;home.studentList&quot;);</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;else &#123;</div><div class="line">                alert(&quot;验证码输入错误咯，咯咯咯&quot;);</div><div class="line">                $scope.changeVerify();//验证后，刷新验证码</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;());</div></pre></td></tr></table></figure>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>断断续续写了两天，现在写的没有之前那么快了。。差不多就以上这些内容，有问题可在评论区留言。有不足欢迎指导，拍砖。</p>
<p><strong>最后</strong>：因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持！<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端登录界面验证码详解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sass变量详解——你不知道的sass。]]></title>
      <url>/2017/10/11/sass%E5%8F%98%E9%87%8F%E8%AF%A6%E8%A7%A3%E2%80%94%E2%80%94%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84sass%E3%80%82/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>现在一直使用sass写css，当初入门的时候，看的很多教程，当时看的云里雾里的，现在看来还是蛮详细的，就是一点，不够小白。本人文章类型一直比较偏小白的，想要更好的为不会用sass提供一点学习的资料，相信本文对想要学习sass的人，还是有极大的参考价值的。里面有些细节，也许对已经学会使用sass的大手子也有一定的参考价值。</p>
<h3 id="变量是什么？"><a href="#变量是什么？" class="headerlink" title="变量是什么？"></a>变量是什么？</h3><h4 id="w3c关于JavaScript-变量的介绍："><a href="#w3c关于JavaScript-变量的介绍：" class="headerlink" title="w3c关于JavaScript 变量的介绍："></a>w3c关于JavaScript 变量的介绍：</h4><p><img src="https://dn-mhke0kuv.qbox.me/e18a3d4b81fa5d9a1e77" alt="可以去搜一下js 变量"></p>
<p>上面一大堆巴拉巴拉的东西，可以先这么理解，把<strong>变量看作一个存放东西的盒子</strong>，可以将钥匙、手机、饮料等物品存放在这个盒子中，也可以在需要的时候<strong>换成</strong>我们想存放的<strong>新物品</strong>，那里面的旧的东西就存不了，只能存一个东西。</p>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>这里有个很好的<strong><a href="http://www.sassmeister.com/" target="_blank" rel="external">网站</a></strong>，可以在线把sass文件编译成css文件，大家可以跟着栗子，一边看，一边动手做做demo，看看最后输出css是什么样子的。</p>
<hr>
<h4 id="sass变量的格式："><a href="#sass变量的格式：" class="headerlink" title="sass变量的格式："></a>sass变量的格式：</h4><p><strong>sass变量格式：</strong><code>$var:value;</code> 栗子：$color:red;</p>
<h4 id="1-必须是-开头"><a href="#1-必须是-开头" class="headerlink" title="1.必须是$开头"></a>1.必须是$开头</h4><p>解析：这是sass变量的符号</p>
<h4 id="2-后面紧跟变量名"><a href="#2-后面紧跟变量名" class="headerlink" title="2.$后面紧跟变量名"></a>2.$后面紧跟变量名</h4><p>解析：变量名首字母必须为字母(a-z A-Z)，下划线(_)开头。</p>
<h4 id="3-变量的值"><a href="#3-变量的值" class="headerlink" title="3.变量的值"></a>3.变量的值</h4><p>解析：变量值和变量名之间就需要使用冒号(:)分隔开（就像CSS属性设置一样）。</p>
<h3 id="sass变量的用法："><a href="#sass变量的用法：" class="headerlink" title="sass变量的用法："></a>sass变量的用法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$color:red;/*1.这就是声明变量*/</div><div class="line">p&#123;color:$color;&#125;/*P标签的颜色被改为red————这是变量的使用*/</div></pre></td></tr></table></figure>
<h3 id="1-变量使用之前要先声明变量"><a href="#1-变量使用之前要先声明变量" class="headerlink" title="1.变量使用之前要先声明变量"></a>1.变量使用之前要先声明变量</h3><p>解析：声明在变量这个盒子里面要放什么东西，那里面就有东西了</p>
<h3 id="2-第二步使用变量。"><a href="#2-第二步使用变量。" class="headerlink" title="2.第二步使用变量。"></a>2.第二步使用变量。</h3><p>解析：现在变量里面有东西了，要把里面的东西拿出来用，就要先找到变量这个盒子，找到盒子才能使用里面的东西。变量的变量名，就是这个盒子在的地方，把他放在你所要用的地方，就是把盒子里面的东西取出来用了。</p>
<h3 id="多值变量："><a href="#多值变量：" class="headerlink" title="多值变量："></a>多值变量：</h3><p>多值变量格式：<br><code>$var:value,value,value;</code></p>
<p>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$back:#fff,green,red;/*1.多个变量一起声明*/</div><div class="line">  p&#123;</div><div class="line">    color: nth($back,1);/*2.输出green*/</div><div class="line">  &#125;</div><div class="line">  span&#123;</div><div class="line">    color: nth($back,3);/*3.输出red*/</div></pre></td></tr></table></figure></p>
<h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>所谓的多值变量就是字面上的意思，把多个相关的值写在一个变量里，然后通过nth($var,index)来获取第几个值。通常可以用于在写页面的时候声明多个颜色，然后再样式里面直接使用就可以了。</p>
<h3 id="关于变量的作用域："><a href="#关于变量的作用域：" class="headerlink" title="关于变量的作用域："></a>关于变量的作用域：</h3><p><img src="https://dn-mhke0kuv.qbox.me/b072b62aea4f1e247ce9" alt="sass里面的代码片段"></p>
<h3 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a>解析：</h3><p>以上是我在sass文件里面做的一个demo，里面分成了三个部分，下面分别给大家解析一下。</p>
<p>1.第一部分，<strong>变量要提前声明才能使用</strong>。这里我上面没有声明$text1这个变量，直接使用，导致文件报错。</p>
<p><strong>sass文件编译是从上往下的</strong>，所以使用的时候，<strong>变量要声明在上面</strong>，当上面没有声明的时候，使用这个变量就会报错，文件编译错误，导致css文件无法使用。</p>
<p>2.第二部分，<strong>sass的全局属性</strong>，详见demo，里面注释的很清楚了。</p>
<p>因为sass文件是从上往下解析的，同一个sass变量在外界声明的时候，会有一个覆盖的作用，即<strong>上面已经声明过的变量，会被下面声明的给覆盖</strong>。</p>
<p>3.第三部分，<strong>sass也有局部变量</strong>。局部被包裹的变量，将<strong>不会影响到外界的变量</strong>，只在自己的一亩三分田里面起作用，<strong>外界要引用这个变量也是不行的</strong>。如果这里我没有定义外界的变量，局部被包裹起来的那部分$text:blue;还是会生效的。</p>
<h3 id="变量的默认值default："><a href="#变量的默认值default：" class="headerlink" title="变量的默认值default："></a>变量的默认值default：</h3><p>刚才说了，sass文件是从上往下渲染的，后面声明的变量会覆盖前面的变量，default这里的作用就是使后面的变量变成声明在第一个的变量（就是开始声明这个变量的地方，默认是第一个。）</p>
<h3 id="变量格式："><a href="#变量格式：" class="headerlink" title="变量格式："></a>变量格式：</h3><p><code>$var:value!default;</code> 栗子：$color:red!default;</p>
<p>代码示例。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/ef721a4d9642e82d12c9" alt="default代码示例1"></p>
<h4 id="解析：-2"><a href="#解析：-2" class="headerlink" title="解析："></a>解析：</h4><p>1.这里把注释弄掉之后，sass编译会出错，因为上面没有声明这个变量，说明<strong>加上default</strong>之后，刚才关于<strong>变量的作用域</strong>的介绍也是不变的，下面还有一个局部作用域的栗子。</p>
<p>2和3.在代码注释里面，已经很详细了，不赘述了。</p>
<p>4.说明<strong>连续声明两个default也是有效的</strong>，第一个default会被第二个default覆盖。第二个default会被没有声明default的变量覆盖，所以<strong>最终输出的是没有声明default的变量</strong>red。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/6060ecebe422a4f6100e" alt="default代码示例2"></p>
<p>1.这里不解析了，详见注释。</p>
<h3 id="变量用-包裹"><a href="#变量用-包裹" class="headerlink" title="变量用#{}包裹"></a>变量用#{}包裹</h3><p>这是一个格式，用在属性或者选择器上面里。大家看一下栗子就懂了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ipt:input;</div><div class="line">$btm:bottom;</div><div class="line">.#&#123;$ipt&#125;&#123; /*这里输出.input&#123;&#125;*/</div><div class="line">    padding-#&#123;$btm&#125;:5rem;/*这里输出padding-bottom: 5rem;*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后话："><a href="#后话：" class="headerlink" title="后话："></a>后话：</h2><p>断断续续写了三天，每天都有在写，今天算是差不多写完了。这篇是面向对sass变量概念不太熟悉的朋友，写的较为详细，在短短的一篇文章里面肯定无法保证阅读本文的人对sass有多熟悉，但我希望通过这篇文章，让你知道sass变量的一些用法，概念。能够不再那么一头雾水，那么我这篇文章的目的也就达到了。</p>
<p><strong>最后</strong>：因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持！<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>参考文献：</p>
<p><a href="http://www.w3cplus.com/preprocessor/sass-basic-variable.html" target="_blank" rel="external">sass揭秘之变量</a></p>
<p>以上。2017.4.22</p>
]]></content>
      
        <categories>
            
            <category> sass </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单词太长导致自动换行，出现空白区域。——word-wrap和word-break]]></title>
      <url>/2017/10/11/%E5%8D%95%E8%AF%8D%E5%A4%AA%E9%95%BF%E5%AF%BC%E8%87%B4%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%EF%BC%8C%E5%87%BA%E7%8E%B0%E7%A9%BA%E7%99%BD%E5%8C%BA%E5%9F%9F%E3%80%82%E2%80%94%E2%80%94word-wrap%E5%92%8Cword-break/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>在写页面的时候，偶尔有时会遇到下图这两种情况，一种是单词过长时会溢出div，一种是直接换行，导致出现空白区域。这两个情景就需要word-wrap、word-break这两个属性出场来解决了。闲话不扯了，本文主要内容有：word-wrap和word-break<strong>属性介绍，使用方法，他们之间的区别，浏览器兼容性，demo链接</strong>。需要的朋友可以过来参考下，喜欢的可以点个赞，希望能对大家有所帮助。</p>
<h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p><img src="https://dn-mhke0kuv.qbox.me/7681b3ea25f4259b7599" alt="属性的应用场景"></p>
<h3 id="word-wrap和word-break是什么？"><a href="#word-wrap和word-break是什么？" class="headerlink" title="word-wrap和word-break是什么？"></a>word-wrap和word-break是什么？</h3><p>在mozilla的官网上找到如下的解释：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/cd518bb76aa131d9800c" alt="word-wrap的英文解释"></p>
<p><img src="https://dn-mhke0kuv.qbox.me/01c76f87a127eb7b25fd" alt="word-break的英文解释"></p>
<p>经过翻译：<strong>word-wrap:</strong></p>
<p>css的 word-wrap 属性用来标明<strong>是否允许</strong>浏览器在单词内进行<strong>断句</strong>，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。</p>
<p><strong>word-break:</strong></p>
<p>css的 word-break 属性用来标明<strong>怎么样</strong>进行单词内的<strong>断句</strong>。</p>
<h3 id="何谓单词内断句？"><a href="#何谓单词内断句？" class="headerlink" title="何谓单词内断句？"></a>何谓单词内断句？</h3><p><img src="https://dn-mhke0kuv.qbox.me/619c1577018279a50a70" alt=""></p>
<p>这个单词没有发生单词内断句的情况，这个单词太长了，溢出了容器的范围。</p>
<p>下面是发生了单词内断句的情况实例：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/3f3a3b26f2b49ab81aa3" alt=""></p>
<p>这里面分别使用了word-wrap：break-word;和word-break:break-all;这里可以看到，效果是一样的，下面再说说他们的区别。</p>
<h3 id="word-wrap的属性介绍"><a href="#word-wrap的属性介绍" class="headerlink" title="word-wrap的属性介绍"></a>word-wrap的属性介绍</h3><p><img src="https://dn-mhke0kuv.qbox.me/b55595378c65b88dc2b9" alt="w3c：word-wrap"></p>
<h3 id="word-wrap的浏览器支持情况："><a href="#word-wrap的浏览器支持情况：" class="headerlink" title="word-wrap的浏览器支持情况："></a>word-wrap的浏览器支持情况：</h3><p><img src="https://dn-mhke0kuv.qbox.me/e701f4d37b0015b5538e" alt="所有浏览器都支持"></p>
<h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/* 二选一 */</div><div class="line">word-wrap: normal;</div><div class="line">word-wrap: break-word;</div></pre></td></tr></table></figure>
<h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><p>normal就是大家平常见得最多的正常的换行规则，break-word如果长单词超出了一行的长度的话，在一行中有可以换行的标点时就换行，实在没有可以换行的地方时，才在单词中间换行。（这句的解析入下图）</p>
<p><img src="https://dn-mhke0kuv.qbox.me/eeea7fe4114814f3b60a" alt=""></p>
<p>上图就是：一行中<strong>有可以换行的标点时就换行</strong>，<strong>实在没有</strong>可以换行的地方时，<strong>才在单词中间换行</strong></p>
<h3 id="word-break属性的属性介绍："><a href="#word-break属性的属性介绍：" class="headerlink" title="word-break属性的属性介绍："></a>word-break属性的属性介绍：</h3><p><img src="https://dn-mhke0kuv.qbox.me/29d4016953d5b7e462a2" alt="w3c上关于word-break属性的介绍"></p>
<h3 id="浏览器支持："><a href="#浏览器支持：" class="headerlink" title="浏览器支持："></a>浏览器支持：</h3><p><img src="https://dn-mhke0kuv.qbox.me/c36fd784b852063b1144" alt=""></p>
<p>除了opera不支持以外，其他都支持（火狐也从不支持改为支持了）!</p>
<h3 id="语法使用："><a href="#语法使用：" class="headerlink" title="语法使用："></a>语法使用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* 默认normal */</div><div class="line">word-break: normal;</div><div class="line">word-break: break-all;</div><div class="line">word-break: keep-all;</div></pre></td></tr></table></figure>
<p>解析：几个关键字值的含义如下：<br><strong>normal</strong><br>    使用默认的换行规则。</p>
<p><strong>break-all</strong><br>    允许任意非CJK(Chinese/Japanese/Korean)文本间的单词断行。(这里是CJK中文，日文，韩文的意思)</p>
<p><strong>keep-all</strong><br>不允许CJK(Chinese/Japanese/Korean)文本中的单词换行，只能在半角空格或连字符处换行。非CJK文本的行为实际上和normal一致。(<strong>一致性可看下图的demo效果</strong>)</p>
<p><img src="https://dn-mhke0kuv.qbox.me/3af903320a9cac09f9d5" alt=""></p>
<h3 id="word-break-break-all和word-wrap-break-word之间的区别："><a href="#word-break-break-all和word-wrap-break-word之间的区别：" class="headerlink" title="word-break:break-all和word-wrap:break-word之间的区别："></a>word-break:break-all和word-wrap:break-word之间的区别：</h3><p>其实可以从上述demo栗子中看出来：</p>
<p><strong>word-break:break-all</strong>碰到英文单词统统都换行，只要<strong>到了容器的边界就会换行</strong>，<strong>不浪费一点空间</strong>，一点空隙都不放过。</p>
<p>而<strong>word-wrap:break-word</strong>在一行中<strong>有可以换行点时就换行</strong>，<strong>实在没有</strong>可以换行的地方时，<strong>才在单词中间换行。</strong></p>
<p>这里所说的换行点指的是：如空格，或CJK(Chinese/Japanese/Korean)(中文/日文/韩文)之类的，让这些换行点换行，至于对不对齐，好不好看，则不关心，因此，<strong>很容易出现一片一片牛皮癣</strong>一样的空白的情况。</p>
<h2 id="后话："><a href="#后话：" class="headerlink" title="后话："></a>后话：</h2><p>以上就是本文的内容了，<strong>其实大概分清他们的区别，以后碰到这类型问题，知道需要用哪个属性来解决就好了</strong>。</p>
<p><strong>最后</strong>：因为我经常看不懂别人写的分享，所以个人写文比较偏小白，写的不好之处，欢迎指点。然后就是希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持！<br><strong>ps</strong>：目前<strong>待业</strong>，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>参考链接：</p>
<p><a href="http://www.zhangxinxu.com/wordpress/2015/11/diff-word-break-break-all-word-wrap-break-word/" target="_blank" rel="external">word-break:break-all和word-wrap:break-word的区别</a></p>
<p><a href="http://www.cnblogs.com/2050/archive/2012/08/10/2632256.html" target="_blank" rel="external">你真的了解word-wrap和word-break的区别吗？</a></p>
<p><a href="http://www.w3school.com.cn/cssref/pr_word-wrap.asp" target="_blank" rel="external">CSS3 word-wrap 属性</a></p>
<p><a href="http://www.w3school.com.cn/cssref/pr_word-break.asp" target="_blank" rel="external">CSS3 word-break 属性</a></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于js、jq零碎知识点]]></title>
      <url>/2017/10/11/%E5%85%B3%E4%BA%8Ejs%E3%80%81jq%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>本文都是我目前学到的一些比较零碎的知识点，也是相对偏一点的知识，这是第二篇。前后可能没有太大的相关性，需要的朋友可以过来参考下，喜欢的可以点个赞，希望对大家有所帮助。<strong>本文的受众是刚学前端，大手子可以跳过。</strong></p>
<h2 id="1-页面加载完成之后，才开始执行函数。"><a href="#1-页面加载完成之后，才开始执行函数。" class="headerlink" title="1.页面加载完成之后，才开始执行函数。"></a>1.页面加载完成之后，才开始执行函数。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(function() &#123;</div><div class="line">// 需要执行的js函数内容</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>背景：碰到一个JQ很复杂的函数，上面简化了的整体格式，这跟自执行函数又不太一样，之前没见过这种写法，查了蛮久之后才找到这方面的内容，在这里分享一波。</p>
<h3 id="jQuery-事件-ready-方法"><a href="#jQuery-事件-ready-方法" class="headerlink" title="jQuery 事件 -ready() 方法"></a>jQuery 事件 -ready() 方法</h3><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>当 DOM（文档对象模型） 已经加载，并且页面（包括图像）已经完全呈现时，会<strong>发生 ready 事件</strong>。<br>ready() 函数规定当 <strong>ready 事件发生时执行的代码</strong>。<br>ready() 函数仅能用于当前文档，因此<strong>无需选择器</strong>。</p>
<h3 id="意思就是：当页面载入完毕之后就开始执行函数代码。"><a href="#意思就是：当页面载入完毕之后就开始执行函数代码。" class="headerlink" title="意思就是：当页面载入完毕之后就开始执行函数代码。"></a>意思就是：当页面载入完毕之后就开始执行函数代码。</h3><p>允许使用以下<strong>三种语法</strong>：</p>
<p>语法 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function)</div></pre></td></tr></table></figure></p>
<p>语法 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$().ready(function)</div></pre></td></tr></table></figure></p>
<p>语法 3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(function)</div></pre></td></tr></table></figure></p>
<p>js貌似也有一个这类型的方法，<strong>js方法</strong>如下：</p>
<p>window.onload = function() {<br>$(“table tr:nth-child(even)”).addClass(“even”); //这个是jquery代码<br>};</p>
<h3 id="js方法和jq方法的区别："><a href="#js方法和jq方法的区别：" class="headerlink" title="js方法和jq方法的区别："></a>js方法和jq方法的区别：</h3><p>当使用<strong>js方法</strong>的时候，会在整个页面的document全部加载完成以后执行。不幸的这种方式不仅要求页面的DOM tree全部加载完成，而且<strong>要求所有的外部图片和资源全部加载完成</strong>。更不幸的是，如<strong>果外部资源加载时间过长</strong>，例如图片需要很长时间来加载，那么这个js效果就会让用户感觉失效了，所以<strong>当这个情景下，使用这种方法的用户体验是非常差的</strong>。</p>
<p><strong>使用jquery方法：</strong>就仅仅只需要加载所有的<strong>DOM结构</strong>，在浏览器把所有的HTML放入DOM tree之前就执行js效果，包括在加载外部图片和资源之前。</p>
<h2 id="2-获取class和tag类型的dom节点，获取到的是一个对象数组"><a href="#2-获取class和tag类型的dom节点，获取到的是一个对象数组" class="headerlink" title="2.获取class和tag类型的dom节点，获取到的是一个对象数组"></a>2.获取class和tag类型的dom节点，获取到的是一个对象数组</h2><p>背景：写代码的时候，因为之前做css习惯性的用class来命名，然后直接获取了<strong>class，tagname类名节点</strong>，<strong>赋值</strong>的时候一直出错，查了好久最后，知道了class和tag类型的节点，因为<strong>不唯一性</strong>，所以获取节点的时候，返回的是一个<strong>对象数组</strong>。</p>
<p>ps：赋值出错是因为，数组对象赋值时<strong>不能直接</strong>a=b，要<strong>a[index]=b</strong>，因为这里获取class，tagName的dom节点<strong>，浏览器不知道class和tag在html里面有多少个</strong>（class、tag可以有多个），所以<strong>默认生成的是一个对象数组</strong>，所以当赋值的时候，要有相应的下标，否则就会出错。</p>
<h4 id="getElementsByClassName-w3c定义："><a href="#getElementsByClassName-w3c定义：" class="headerlink" title="getElementsByClassName()w3c定义："></a>getElementsByClassName()w3c定义：</h4><p>getElementsByClassName() 方法返回文档中<strong>所有指定类名的元素集合</strong>，作为 NodeList 对象。<br><strong>NodeList 对象</strong>代表一个有顺序的节点列表。<br>我们可通过节点列表中的<strong>节点索引号</strong>来访问列表中的节点(索引号由0开始)。</p>
<h3 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h3><p>因为<strong>id的唯一性质</strong>（同一个html里面只能取一个相同的id），<strong>没特殊情况最好用id命名，并且用id获取dom，</strong>这样不容易出错，就算写css习惯性的采用class，也可以再标签里面再加一段id=”名字”。</p>
<hr>
<h2 id="3-变量作用域，参数传递不进去。"><a href="#3-变量作用域，参数传递不进去。" class="headerlink" title="3.变量作用域，参数传递不进去。"></a>3.变量作用域，参数传递不进去。</h2><p>背景：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/861f21343e72acc58b98" alt=""></p>
<p>这种情况是作用域的问题，上面定义的变量是全局变量，在虽然是一个闭包，但是应该可以使用全局的变量，回一级一级往上找这个变量。这里不太清楚为什么会没有找到？</p>
<p>然而，虽然不太清楚中间发生了什么，但是最后问题还是成功的解决了。</p>
<h3 id="全局的window对象"><a href="#全局的window对象" class="headerlink" title="全局的window对象"></a>全局的window对象</h3><p>JavaScript中的<strong>任何一个全局函数或变量都是window的属性</strong>，可以是使用如下方法获取dom，并且操作dom。</p>
<p>栗子1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var name=&quot;这里是测试&quot;;</div><div class="line">    document.write(window.name);//输出name的内容</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>实际应用如下：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/4b68ec3b72d3da9cca16" alt="上图中变量作用域的问题"></p>
<h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p>当你层次嵌套多层之后，<strong>取不到变量或对象的时候</strong>，就可以<strong>使用window全局对象</strong>的方法，来<strong>传递参数</strong>，使其成功连接。</p>
<p>找不到关于这方面的比较详细的资料，大伙儿就记住这个方法就好了。</p>
<hr>
<h2 id="换行符和占位符在字符串里面正常生效"><a href="#换行符和占位符在字符串里面正常生效" class="headerlink" title="换行符和占位符在字符串里面正常生效"></a>换行符和占位符在字符串里面正常生效</h2><h3 id="效果如图："><a href="#效果如图：" class="headerlink" title="效果如图："></a>效果如图：</h3><p><img src="https://dn-mhke0kuv.qbox.me/5d96e241836866c4e36e" alt=""></p>
<p>如图，占位符和换行符<strong>在字符串中正常生效</strong>，不会变成字符串。其他的我不知道，反正这两个亲测可行，个人觉得蛮神奇，一直以为会变成字符串。</p>
<p>评论区还有一种说法，意思是说在字符串中使用特殊符号，在<strong>输出的时候可以起效果</strong>，然而将特殊符号作为一个值来计算，或者是当做一个变量来使用的话，这种情况下就会出错！so，我们还是<strong>不要用特殊符号乱搞事情</strong>，输出的时候使用即可，而且好像应用场景也就输出的时候，应该没有什么其他场景应用的到了吧？</p>
<p>大家可以看看：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/5580dc1061b8b6caf36c" alt=""></p>
<hr>
<h2 id="后话："><a href="#后话：" class="headerlink" title="后话："></a>后话：</h2><p>先记这些，以后学到了新的东西，累积起来，再发一些，这些都是我目前学到的一些比较零碎的知识点，也是相对偏一点的知识，再次强调一下是写给小白看的，让他们以后少踩些坑，小白们也多点参考资料。</p>
<p><strong>最后：</strong>希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。写的不好之处，欢迎指点。码字不易，感谢支持！<br><strong>ps</strong>：目前待业，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>以上。</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> jq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[range滑块自定义样式，步骤详解以及实际应用]]></title>
      <url>/2017/10/11/range%E6%BB%91%E5%9D%97%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%EF%BC%8C%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>本文的主要内容包括：type=”range”属性介绍，修改range默认css样式以及在js中的实际应用。本文面向前端小白，写的不好之处，请多多见谅。文末有demo链接，可以自行复制到本地进行试验。</p>
<p>相关：<a href="https://juejin.im/post/58f1f76e44d904006cf2482d" target="_blank" rel="external">自定义 range radio select的样式滑轮，按钮，选择框</a></p>
<h2 id="最终要实现的效果："><a href="#最终要实现的效果：" class="headerlink" title="最终要实现的效果："></a>最终要实现的效果：</h2><p><img src="https://dn-mhke0kuv.qbox.me/d6188c82f8938b287a45" alt="其中包括一部分js代码"></p>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="1-range属性相关介绍"><a href="#1-range属性相关介绍" class="headerlink" title="1.range属性相关介绍"></a>1.range属性相关介绍</h3><h3 id="2-搭建html结构；"><a href="#2-搭建html结构；" class="headerlink" title="2.搭建html结构；"></a>2.搭建html结构；</h3><h3 id="3-css样式修改，包括给滑动轨道添加样式、给滑块添加样式；"><a href="#3-css样式修改，包括给滑动轨道添加样式、给滑块添加样式；" class="headerlink" title="3.css样式修改，包括给滑动轨道添加样式、给滑块添加样式；"></a>3.css样式修改，包括给滑动轨道添加样式、给滑块添加样式；</h3><h3 id="4-添加相关js代码实现应用效果"><a href="#4-添加相关js代码实现应用效果" class="headerlink" title="4.添加相关js代码实现应用效果;"></a>4.添加相关js代码实现应用效果;</h3><h3 id="5-关于浏览器兼容。"><a href="#5-关于浏览器兼容。" class="headerlink" title="5.关于浏览器兼容。"></a>5.关于浏览器兼容。</h3><hr>
<h3 id="在html里面输入如下内容，即可使用："><a href="#在html里面输入如下内容，即可使用：" class="headerlink" title="在html里面输入如下内容，即可使用："></a>在html里面输入如下内容，即可使用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;range&quot;&gt;//这是最粗糙的使用方式</div></pre></td></tr></table></figure>
<h3 id="range在各个浏览器中的默认样式："><a href="#range在各个浏览器中的默认样式：" class="headerlink" title="range在各个浏览器中的默认样式："></a>range在各个浏览器中的默认样式：</h3><p><img src="https://dn-mhke0kuv.qbox.me/65f15ffd154ba761c1c5" alt=""></p>
<h3 id="range属性相关："><a href="#range属性相关：" class="headerlink" title="range属性相关："></a>range属性相关：</h3><p>range 输入类型用于应该包含指定范围值的输入字段。<br>range 类型显示为滑块。<br>您也可以设置可接受<strong>数字的范围限制：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;range&quot; name=&quot;points&quot; min=&quot;1&quot; max=&quot;10&quot; /&gt;//max为最大的值，min为最小的值</div></pre></td></tr></table></figure></p>
<h3 id="html5-range-类型的限定："><a href="#html5-range-类型的限定：" class="headerlink" title="html5 range 类型的限定："></a>html5 range 类型的限定：</h3><p><img src="https://dn-mhke0kuv.qbox.me/b6e9b9bcc9e0cfb67c33" alt="html5关于range的属性"></p>
<h3 id="HTML-DOM-Input-Range-对象（js获取dom）"><a href="#HTML-DOM-Input-Range-对象（js获取dom）" class="headerlink" title="HTML DOM Input Range 对象（js获取dom）"></a>HTML DOM Input Range 对象（js获取dom）</h3><p><img src="https://dn-mhke0kuv.qbox.me/81cefd16c36049964697" alt="js获取dom可以看看，到时可以查阅相关资料"></p>
<hr>
<h3 id="搭建html结构："><a href="#搭建html结构：" class="headerlink" title="搭建html结构："></a>搭建html结构：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;js-2-1section3&quot;&gt;</div><div class="line">    &lt;div class=&quot;js-2-1section3-div1&quot;&gt;</div><div class="line">        &lt;span class=&quot;js-2-1section3-div1-span1&quot;&gt;玩家人数&lt;/span&gt;</div><div class="line">        &lt;input type=&quot;text&quot; class=&quot;player-num&quot; id=&quot;player&quot;  value=&quot;6&quot;  max=&quot;18&quot; min=&quot;6&quot; onblur=&quot;on_change()&quot;&gt;</div><div class="line">         &lt;!--onblur是当对象失去焦点的时候执行的函数--&gt;</div><div class="line">        &lt;span class=&quot;js-2-1section3-div1-span1&quot;&gt;人&lt;/span&gt;</div><div class="line">    &lt;/div&gt;&lt;!--上面这部分是玩家人数方框的html--&gt;</div><div class="line">    &lt;div class=&quot;js-2-1section3-div2&quot;&gt;</div><div class="line">        &lt;button class=&quot;btn-sub&quot; id=&quot;btnSub&quot; onclick=&quot;less()&quot; &gt;&lt;/button&gt;&lt;!--减value的按钮--&gt;</div><div class="line">        &lt;input type=&quot;range&quot; class=&quot;slider-block&quot; id=&quot;slider&quot; max=&quot;18&quot; min=&quot;6&quot; step=&quot;1&quot; value=&quot;6&quot; onchange=&quot;moveChange()&quot;&gt;</div><div class="line">        &lt;!--onchange是当对象发生变化时执行的函数--&gt;</div><div class="line">        &lt;button class=&quot;btn-add&quot; id=&quot;btnAdd&quot;  onclick=&quot;plus()&quot;&gt;&lt;/button&gt;&lt;!--加value的按钮--&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><p>1.考虑到文章篇幅，html其他标签自行补全。</p>
<p>2.上面中，代码注释已经注释的很清楚了，<strong>不明白的多看几遍代码</strong>，然后也可以百度一下相关属性之类的。</p>
<p>3.<strong>滑块里面设置value=”6”的作用</strong>是浏览器进入时候滑块在最小值，也就是最左侧的地方，否则默认在中间</p>
<p>4.step=”1”意思是，滑块每次动态改变的数值。</p>
<p>5.关于代码中js部分，<strong>还没学js的小伙伴们，可以跳过，不影响修改滑块的默认样式的。</strong></p>
<p><img src="https://dn-mhke0kuv.qbox.me/faf23fe99426e4cb2a3e" alt="再放一下最终实现的效果，省的翻页麻烦"></p>
<h3 id="css样式修改："><a href="#css样式修改：" class="headerlink" title="css样式修改："></a>css样式修改：</h3><p>下面是玩家人数的css样式（不重要，可以跳过）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">    width: 50%;</div><div class="line">    margin:5rem auto 0;</div><div class="line">&#125;</div><div class="line">div&#123;</div><div class="line">    margin: 2rem;</div><div class="line">&#125;</div><div class="line">.js-2-1section3&#123;</div><div class="line">    background: #fff;&#125;</div><div class="line">.js-2-1section3-div1&#123;</div><div class="line">    margin-left: 2rem;&#125;</div><div class="line">.player-num&#123;</div><div class="line">    font-size: 1.8rem;</div><div class="line">    margin:0 0.6rem;</div><div class="line">    background: #f4f5f5;</div><div class="line">    padding: 0.2rem 0.6rem;</div><div class="line">    color: gold;</div><div class="line">    width: 9%;</div><div class="line">    border: none;</div><div class="line">    outline: none;</div><div class="line">&#125;</div><div class="line">span&#123;</div><div class="line">    display: inline-block;</div><div class="line">    font-size: 1.8rem;</div><div class="line">    color: #444;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.js-2-1section3-div2&#123;</div><div class="line">    display: flex;</div><div class="line">    justify-content: space-around;</div><div class="line">    align-items: center;</div><div class="line">    padding: 1.6rem 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*上面是玩家人数的css样式*/</div></pre></td></tr></table></figure></p>
<h3 id="修改滑块样式的css代码-重点-："><a href="#修改滑块样式的css代码-重点-：" class="headerlink" title="修改滑块样式的css代码(重点)："></a>修改滑块样式的css代码(重点)：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    #slider&#123; /*设置滑块下面那条线的样式*/</div><div class="line">        outline: none; /*去掉点击时出现的外边框*/</div><div class="line">        -webkit-appearance: none;</div><div class="line">        -moz-appearance: none;</div><div class="line">        appearance: none; /*这三个是去掉那条线原有的默认样式，划重点！！*/</div><div class="line">        width: 30%;</div><div class="line">        height: 0.3rem;</div><div class="line">        background: orange;</div><div class="line">        /*这三个是设置滑块下面那条线的样式*/</div><div class="line">    &#125;</div><div class="line">    input[type=&quot;range&quot;]::-webkit-slider-thumb &#123;</div><div class="line">        /*::-webkit-slider-thumb是代表给滑块的样式进行变更*/</div><div class="line">        -webkit-appearance: none;</div><div class="line">        -moz-appearance: none;</div><div class="line">        appearance: none; /*//这三个是去掉滑块原有的默认样式，划重点！！*/</div><div class="line">        -webkit-box-shadow:0 0 2px ; /*设置滑块的阴影*/</div><div class="line">        width: 2.6rem;</div><div class="line">        height:1.6rem;</div><div class="line">        background: url(&quot;images/js2-d_03.png&quot;);</div><div class="line">        background-size: cover;</div><div class="line">        /*//这几个是设置滑块的样式*/</div><div class="line">    &#125;</div><div class="line">    &lt;!--上面是修改滑块和滑块轨道的样式，下面是左右两边按钮的css样式--&gt;</div><div class="line"></div><div class="line">    .btn-sub&#123; /*这里是左边减按钮的css样式*/</div><div class="line">        outline: none;</div><div class="line">        border: none;</div><div class="line">        cursor: pointer;</div><div class="line">        background: url(&quot;images/js2-f_03.png&quot;);</div><div class="line">        background-size: 100%;</div><div class="line">        width: 1.8rem;</div><div class="line">        height: 1.8rem;</div><div class="line">    &#125;</div><div class="line">    .btn-add&#123; /*这里是右边+按钮的css样式*/</div><div class="line">        outline: none;</div><div class="line">        border: none;</div><div class="line">        cursor: pointer;</div><div class="line">        background: url(&quot;images/js2-e_03.png&quot;) no-repeat;</div><div class="line">        background-size: 100%;</div><div class="line">        width: 1.8rem;</div><div class="line">        height: 1.8rem;</div><div class="line">    &#125;</div><div class="line">&lt;!--css代码写的有点乱，见谅啊。--&gt;</div></pre></td></tr></table></figure>
<h3 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a>解析：</h3><p>1.代码注释里面已经很清楚了，不清楚多看几遍代码。<br>2.文末有demo链接，可以自行复制到本地进行试验。</p>
<p>以上是修改css样式到上面放的图片效果。</p>
<hr>
<h2 id="扩展：使用js完成实际应用"><a href="#扩展：使用js完成实际应用" class="headerlink" title="扩展：使用js完成实际应用"></a>扩展：使用js完成实际应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">  var oPlayerNum = document.getElementById(&quot;player&quot;);//玩家总人数</div><div class="line">var osliderBlock = document.getElementById(&quot;slider&quot;);//滑块的值</div><div class="line">function on_change() &#123;</div><div class="line">    if (oPlayerNum.value &gt;= 6 &amp;&amp; oPlayerNum.value &lt;= 18) &#123;//设置方框里面玩家人数范围</div><div class="line">        osliderBlock.value=oPlayerNum.value ;//将玩家总人数赋值给滑块的值，实现动态变化</div><div class="line">    &#125; else &#123;</div><div class="line">        alert(&quot;请输入正确的人数6~18&quot;);</div><div class="line">        oPlayerNum.value=6;</div><div class="line">        osliderBlock.value=6;</div><div class="line">//人数超出范围的话，弹出警告框，并且将方框和滑块的值重置为6</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function moveChange() &#123;// 滑块的值改变，运行这个函数</div><div class="line">    oPlayerNum.value=osliderBlock.value;</div><div class="line">    //滑块的值改变的话，滑块的值赋值给方框，实现动态变化</div><div class="line">&#125;</div><div class="line">function less() &#123;</div><div class="line">    oPlayerNum.value--;</div><div class="line">    //减的按钮，减掉玩家总人数的值</div><div class="line">    if (oPlayerNum.value&lt;6)&#123;</div><div class="line">        alert(&quot;人太少了，再找几个小伙伴来吧&quot;);</div><div class="line">        oPlayerNum.value=6;</div><div class="line">        //人数超出范围的话，弹出警告框，并且将方框和滑块的值重置为6</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        osliderBlock.value=oPlayerNum.value;// 将玩家人数赋值给滑轮的值</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function plus() &#123;</div><div class="line">    oPlayerNum.value++;</div><div class="line">    //加的按钮，减掉玩家总人数的值，上面的值已经相互关联了，所以方框的值改变，滑块的值也会改变</div><div class="line">    if (oPlayerNum.value&gt;18)&#123;</div><div class="line">        alert(&quot;人太多了，可以分一批人再开一局&quot;);</div><div class="line">        oPlayerNum.value=18;</div><div class="line">        //人数超出范围的话，弹出警告框，并且将方框和滑块的值重置为18</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        osliderBlock.value=oPlayerNum.value;// 将玩家人数赋值给滑轮的值</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ps：<br>1.特地重新再打一遍注释，注释里面说的蛮清楚了，还没学js的小伙伴别灰心，先mark起来，等以后学会了，再回头看看。<br>2.文末有demo链接，可以自行复制到本地进行试验。</p>
<h3 id="关于浏览器兼容的问题：还未完成的效果，滑块填充效果。"><a href="#关于浏览器兼容的问题：还未完成的效果，滑块填充效果。" class="headerlink" title="关于浏览器兼容的问题：还未完成的效果，滑块填充效果。"></a>关于浏览器兼容的问题：还未完成的效果，滑块填充效果。</h3><p>ps：关于浏览器兼容这块儿，还没研究好（下面有篇文章是讲<strong>浏览器兼容</strong>的）。<strong>以上只针对谷歌浏览器</strong>，因为range是html5新出的属性，w3c还没出标准属性，各个浏览器的方法不一样，这块儿有点麻烦。但我记在笔记里面了，今后研究清楚了，再回来更文。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/2d41f7daf7c2e9f145dc" alt="三个浏览器的不同效果"><br>关于滑块的填充效果，各个浏览器都不一样<strong>Chrome</strong>浏览器中不支持直接设置进度条，要借助js。而在IE 9以上的浏览器中可以使用::-ms-fill-lower 和 ::-ms-fill-upper来自定义进度条；在Firefox浏览器中则可以通过::-moz-range-progress来自定义；今天下午研究了一阵子，只弄出了一个ie的填充效果，没研究清楚，可能过段时间会再回来更新。（有兴趣的小伙伴可以研究一下，相互交流交流。）</p>
<p><img src="https://dn-mhke0kuv.qbox.me/9cb92093087cfbf62c1f.gif" alt="IE演示的"></p>
<h4 id="以下是I兼容E浏览器的滑块"><a href="#以下是I兼容E浏览器的滑块" class="headerlink" title="以下是I兼容E浏览器的滑块"></a>以下是I兼容E浏览器的滑块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*以下是I兼容E浏览器的滑块，还有一些问题，不过现在没空再弄了。等到有空了再解决清楚。*/</div><div class="line">      input[type=range]::-ms-fill-lower &#123;//::-ms-fill-lower这是ie兼容range的属性写法下面那个同理</div><div class="line">          /*进度条已填充的部分*/</div><div class="line">          height: 22px;</div><div class="line">          border-radius: 10px;</div><div class="line">          /*background: black;*/</div><div class="line">          background: linear-gradient(to right, #059CFA, white 100%, white);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      input[type=range]::-ms-fill-upper &#123;</div><div class="line">          /*进度条未填充的部分*/</div><div class="line">          height: 22px;</div><div class="line">          border-radius: 10px;</div><div class="line">          background: red;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>这里有篇关于range的文章，里面有<strong>浏览器兼容</strong>的内容，我没弄清楚：<a href="http://blog.csdn.net/u013347241/article/details/51560290" target="_blank" rel="external">自定义(滑动条)input[type=”range”]样式</a></p>
<p><strong>range-demo链接</strong>：<a href="https://obkoro1.github.io/article-demo/diy-style/range-diy.html" target="_blank" rel="external">https://obkoro1.github.io/article-demo/diy-style/range-diy.html</a></p>
<h2 id="后话："><a href="#后话：" class="headerlink" title="后话："></a>后话：</h2><p>昨天说好的要详细更新，range、radio、select这三类的文章，今天如约更好了range部分，后面几天应该还会持续更文。不说了，要打球去了^_^。</p>
<p><strong>最后：</strong>希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。写的不好之处，欢迎指点。码字不易，感谢支持！<br><strong>ps</strong>：目前待业，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>以上。2017.4.16</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(干货)css自定义 range  radio select的样式滑轮，按钮，选择框]]></title>
      <url>/2017/10/11/%E5%B9%B2%E8%B4%A7-css%E8%87%AA%E5%AE%9A%E4%B9%89-range-radio-select%E7%9A%84%E6%A0%B7%E5%BC%8F%E6%BB%91%E8%BD%AE%EF%BC%8C%E6%8C%89%E9%92%AE%EF%BC%8C%E9%80%89%E6%8B%A9%E6%A1%86/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>之前踩坑css的时候，遇到滑轮，按钮，选择框这类型的东西，<strong>为了页面效果，总是需要自定义他们的样式</strong>，而不使用他们的默认样式。当时写的时候，我也是蛮头疼的，弄了个demo，链接在下面。对此做个总结。本文是<strong>面向前端小白</strong>的，大手子可以跳过，写的不好之处多多见谅。</p>
<p>额，今天就先大概的将代码贴上来，考虑到篇幅的问题，就先写一下三个的实现方式，一般也都看得懂，代码注释的非常详细。因为<strong>细分下来内容也很多</strong>，准备之后再将如何实现的方式，属性，优化以及如何兼容各个浏览器的方式一步步的写出来。</p>
<h3 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h3><p><img src="https://dn-mhke0kuv.qbox.me/a55ee3f7972d106aa085" alt="文章下面有demo链接"></p>
<h3 id="如何使用这些属性？"><a href="#如何使用这些属性？" class="headerlink" title="如何使用这些属性？"></a>如何使用这些属性？</h3><p>用法很简单，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;range&quot;&gt;//滑动条</div><div class="line">&lt;input type=&quot;radio&quot;&gt;//按钮</div><div class="line">&lt;select&gt;//选择框</div></pre></td></tr></table></figure>
<h2 id="input-type-”range”样式修改："><a href="#input-type-”range”样式修改：" class="headerlink" title="input type=”range”样式修改："></a>input type=”range”样式修改：</h2><p><img src="https://dn-mhke0kuv.qbox.me/e1a2344d909082c1646d" alt="滑块的默认样式"><br><img src="https://dn-mhke0kuv.qbox.me/e34fb2c8622acdc68f79" alt="滑块修改后的实现效果"></p>
<h3 id="html-content"><a href="#html-content" class="headerlink" title="html content"></a>html content</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line"> &lt;input type=&quot;range&quot; class=&quot;slider-block&quot; id=&quot;slider&quot; max=&quot;18&quot; min=&quot;6&quot; step=&quot;1&quot; value=&quot;6&quot;&gt;</div><div class="line">    &lt;!--主要是一个type=&quot;range&quot;属性,其他的会在细分的文章里面讲出来--&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="csscontent"><a href="#csscontent" class="headerlink" title="csscontent"></a>csscontent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.slider-block&#123;</div><div class="line">            outline: none; /*去掉点击时出现的外边框*/</div><div class="line">            -webkit-appearance: none;</div><div class="line">            -moz-appearance: none;</div><div class="line">            appearance: none; /*这三个是去掉那条线原有的默认样式，划重点！！*/</div><div class="line">            width: 30%;</div><div class="line">            height: 0.3rem;</div><div class="line">            background: orange; /*这三个是设置滑块下面那条线的样式*/</div><div class="line">        &#125;</div><div class="line">        input[type=&quot;range&quot;]::-webkit-slider-thumb &#123;</div><div class="line">            /*::-webkit-slider-thumb是代表给滑块的样式进行变更*/</div><div class="line">            -webkit-appearance: none;</div><div class="line">            -moz-appearance: none;</div><div class="line">            appearance: none; /*//这三个是去掉滑块原有的默认样式，划重点！！*/</div><div class="line">            -webkit-box-shadow:0 0 2px ;/*设置滑块的阴影*/</div><div class="line">            width: 2.6rem;</div><div class="line">            height:1.6rem;</div><div class="line">            background: url(&quot;images/js2-d_03.png&quot;);</div><div class="line">            background-size: cover; /*//这几个是设置滑块的样式*/</div><div class="line">        &#125;</div><div class="line">        //文章下面有demo链接</div></pre></td></tr></table></figure>
<h3 id="文章下面有demo链接"><a href="#文章下面有demo链接" class="headerlink" title="文章下面有demo链接"></a>文章下面有demo链接</h3><p>代码里面注释关键点都写了，还不能理解的，可以看下demo。</p>
<hr>
<h2 id="input-type-”radio”修改默认样式"><a href="#input-type-”radio”修改默认样式" class="headerlink" title="input type=”radio”修改默认样式"></a>input type=”radio”修改默认样式</h2><p><img src="https://dn-mhke0kuv.qbox.me/8a473392afc4c904a8af" alt="按钮的默认样式"><br><img src="https://dn-mhke0kuv.qbox.me/fddc27c19c39b6e3068b" alt="radio修改后的实现效果"></p>
<h3 id="html-content-1"><a href="#html-content-1" class="headerlink" title="html content"></a>html content</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;form class=&quot;task10-main-box-shape&quot; method=&quot;post&quot; action=&quot;#&quot;&gt;</div><div class="line">    &lt;!--//表单元素基本上都要加form，传送的参数的方式，传递的位置，这是一个好习惯--&gt;</div><div class="line"></div><div class="line">&lt;div&gt;</div><div class="line">    &lt;input id=&quot;shape1&quot; name=&quot;box-shape&quot; type=&quot;radio&quot;  checked=&quot;checked&quot; value=&quot;shape1&quot; /&gt;</div><div class="line">    &lt;!--checked属性是当页面载入的时候选择这个按钮，value是传送的值--&gt;</div><div class="line">    &lt;label for=&quot;shape1&quot;&gt;对口箱&lt;/label&gt;&lt;!--/加label标签点击这个字的时候，可以选中按钮--&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h4 id="css样式这里相对难点，但我注释的已经很多了。"><a href="#css样式这里相对难点，但我注释的已经很多了。" class="headerlink" title="css样式这里相对难点，但我注释的已经很多了。"></a>css样式这里相对难点，但我注释的已经很多了。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">.task10-main-box-shape input[type=&quot;radio&quot;]&#123;</div><div class="line">    display: none;</div><div class="line">    /*隐藏默认按钮的样式,这跟其他隐藏默认按钮的样式的方法不一样，注意一下*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">.task10-main-box-shape label&#123;  /*这里是设置文字的样式*/</div><div class="line">        display: inline-block;</div><div class="line">        cursor: pointer;</div><div class="line">        position: relative;</div><div class="line">        padding-left: 3rem;</div><div class="line">        margin-right: 6rem;</div><div class="line">        font-size: 1.8rem;</div><div class="line">        color: rgb(102,102,102);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    .task10-main-box-shape label:before &#123; /*这里是没被选中时候按钮的样式*/</div><div class="line">        content: &quot;&quot;;</div><div class="line">        /*将要自定义的东西设置为空的字符串，就可以往里面随意加定义的样式了*/</div><div class="line">        display: inline-block;</div><div class="line">        background-color: #FFFFFF; /*设置背景*/</div><div class="line">        padding:0.45em; /*撑开背景，就是中间那块白色的*/</div><div class="line">        border: 1px solid gray;</div><div class="line">        margin-right: 10px;</div><div class="line">        position: absolute;</div><div class="line">        left: 0;</div><div class="line">        bottom: 3px;</div><div class="line">        border-radius: 50%; /*设置圆角*/</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    input[type=radio]:checked + label:before &#123;/*按钮被选中之后的样式，多了一个checked*/</div><div class="line">        font-size: 1px;</div><div class="line">        color: #FFFFFF;</div><div class="line">        border:0.7rem solid rgb(29,122,217);</div><div class="line">        /*设置按钮样式*/</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="select修改默认样式"><a href="#select修改默认样式" class="headerlink" title="select修改默认样式"></a>select修改默认样式</h2><p><img src="https://dn-mhke0kuv.qbox.me/5a226ede690f8b9a9a56" alt="选择框的默认初始样式"><br><img src="https://dn-mhke0kuv.qbox.me/bd148502090aea355bdd" alt="select修改后的实现效果">### html cantent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;select class=&quot;task10-main-box-row2-select&quot;&gt;</div><div class="line">        &lt;option&gt;查看详情&lt;/option&gt;</div><div class="line">        &lt;option&gt;我也不知道&lt;/option&gt;</div><div class="line">        &lt;option&gt;详情是什么&lt;/option&gt;</div><div class="line">    &lt;/select&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="css-cantent"><a href="#css-cantent" class="headerlink" title="css cantent"></a>css cantent</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.task10-main-box-row2-select&#123;</div><div class="line">        font-size: 1.6rem;</div><div class="line">        color: rgb(153,153,153);</div><div class="line">        padding: 0.3% 2% 0.3% 1%;</div><div class="line">        margin: 0; /*这里是选择框里面的样式*/</div><div class="line">        background: url(&quot;images/task10-d_03.png&quot;) no-repeat 97%;</div><div class="line">        /*97%是设置图片，也就是三角形的位置*/</div><div class="line">        background-size:20%; /*背景图片的尺寸*/</div><div class="line">        appearance:none;</div><div class="line">        -moz-appearance:none;</div><div class="line">        -webkit-appearance:none; /*这三个是隐藏默认样式*/</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>ps:css样式写的有点乱，各位看官，将就着看看，下面有demo链接。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说这类型的<strong>首先需要将样式隐藏掉，然后再自行添加需要的类型</strong>，但是有些隐藏样式的方式也不同，有些是这种，<code>appearance:none;
            -moz-appearance:none;
            -webkit-appearance:none;</code>像radio按钮的，反而是<code>display:none;</code>这种类型的。还有的样式可以写的很好看，比如滑块怎么移动的时候，填充条跟着移动。<strong>会的大家都会，要琢磨的精，会别人不会的，才是你身价所在。</strong></p>
<hr>
<h2 id="后话："><a href="#后话：" class="headerlink" title="后话："></a>后话：</h2><p>连续一个多星期不睡午觉，终于熬不住了。感觉身体被掏空，以后就改为下午的时候更文。因为一些事情耽搁了，直到晚上才弄好。下面几天会逐渐把这几个<strong>如何实现的方式，属性，优化以及如何兼容各个浏览器的方式</strong>一步步的写出来，链接会放在文末的。</p>
<p>假装这里有三个链接。<br><a href="https://juejin.im/post/58f2f43c61ff4b0058f4b5c5" target="_blank" rel="external">range滑块自定义样式，步骤详解以及实际应用</a></p>
<p><strong>最后：</strong>希望看完的朋友点个<strong>喜欢</strong>，也可以<strong>关注</strong>一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：目前待业，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>demo链接：<a href="https://obkoro1.github.io/article-demo/diy-style/diyStyle.html" target="_blank" rel="external">https://obkoro1.github.io/article-demo/diy-style/diyStyle.html</a></p>
<p>以上，2017.4.16.</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> range  radio select css样式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于 CSS 的零碎知识点]]></title>
      <url>/2017/10/11/%E5%85%B3%E4%BA%8E-CSS-%E7%9A%84%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>这篇文章是本人学习过程中遇到css的零碎知识点2（就是以前自己不知道的），我都记下来了，需要的朋友可以过来参考下，喜欢的可以点个赞，希望对大家有所帮助。<strong>本文的受众是前端小白，大手子可以跳过。</strong></p>
<h3 id="1-scss编译css文件使用中文注释出现乱码："><a href="#1-scss编译css文件使用中文注释出现乱码：" class="headerlink" title="1.scss编译css文件使用中文注释出现乱码："></a>1.scss编译css文件使用中文注释出现乱码：</h3><p><img src="https://dn-mhke0kuv.qbox.me/428897e0e0f518229d87" alt=""></p>
<h4 id="在文件开头部分加上：-charset-“UTF-8”"><a href="#在文件开头部分加上：-charset-“UTF-8”" class="headerlink" title="在文件开头部分加上：@charset “UTF-8”;"></a>在文件开头部分加上：@charset “UTF-8”;</h4><p><strong>注意：</strong>这里必须要加在文件开头部分，加在文件中部和结尾部分是无效的。</p>
<hr>
<h3 id="2-HTML-input标签的-maxlength-属性"><a href="#2-HTML-input标签的-maxlength-属性" class="headerlink" title="2.HTML input标签的 maxlength 属性"></a>2.HTML input标签的 maxlength 属性</h3><h4 id="定义和用法："><a href="#定义和用法：" class="headerlink" title="定义和用法："></a>定义和用法：</h4><p>maxlength 属性规定<strong>输入字段的最大长度</strong>，以字符个数计。<br>maxlength 属性与 input type=”text” 或 input type=”password” 配合使用。</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><del>这里所说的以字符个数计算，中文是占两个字符，字母和数字都是占一个字符，但是我实际使用过程中，input里面<strong>无论中文，英文字母，数字</strong>，都可以输入<strong>相同长度</strong>，也就是说这是一个bug？？？</del></p>
<p><img src="https://dn-mhke0kuv.qbox.me/bfbe366aca62322e9c6e" alt="我知道没有图你们是不会信的"></p>
<p><img src="https://dn-mhke0kuv.qbox.me/a9ab1b62da1421aa4596" alt=""></p>
<p>上面是我先前的理解，经过评论区朋友的指点，发现原先的理解事错的，回来更正一下。</p>
<p><strong>字节不等同于字符，字节不等同于字符，字节不等同于字符，</strong></p>
<h4 id="汉字占两个字节，但是只占了一个字符，所以属性没毛病，是我之前理解错了"><a href="#汉字占两个字节，但是只占了一个字符，所以属性没毛病，是我之前理解错了" class="headerlink" title="汉字占两个字节，但是只占了一个字符，所以属性没毛病，是我之前理解错了"></a>汉字占两个字节，但是只占了一个字符，所以属性没毛病，是我之前理解错了</h4><p>这里有一个用JS限制文本框所输入字符串的最大字节数的办法有兴趣可以看一下：<a href="http://blog.sina.com.cn/s/blog_815611fb0101jkah.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_815611fb0101jkah.html</a></p>
<p>ps：其实我也不知道有什么用，可能有些场景对这些规定的比较死，才能用的到，你们就蛮看一下。。</p>
<hr>
<h3 id="3-背景图片如何居中："><a href="#3-背景图片如何居中：" class="headerlink" title="3.背景图片如何居中："></a>3.背景图片如何居中：</h3><p>background：url center no-repeat；只要在这里加个center就可以使背景图片垂直水平居中了</p>
<p><img src="https://dn-mhke0kuv.qbox.me/82d5accda1696d48355a" alt=""></p>
<p>实际上这里是用了 <strong>background-position</strong>属性。</p>
<h4 id="background-position定义和用法"><a href="#background-position定义和用法" class="headerlink" title="background-position定义和用法"></a>background-position定义和用法</h4><p><img src="https://dn-mhke0kuv.qbox.me/1b676858cbca83c8e902" alt="太多了，放个图片自己看一看。"></p>
<h3 id="4-css样式最好不要把宽度定死了，这样会导致页面缩小的时候超出范围。"><a href="#4-css样式最好不要把宽度定死了，这样会导致页面缩小的时候超出范围。" class="headerlink" title="4.css样式最好不要把宽度定死了，这样会导致页面缩小的时候超出范围。"></a>4.css样式最好不要把宽度定死了，这样会导致页面缩小的时候超出范围。</h3><p>这个问题太low，我就不放栗子了。</p>
<p>说明：当你某个div或者head，body哪里宽度定死了之后，查看手机自适应的时候，就很容易出现横向滚动条，是因为页面缩小之后，你<strong>宽度定死的那个部分没有跟随其他部分按照相同比例缩小</strong>，虽然那个部分也是缩小了，但是缩小的比例不对。</p>
<hr>
<h3 id="5-字体间距"><a href="#5-字体间距" class="headerlink" title="5.字体间距"></a>5.字体间距</h3><p>letter-spacing</p>
<p>所有浏览器都支持 letter-spacing 属性。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/7fbf9ab532614cf41346" alt=""></p>
<p>蛮看一下，稍微记下，这个还是蛮偏的</p>
<p><strong>使用场景：</strong>有时候留白部分太多，看起来空空荡荡的，或者字体过小，不易阅读，此时可以使用这个属性。<strong>允许使用负值</strong>，有时候字体之间的距离也会更大，这时使用负值会让字母之间挤得更紧。</p>
<h2 id="后话："><a href="#后话：" class="headerlink" title=" 后话："></a> 后话：</h2><p>先记这些，以后学到了新的东西，累积起来，再发一些，这些都是我写页面期间遇到的问题，再次强调一下是写给小白看的，让他们以后少踩些坑，小白们也多点参考资料。</p>
<p><strong>最后：</strong>希望看完的朋友点个喜欢，也可以关注一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：目前待业，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>以上。2017.4.14.</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js原生dom对象和jQuery对象可以混合使用吗？]]></title>
      <url>/2017/10/11/js%E5%8E%9F%E7%94%9Fdom%E5%AF%B9%E8%B1%A1%E5%92%8CjQuery%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8%E5%90%97%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h3 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h3><p>本文主要内容包括<strong>js原生dom对象和jQuery对象的区别，联系，相互转换，以及踩坑经历</strong>。情况是这样的，今天在实现一个js验证码的功能，需要获取input的值，然后我用jQuery的方法获取到了dom节点，然后用原生js获取input的值，结果就出错了，好在后来场外求助启宸欧巴在师兄的帮助下发现问题所在，并成功解决。将今天的踩坑经历，以及网上查阅的资料，集合成一篇文章，分享一波。</p>
<h2 id="Dom原生对象和jQuery对象的区别："><a href="#Dom原生对象和jQuery对象的区别：" class="headerlink" title="Dom原生对象和jQuery对象的区别："></a>Dom原生对象和jQuery对象的区别：</h2><p><strong>1.</strong>jquery选择器得到的jquery对象和标准的 javascript中的document.getElementById()取得的dom对象是<strong>两种不同的对象类型，两者不等价</strong>；</p>
<p><strong>注：</strong>js原生获取的dom是一个对象，jQuery对象就是一个数组对象，其实就是选择出来元素的数组集合。所以说他们两者是不同的对象类型不等价。</p>
<h4 id="2-jQuery无法使用DOM对象的任何方法，同理DOM对象也不能使用jQuery里的方法-乱使用会报错。"><a href="#2-jQuery无法使用DOM对象的任何方法，同理DOM对象也不能使用jQuery里的方法-乱使用会报错。" class="headerlink" title="2.jQuery无法使用DOM对象的任何方法，同理DOM对象也不能使用jQuery里的方法. 乱使用会报错。"></a>2.jQuery无法使用DOM对象的任何方法，同理DOM对象也不能使用jQuery里的方法. 乱使用会报错。</h4><h4 id="例如（文章下面有两个踩坑经历。）："><a href="#例如（文章下面有两个踩坑经历。）：" class="headerlink" title="例如（文章下面有两个踩坑经历。）："></a>例如（文章下面有两个踩坑经历。）：</h4><p>　　$(“#id”).html();<br>　　document.getElementById(“id”).innerHTML;<br>　　意思是指：获取ID为id的元素内的html代码。这两段代码<strong>结果相同，但中间的取值过程不同</strong>。<br>　　即：$(“#id”).innerHTML、document.getElementById(“id”).html()之类的写法都是错误的。</p>
<p><strong>注：</strong>jQuery是从js衍生出来的，师出同源，但是jQuery是<strong>经过一系列操作</strong>之后，将其封装成了一个个不同的方法，学习jQuery开始就应当树立正确的观念，分清jQuery对象和DOM对象之间的区别，之后学习 jQuery就会轻松很多的。</p>
<hr>
<h3 id="js-dom对象和jQuery对象相互转换："><a href="#js-dom对象和jQuery对象相互转换：" class="headerlink" title="js-dom对象和jQuery对象相互转换："></a>js-dom对象和jQuery对象相互转换：</h3><p>　　<strong>jQuery对象转成DOM对象</strong>—两种转换方式：[index]和.get(index)<br>　　<br>　　1、<strong>jQuery对象是一个数据对象</strong>，通过[index]的方法（就是<strong>通过下标索引寻找dom</strong>，进行操作）<br>　　如：var $v = $(“#v”) ;    //jQuery对象<br>　　var v = $v[0]; //DOM对象<br>　　alert(v.checked) //检测这个checkbox是否被选中<br>　　2、jQuery本身提供，<strong>通过.get(index)方法</strong><br>　　如：var $v = $(“#v”); //jQuery对象<br>　　var v = $v.get(0); //DOM对象<br>　　alert(v.checked) //检测这个checkbox是否被选中<br>　　<br>　　<strong>注：</strong>其实两者都是同一个道理，即通过索引下标的方式，来寻找dom进行转换。</p>
<p>　　 <strong>DOM对象转成jQuery对象:</strong><br>　　对于DOM对象，只需用$()把<strong>DOM对象包装起来</strong>，就可得到jQuery对象<br>　　如：var v=document.getElementById(“v”); //DOM对象<br>　　var $v=$(v); //jQuery对象</p>
<h2 id="踩坑经历："><a href="#踩坑经历：" class="headerlink" title="踩坑经历："></a>踩坑经历：</h2><h3 id="今天出错的问题："><a href="#今天出错的问题：" class="headerlink" title="今天出错的问题："></a>今天出错的问题：</h3><h4 id="出错代码："><a href="#出错代码：" class="headerlink" title="出错代码："></a>出错代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var randomCode=$(&quot;#js5-authCode&quot;).value;//用jq获取dom，用js获取值。</div><div class="line">//console的时候，这里会出现undefined。</div></pre></td></tr></table></figure>
<h4 id="正确的应该："><a href="#正确的应该：" class="headerlink" title="正确的应该："></a>正确的应该：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var randomCode=$(&quot;#js5-authCode&quot;).val();//这里的val()是jq的一种方法。</div></pre></td></tr></table></figure>
<h3 id="再举个栗子："><a href="#再举个栗子：" class="headerlink" title="再举个栗子："></a>再举个栗子：</h3><p>$(“#id”).innerHTML）、document.getElementById(“id”).html()。</p>
<p>出错点：第一个是用jq获取dom，然后用js操作。第二个是用js获取dom，然后用jq进行操作</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="框架之类的东西都是封装好了的一个个函数，中间会经历一些操作，中间的取值过程也是不同，所以我们写代码的时候尽量使用同一种方式来写，不能混合使用，大概就是酱样子。"><a href="#框架之类的东西都是封装好了的一个个函数，中间会经历一些操作，中间的取值过程也是不同，所以我们写代码的时候尽量使用同一种方式来写，不能混合使用，大概就是酱样子。" class="headerlink" title="框架之类的东西都是封装好了的一个个函数，中间会经历一些操作，中间的取值过程也是不同，所以我们写代码的时候尽量使用同一种方式来写，不能混合使用，大概就是酱样子。"></a>框架之类的东西都是封装好了的一个个函数，中间会经历一些操作，中间的取值过程也是不同，所以我们写代码的时候尽量使用同一种方式来写，不能混合使用，大概就是酱样子。</h3><p>参考资料：<br><a href="http://www.cnblogs.com/libinblog/p/4239258.html" target="_blank" rel="external">Js - Dom原生对象和jQuery对象的联系、区别、相互转换</a><br><a href="http://blog.csdn.net/gtsjx/article/details/52396379" target="_blank" rel="external">DOM对象与jQuery对象的理解与分析</a></p>
<p><strong>最后：</strong>希望看完的朋友点个喜欢，也可以关注一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：目前待业，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>以上。2017.4.13</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你知道渐进增强和优雅降级吗？[css3兼容性写法]]]></title>
      <url>/2017/10/11/%E4%BD%A0%E7%9F%A5%E9%81%93%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA%E5%92%8C%E4%BC%98%E9%9B%85%E9%99%8D%E7%BA%A7%E5%90%97%EF%BC%9F-css3%E5%85%BC%E5%AE%B9%E6%80%A7%E5%86%99%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h1><p>在前端开发的过程中，如果有注意的话，发现有些写css3属性时，<strong>兼容性的写法顺序</strong>不太一样，比如transition属性，有些把transition放在前面有些是放在后面，这就引出了两个概念：优雅降级和渐进增强。</p>
<p><strong>写法栗子：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.transition &#123; /*渐进增强写法*/</div><div class="line">  -webkit-transition: all .5s;</div><div class="line">     -moz-transition: all .5s;</div><div class="line">       -o-transition: all .5s;</div><div class="line">          transition: all .5s;</div><div class="line">&#125;</div><div class="line">.transition &#123; /*优雅降级写法*/</div><div class="line">          transition: all .5s;</div><div class="line">       -o-transition: all .5s;</div><div class="line">     -moz-transition: all .5s;</div><div class="line">  -webkit-transition: all .5s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="渐进增强和优雅降级概念出现的原因："><a href="#渐进增强和优雅降级概念出现的原因：" class="headerlink" title="渐进增强和优雅降级概念出现的原因："></a>渐进增强和优雅降级概念出现的原因：</h2><p>翻看进度条，会发现渐进增强和优雅降级这两个概念是在 CSS3 出现之后火起来的。由于低级浏览器不支持 CSS3，但是 CSS3 特效太优秀不忍放弃，所以产生了的一种解决方式<strong>在高级浏览器中使用CSS3，而在低级浏览器只保证最基本的功能</strong>。</p>
<h3 id="何谓渐进增强："><a href="#何谓渐进增强：" class="headerlink" title="何谓渐进增强："></a>何谓渐进增强：</h3><p>渐进增强（Progressive Enhancement）：一开始就<strong>针对低版本浏览器</strong>进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</p>
<h3 id="何谓优雅降级："><a href="#何谓优雅降级：" class="headerlink" title="何谓优雅降级："></a>何谓优雅降级：</h3><p>优雅降级（Graceful Degradation）：一开始就构建<strong>站点的完整功能</strong>，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。</p>
<hr>
<h3 id="支持渐进增强和优雅降级背后的思维是什么："><a href="#支持渐进增强和优雅降级背后的思维是什么：" class="headerlink" title="支持渐进增强和优雅降级背后的思维是什么："></a>支持渐进增强和优雅降级背后的思维是什么：</h3><h4 id="两者之间的微妙差别："><a href="#两者之间的微妙差别：" class="headerlink" title="两者之间的微妙差别："></a>两者之间的微妙差别：</h4><p>在本质上：“它们是看待同种事物的两种观点”，“优雅降级”和“渐进增强”的目的都是关注<strong>不同浏览器下的不同体验</strong>，但是它们侧重点不同，所以导致了工作流程上的不同。</p>
<p><strong>渐进增强观点</strong>认为应关注于<strong>内容本身</strong>。请注意其中的差别：我甚至连“浏览器”三个字都没提。内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得渐进增强成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>
<p><strong>优雅降级观点</strong>认为应该针对那些<strong>最高级、最完善的浏览器来设计网站</strong>。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此<strong>除了修复较大的错误之外，其它的差异将被直接忽略</strong>。</p>
<h2 id="别说话，看图："><a href="#别说话，看图：" class="headerlink" title="别说话，看图："></a>别说话，看图：</h2><p><img src="https://dn-mhke0kuv.qbox.me/ef73818a141751a53e40" alt=""></p>
<h3 id="工作流程上面的区别："><a href="#工作流程上面的区别：" class="headerlink" title="工作流程上面的区别："></a>工作流程上面的区别：</h3><p>1.渐进增强（progressive enhancement）：一开始只<strong>构建站点的最少特性，保证他们的内容</strong>，然后不断地<strong>对版本较高的浏览器追加不同的功能</strong></p>
<p>2.优雅降级（graceful degradation）：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，就是<strong>针对版本较低的浏览器</strong>进行测试和修复</p>
<p><strong>ps：</strong> 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带;</p>
<h3 id="广义和狭义："><a href="#广义和狭义：" class="headerlink" title="广义和狭义："></a>广义和狭义：</h3><p>1.<strong>广义：</strong>其实要定义一个基准线，在此之上的增强叫做渐进增强，在此之下的兼容叫优雅降级。</p>
<p>2.<strong>狭义：</strong>渐进增强一般说的是使用CSS3技术，在不影响老浏览器的正常显示与使用情形下来增强体验，而优雅降级则是体现html标签的语义，以便在js/css的加载失败/被禁用时，也不影响用户的相应功能。</p>
<h3 id="栗子："><a href="#栗子：" class="headerlink" title="栗子："></a>栗子：</h3><p>渐进增强的例子：</p>
<h3 id="1-来自张鑫旭大神的栗子。"><a href="#1-来自张鑫旭大神的栗子。" class="headerlink" title="1.来自张鑫旭大神的栗子。"></a>1.来自张鑫旭大神的栗子。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.transition &#123; /*渐进增强写法*/</div><div class="line">  -webkit-transition: all .5s;</div><div class="line">     -moz-transition: all .5s;</div><div class="line">       -o-transition: all .5s;</div><div class="line">          transition: all .5s;</div><div class="line">&#125;</div><div class="line">.transition &#123; /*优雅降级写法*/</div><div class="line">          transition: all .5s;</div><div class="line">       -o-transition: all .5s;</div><div class="line">     -moz-transition: all .5s;</div><div class="line">  -webkit-transition: all .5s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>*前缀CSS3（-webkit- / -moz- / -o-</em>）和正常CSS3在浏览器中的支持情况是这样的：</p>
<p>1.很久以前：浏览器前缀CSS3和正常CSS3都不支持；<br>2.不久之前：浏览器只支持前缀CSS3，不支持正常CSS3；<br>3.现在：浏览器既支持前缀CSS3，又支持正常CSS3；<br>4.未来：浏览器不支持前缀CSS3，仅支持正常CSS3.</p>
<h4 id="ps：从这里可以引申到其他有前缀的css3的属性，不要局限在这个属性里。"><a href="#ps：从这里可以引申到其他有前缀的css3的属性，不要局限在这个属性里。" class="headerlink" title="ps：从这里可以引申到其他有前缀的css3的属性，不要局限在这个属性里。"></a>ps：从这里可以引申到其他有前缀的css3的属性，不要局限在这个属性里。</h4><p>优雅降级的例子：</p>
<p>4.假如你写了一个表单，没有用到input type=”submit”表单元素，用了一个a标签的click事件做提交，但如果Javascript被禁用了怎么办？<br>使用如下的文档结构，就可以在javascript被禁用时，依然可以提交。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;</div><div class="line">    &lt;input type=&quot;text&quot;&gt;</div><div class="line">    &lt;input type=&quot;submit&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>优雅降级需要正确地体现HTML标签的语义，符合“浏览器的预期”。<strong>让你的网页在各种情况</strong>—下——包括降级（javascript被禁用，css传输失败等等）的情形都可以<strong>运作良好</strong>。这是我理解的<strong>优雅降级的意义</strong>。</p>
<h2 id="在网页布局中如何选择？"><a href="#在网页布局中如何选择？" class="headerlink" title="在网页布局中如何选择？"></a>在网页布局中如何选择？</h2><p>如果软件开发的预算和时间充足，就不存在抉择的问题，可以两者都调整到一个最佳状态，而不用权衡，做选择题了。然而现实很残酷，要么开发周期短，要么开发预算少，或者二者兼而有之，这个时候该如何抉择？就我个人而言，讲讲我的观点。</p>
<h3 id="分析使用你客户端程序的版本比例。"><a href="#分析使用你客户端程序的版本比例。" class="headerlink" title="分析使用你客户端程序的版本比例。"></a>分析使用你客户端程序的版本比例。</h3><p>如果<strong>低版本用户</strong>居多，当然优先采用<strong>渐进增强</strong>的开发流程；</p>
<p>如果<strong>高版本用户</strong>居多，为了提高大多数用户的使用体验，那当然优先采用<strong>优雅降级</strong>的开发流程。</p>
<h3 id="大多数公司是怎么处理这个问题的："><a href="#大多数公司是怎么处理这个问题的：" class="headerlink" title="大多数公司是怎么处理这个问题的："></a>大多数公司是怎么处理这个问题的：</h3><p>绝大多数的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。</p>
<p>例如：新浪微博网站前端的更新，拥有这种亿级用户的网站，绝对不可能追求某个特效而不考虑低版本用户可不可用，一定是确保低版本到高版本的可访问性，再去渐进增强，采用新功能给高版本用户提供更好的用户体验。</p>
<p>但也不是没有反例。如果<strong>你开发的是一款面向青少年的软件（或网站）</strong></p>
<p>你知道这个群体的人总是喜欢尝试新事物，总是喜欢酷炫的特效，总是喜欢把它们的软件更新到最新版本（而不像我们老一辈的用户）。面对这种情况，<strong>渐进增强</strong>的开发流程实为上选。</p>
<hr>
<h3 id="PS：-其实优雅降级和渐进增强都是页面的加分项，是针对技术的一种形而上的要求。保证尽可能多的用户都能正常使用网站是第一步，在此之上才需要考虑降级的极端情形和现代浏览器的体验增强。"><a href="#PS：-其实优雅降级和渐进增强都是页面的加分项，是针对技术的一种形而上的要求。保证尽可能多的用户都能正常使用网站是第一步，在此之上才需要考虑降级的极端情形和现代浏览器的体验增强。" class="headerlink" title="PS： 其实优雅降级和渐进增强都是页面的加分项，是针对技术的一种形而上的要求。保证尽可能多的用户都能正常使用网站是第一步，在此之上才需要考虑降级的极端情形和现代浏览器的体验增强。"></a>PS： 其实优雅降级和渐进增强都是页面的加分项，是针对技术的一种形而上的要求。保证尽可能多的用户都能正常使用网站是第一步，在此之上才需要考虑降级的极端情形和现代浏览器的体验增强。</h3><hr>
<p>参考来自：</p>
<p><a href="https://segmentfault.com/q/1010000000264469" target="_blank" rel="external">渐进增强和优雅降级之间的有什么不同？</a><br><a href="http://www.zhangxinxu.com/wordpress/2010/09/%E9%9C%80%E8%AD%A6%E6%83%95css3%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F/" target="_blank" rel="external">需警惕CSS3属性的书写顺序</a><br><a href="http://www.jianshu.com/p/d313f1108862" target="_blank" rel="external">渐进增强 VS 优雅降级</a><br><a href="http://blog.csdn.net/xujie_0311/article/details/42399059" target="_blank" rel="external">你能描述一下渐进增强和优雅降级之间的不同吗?如果提到了特性检测，可以加分。</a></p>
<p><strong>最后：</strong>希望看完的朋友点个喜欢，也可以关注一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：目前待业，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><em>**</em></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>以上。2017.4.12</p>
]]></content>
      
        <categories>
            
            <category> css3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 渐进增强和优雅降级 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ps切图实用小技巧、图片格式的区别及相关内容]]></title>
      <url>/2017/10/11/ps%E5%88%87%E5%9B%BE%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7%E3%80%81%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前写了两篇前端图片相关的内容（<a href="https://juejin.im/post/58e9deacb123db1ad05fab2f" target="_blank" rel="external">前端ps切图方法，图文详细</a>,<a href="https://juejin.im/post/58eb062861ff4b006b576d9c" target="_blank" rel="external">css sprite雪碧图制作，使用以及相关，图文gif</a>），本文是面向前端小白的，搜集整理的一些切图技巧，及其相关内容。</p>
<h3 id="关于版本："><a href="#关于版本：" class="headerlink" title="关于版本："></a>关于版本：</h3><p>推荐pscc2017版，一些老版本很多新功能没有，会影响到效率的。（目前2017/4/11）</p>
<h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><p>先要调整<strong>工作区域</strong>的布局。</p>
<p>1.选择“窗口”——把“信息”，“图层”，“历史记录”，“颜色”面板打开，其他的可以先关闭了，在切图的工作中其他的基本用不到，这个很简单的，<strong>打几个勾</strong>就可以了，如下图所示：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/89cef91895c00ccbd2ea" alt=""></p>
<p><img src="https://dn-mhke0kuv.qbox.me/c85a209bf817f02ac39e" alt="工作区的内容"></p>
<p>2.调整好面板之后，选择“窗口”——“工作区”——“新建工作区”，将当前的工作布局保存起来，并命个名，之后下次打开的时候就会直接出现你调整好的工作布局，否则的话你每次重新打开ps的时候都要重新设置。</p>
<p>ps：就算有别人弄乱了你的面板也可以直接通过“窗口”——“工作区”——选择你之前保存的工作布局。</p>
<p>设置<strong>标尺坐标</strong></p>
<p><img src="https://dn-mhke0kuv.qbox.me/4273c80a70dccbb51ba6" alt=""></p>
<p><img src="https://dn-mhke0kuv.qbox.me/a9ae65266bcd6793f1e1" alt=""></p>
<p>操作gif：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/7f794fe00e8cb5b15524.gif" alt=""></p>
<p>还有其他的一些设置：</p>
<p>文件-新建–：初始化预设设置1920x2000，72分辨率，8位色图，背景透明色  然后保存起来。后续可以选择新建模版</p>
<p>视图/显示/智能参考线以及视图/字符，这两个都要选上；</p>
<p>ps界面中有菜单栏、属性栏、工具栏、面板、工作区：</p>
<h3 id="测量-、取色"><a href="#测量-、取色" class="headerlink" title="测量 、取色"></a>测量 、取色</h3><p>哪些要测量？<br>标签的宽度、高度、内边距、边框、定位、文字大小、行高、背景图位置等等，凡是需要数值型，都要进行测量。</p>
<p>使用什么方式：下面弄了一个矩形选择框的例子，如果想要更精确的话，直接使用标尺工具也可以。</p>
<p><img src="https://dn-mhke0kuv.qbox.me/0e589c18b31e88eb8941" alt=""></p>
<h3 id="测量宽高的两种方式："><a href="#测量宽高的两种方式：" class="headerlink" title="测量宽高的两种方式："></a>测量宽高的两种方式：</h3><p>标尺测量的方法：<br><img src="https://dn-mhke0kuv.qbox.me/950afe0f35662c716790" alt=""><br>矩形选择框测量的方法：<br><img src="https://dn-mhke0kuv.qbox.me/787ca96c614a53ba2517" alt=""></p>
<h3 id="颜色取色技巧："><a href="#颜色取色技巧：" class="headerlink" title="颜色取色技巧："></a>颜色取色技巧：</h3><p>QQ截图的方式：<br>截图的时候，鼠标移动到哪里，下面就有一个rgb。（在ps中也是一样，鼠标移动信息栏就会有对应的rgb）<br><img src="https://dn-mhke0kuv.qbox.me/aa11e9ec142477e27e88" alt=""><br>ps拾色器获得 ：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/37106a330c767e769857" alt=""></p>
<p><img src="https://dn-mhke0kuv.qbox.me/92e3ad02c371640310cd" alt=""></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>要把画布尽量放大，来减少我们测量的误差。</p>
<h2 id="关于png、jpg、gif三种图片格式的区别："><a href="#关于png、jpg、gif三种图片格式的区别：" class="headerlink" title="关于png、jpg、gif三种图片格式的区别："></a>关于png、jpg、gif三种图片格式的区别：</h2><h3 id="JPG的特性"><a href="#JPG的特性" class="headerlink" title="JPG的特性"></a>JPG的特性</h3><p>1、支持摄影图像或写实图像的高级压缩，并且可利用压缩比例控制图像文件大小。<br>2、有损压缩会使图像数据质量下降，并且在编辑和重新保存JPG格式图像时，这种下降损失会累积。<br>3、JPG不适用于所含颜色很少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。</p>
<h3 id="PNG的特性"><a href="#PNG的特性" class="headerlink" title="PNG的特性"></a>PNG的特性</h3><p>1、能在保证最不失真的情况下尽可能压缩图像文件的大小。<br>2、PNG用来存储灰度图像时，灰度图像的深度可多到16位，存储彩色图像时，彩色图像的深度可多到48位，并且还可存储多到16位的α通道数据。<br>3、对于需要高保真的较复杂的图像，PNG虽然能无损压缩，但图片文件较大，不适合应用在Web页面上。</p>
<h2 id="什么时候应该使用PNG"><a href="#什么时候应该使用PNG" class="headerlink" title="什么时候应该使用PNG"></a>什么时候应该使用PNG</h2><p>具备以下条件的图像更适合用<strong>PNG8格式</strong>进行存储：</p>
<p>1、图像上颜色较少，并且主要以纯色或者平滑的渐变色进行填充。<br>2、具备较大亮度差异以及强烈对比的简单图像（如“立刻购买”按钮中的背景和文字）。</p>
<p>对于写实的摄影图像或是颜色层次非常丰富的图像采用<strong>JPG格式</strong>的图片格式保存一般能达到最佳的压缩效果。</p>
<h4 id="这篇文章写得非常详细，有兴趣的要看一下：png、jpg、gif三种图片格式的区别"><a href="#这篇文章写得非常详细，有兴趣的要看一下：png、jpg、gif三种图片格式的区别" class="headerlink" title="这篇文章写得非常详细，有兴趣的要看一下：png、jpg、gif三种图片格式的区别"></a>这篇文章写得非常详细，有兴趣的要看一下：<a href="http://www.cnblogs.com/Fran-Lily/p/3792641.html" target="_blank" rel="external">png、jpg、gif三种图片格式的区别</a></h4><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>1.快速选中图层用ctrl+鼠标右键<br>2.安住空格键鼠标变成一只手拖拽图片<br>3.alt+鼠标滚轮可以<strong>放大或者缩小区域</strong><br>4.ctrl+h隐藏所有的参考线</p>
<h4 id="5-h-鼠标移动文件，t文字工具，i吸管工具，移动工具，任何时候按v，就可以回到移动工具"><a href="#5-h-鼠标移动文件，t文字工具，i吸管工具，移动工具，任何时候按v，就可以回到移动工具" class="headerlink" title="5.h,鼠标移动文件，t文字工具，i吸管工具，移动工具，任何时候按v，就可以回到移动工具"></a>5.h,鼠标移动文件，t文字工具，i吸管工具，移动工具，任何时候按v，就可以回到移动工具</h4><p>6.导出切片：alt+shift+ctrl+s（文件-存储为web所用格式）</p>
<h4 id="踩坑经历："><a href="#踩坑经历：" class="headerlink" title="踩坑经历："></a>踩坑经历：</h4><p>自动化切图，文件–脚本–图层保存为文件（这个时候要注意之前的保存为web格式文件时是<strong>保存了所有切片</strong>，而不是仅用户切片，不然会导致一直搜索过滤图层，半天没反应，而且一直谭警告窗，要一直点）<br>意思就是保存图层的时候要保存自己选中的切片。</p>
<p>快捷键：<a href="https://zhidao.baidu.com/question/522391139.html" target="_blank" rel="external">https://zhidao.baidu.com/question/522391139.html</a></p>
<h2 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h2><p>ps切出来的图片一般文件都比较大：<br>这里有一个<strong>压缩图片</strong>很神奇的网站（有墙，攻城狮应该都会科学上网）：</p>
<p><a href="https://tinypng.com/" target="_blank" rel="external">https://tinypng.com/</a></p>
<h2 id="一般网站文件目录"><a href="#一般网站文件目录" class="headerlink" title="一般网站文件目录"></a>一般网站文件目录</h2><p>PSD切图（项目文件目录）<br>project：<br>-admin(后台)<br>-static（所有资源）<br>-css（所有子文件都可以分子文件夹，方便管理，层级不建议太多）common.css/reset.css/yemian.css<br>-images（可以按页面主题来）<br>-js(预定义的，引入的，common.js)<br>-font<br>-pulgs<br>-前台页面<br>-其他单独文件</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://blog.csdn.net/u013778905/article/details/52268304" target="_blank" rel="external">写给前端小白的切图技巧</a><br><a href="http://www.jianshu.com/p/69b74b84e687" target="_blank" rel="external">开始前端开发（PhotoShop切图）</a><br><a href="http://www.cnblogs.com/Fran-Lily/p/3792641.html" target="_blank" rel="external">png、jpg、gif三种图片格式的区别</a></p>
<p><strong>最后：</strong>希望看完的朋友点个喜欢，也可以关注一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：目前待业，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
<p>以上。2017.4.11</p>
]]></content>
      
        <categories>
            
            <category> 工具类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ps切图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css sprite雪碧图制作，使用以及相关，图文gif]]></title>
      <url>/2017/10/11/css-sprite%E9%9B%AA%E7%A2%A7%E5%9B%BE%E5%88%B6%E4%BD%9C%EF%BC%8C%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%EF%BC%8C%E5%9B%BE%E6%96%87gif/</url>
      <content type="html"><![CDATA[<h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p>在网页制作中，<strong>雪碧图也是前端攻城狮必须掌握的一项小技能</strong>。百度词条对雪碧图的解释是：CSS雪碧 即CSS Sprite，也有人叫它CSS精灵，是一种CSS图像合并技术，该方法是将小图标和背景图像合并到一张图片上，然后利用css的背景定位来显示需要显示的图片部分。本文主要内容包括雪碧图如何制作，雪碧图优缺点，哪些场景需要使用雪碧图。</p>
<h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><p>CSS雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。该图片使用CSS background和background-position属性渲染，这也就意味着你的标签变得更加复杂了，图片是在CSS中定义，而非img标签。</p>
<h2 id="1-前期准备下载工具：css-sprit（css精灵）"><a href="#1-前期准备下载工具：css-sprit（css精灵）" class="headerlink" title="1.前期准备下载工具：css sprit（css精灵）"></a>1.前期准备下载工具：css sprit（css精灵）</h2><p>长这样：<br><img src="https://dn-mhke0kuv.qbox.me/07f57ff83cec9de20cb2" alt="css sprit"></p>
<p>看图片就知道多好用！</p>
<p>文件不到200k，相当轻便，这是百度云链接：<a href="http://pan.baidu.com/s/1nuOZDqT" target="_blank" rel="external">http://pan.baidu.com/s/1nuOZDqT</a></p>
<p>也有mac版本的，这是链接：<a href="http://dl.pconline.com.cn/download/421423.html" target="_blank" rel="external">http://dl.pconline.com.cn/download/421423.html</a></p>
<h2 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h2><p>下载，打开之后。<br>1.首先要切一些图片，不会切的话，移步：<a href="https://juejin.im/post/58e9deacb123db1ad05fab2f" target="_blank" rel="external">《前端ps切图方法，图文详细》</a></p>
<h2 id="2-打开雪碧图，选择图片。"><a href="#2-打开雪碧图，选择图片。" class="headerlink" title="2.打开雪碧图，选择图片。"></a>2.打开雪碧图，选择图片。</h2><p><img src="https://dn-mhke0kuv.qbox.me/0cc59dfda362991ef28f" alt=""></p>
<h2 id="3-添加完图片之后，会自动生成代码，需要排列一下图片："><a href="#3-添加完图片之后，会自动生成代码，需要排列一下图片：" class="headerlink" title="3.添加完图片之后，会自动生成代码，需要排列一下图片："></a>3.添加完图片之后，会自动生成代码，需要排列一下图片：</h2><p><img src="https://dn-mhke0kuv.qbox.me/540b6855a8f1cd63afa4" alt=""></p>
<p><img src="https://dn-mhke0kuv.qbox.me/fe5a1265957120cf390a.gif" alt="可以看到我排列图片的时候，下面的代码也会跟着刷新"></p>
<p>可以看到排列图片的时候，下面的代码也会跟着刷新</p>
<p>注意：排列图片的时候要注意各个图片之间留点空隙，不然使用的时候，会相互覆盖。</p>
<h2 id="3-保存图片以及雪碧图css代码"><a href="#3-保存图片以及雪碧图css代码" class="headerlink" title="3.保存图片以及雪碧图css代码"></a>3.保存图片以及雪碧图css代码</h2><p>保存雪碧图<br><img src="https://dn-mhke0kuv.qbox.me/9eda37300841b0915105" alt=""></p>
<p>生成的雪碧图：<br><img src="https://dn-mhke0kuv.qbox.me/d4ecfa490c99fdc03522" alt=""><br>保存雪碧图-css代码（因为软件没有到导出css代码的功能，所以要自己新建一个txt文件，放在雪碧图旁边，以后打开txt就知道图片在雪碧图的位置。）</p>
<p><img src="https://dn-mhke0kuv.qbox.me/6b862bdd46e619ea2802" alt=""></p>
<p>gif操作：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/1b5c1e3609129f5b58a9.gif" alt=""></p>
<h2 id="如何在html中使用？"><a href="#如何在html中使用？" class="headerlink" title="如何在html中使用？"></a>如何在html中使用？</h2><p>慕课网雪碧图：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/fca91f283b5ac39592a3" alt=""><br>慕课网demo：<a href="http://www.imooc.com/code/1511。" target="_blank" rel="external">http://www.imooc.com/code/1511。</a><br>慕课网雪碧图教程：<a href="http://www.imooc.com/learn/93" target="_blank" rel="external">http://www.imooc.com/learn/93</a></p>
<h2 id="3-雪碧图优劣势"><a href="#3-雪碧图优劣势" class="headerlink" title="3.雪碧图优劣势"></a>3.雪碧图优劣势</h2><h3 id="1-加快网页加载速度"><a href="#1-加快网页加载速度" class="headerlink" title="1.加快网页加载速度"></a>1.加快网页加载速度</h3><p>网页上面每一张图片，都要向浏览器请求下载图片，而浏览器接受的同时请求数是10个，一次能处理的请求数目是两个。</p>
<p>http发起请求，最耗时的是在三次握手，每次请求之前都要握手。所以在网页性能优化中，减少http请求的次数是相当重要的一点！（本来想写多一点，但有些知识点不太清楚，怕误人子弟就不再赘述了。）</p>
<p>当一个网页有几百张，几千张图片的时候加载起来简直了！而且对于不稳定的网络带宽，加载起来更是噩梦，所以把图片拼接为一张大图，从而加快加载速度，以及加速页面渲染</p>
<h3 id="2-后期维护简单"><a href="#2-后期维护简单" class="headerlink" title="2.后期维护简单"></a>2.后期维护简单</h3><p>该工具可以直接通过选择图片进行图片的拼接，当然你也可以自己挪动里面的图片，自己去布局你的雪碧图，更换图片的时候也只要更改一下图片的位置就可以了。直接生成代码，简单易用</p>
<p><strong>3、CSS Sprites能减少图片的字节</strong>，曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</p>
<p><strong> 4、解决了网页设计师在图片命名上的困扰</strong>，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。</p>
<p> <strong>5、更换风格方便</strong>，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便。</p>
<h3 id="关于雪碧图的缺点内容：不要滥用雪碧图sprite"><a href="#关于雪碧图的缺点内容：不要滥用雪碧图sprite" class="headerlink" title="关于雪碧图的缺点内容：不要滥用雪碧图sprite"></a>关于雪碧图的缺点内容：<a href="http://www.cnblogs.com/joyho/articles/3715275.html" target="_blank" rel="external">不要滥用雪碧图sprite</a></h3><p>里面说了蛮多的，这事情可以根据使用场景来决定，大家可以看看，毕竟我是来教雪碧图的。。。<br>下面有关于雪碧图的demo。</p>
<p>之前写过两篇相关的：<br>1.<a href="https://juejin.im/post/58e9deacb123db1ad05fab2f" target="_blank" rel="external">前端ps切图方法，图文详细</a><br>2.<a href="https://juejin.im/post/58ec558d570c350057e849f0" target="_blank" rel="external">ps切图实用小技巧、图片格式的区别及相关内容</a></p>
<p>以上，2017.4.10。</p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，也可以关注一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：目前待业，坐标北京，求推荐工作。然后希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><em>**</em></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
]]></content>
      
        <categories>
            
            <category> 工具类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css sprite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端 PS 切图方法，图文详细]]></title>
      <url>/2017/10/11/%E5%89%8D%E7%AB%AF-PS-%E5%88%87%E5%9B%BE%E6%96%B9%E6%B3%95%EF%BC%8C%E5%9B%BE%E6%96%87%E8%AF%A6%E7%BB%86/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong>本文主要内容是目前<strong>我所知道的切图技巧结合网上的资料</strong>，写出来分享一波。图文教程，多图！！</p>
<p><strong>BB：</strong>很多人都会说，切图这个活倒底分给UI还是分给前端。虽然好的UI会给我们把图切好，但是他们切的图不一定百分之百符合我们的需求，所以我一直都觉得这是页面仔必须要会的一项技能，因为只有你自己才会知道怎么切合适。况且<strong>这项技能根本一点都不难</strong>，所以还是自己动手丰衣足食比较好。</p>
<h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>我现在使用的版本号：PS-CS6，网上很多破解版本的自行搜索下载。</p>
<h2 id="2-安装好PS之后，先要调整工作区域的布局。"><a href="#2-安装好PS之后，先要调整工作区域的布局。" class="headerlink" title="2.安装好PS之后，先要调整工作区域的布局。"></a>2.安装好PS之后，先要调整工作区域的布局。</h2><p>1.选择“窗口”——把“信息”，“图层”，“历史记录”，“颜色”面板打开，其他的可以先关闭了，在切图的工作中其他的基本用不到，这个很简单的，<strong>打几个勾就可以了</strong>，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_1.png" alt="Paste_Image.png"></p>
<p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_2.png" alt="工作区的内容"></p>
<p>2.调整好面板之后，选择“窗口”——“工作区”——“新建工作区”，<strong>将当前的工作布局保存</strong>起来，并命个名，之后下次打开的时候就会直接出现你调整好的工作布局，否则的话你每次重新打开ps的时候都要重新设置。</p>
<p>ps：就算有别人弄乱了你的面板也可以直接通过“窗口”——“工作区”——选择你之前保存的工作布局。</p>
<h2 id="3-切图"><a href="#3-切图" class="headerlink" title="3.切图"></a><strong>3.切图</strong></h2><p>切图需求：</p>
<p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_3.png" alt="这是我们需要切的图"></p>
<h4 id="切图步骤见图"><a href="#切图步骤见图" class="headerlink" title="切图步骤见图"></a>切图步骤见图</h4><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_4.png" alt="切图步骤1."></p>
<h4 id="选择图层的时候要先按住alt不放，然后再按鼠标右键。"><a href="#选择图层的时候要先按住alt不放，然后再按鼠标右键。" class="headerlink" title="选择图层的时候要先按住alt不放，然后再按鼠标右键。"></a>选择图层的时候要先按住alt不放，然后再按鼠标右键。</h4><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_5.png" alt="Paste_Image.png"></p>
<h3 id="隐藏图层。"><a href="#隐藏图层。" class="headerlink" title="隐藏图层。"></a>隐藏图层。</h3><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_6.png" alt="Paste_Image.png"></p>
<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_7.png" alt="Paste_Image.png"></p>
<h4 id="连续操作隐藏图层-背景图要隐藏干净-："><a href="#连续操作隐藏图层-背景图要隐藏干净-：" class="headerlink" title="连续操作隐藏图层(背景图要隐藏干净)："></a>连续操作隐藏图层(<strong>背景图要隐藏干净</strong>)：</h4><h4 id="效果，以及接下的步骤（切线就是一根根淡蓝色的线）"><a href="#效果，以及接下的步骤（切线就是一根根淡蓝色的线）" class="headerlink" title="效果，以及接下的步骤（切线就是一根根淡蓝色的线）"></a>效果，以及接下的步骤（切线就是一根根淡蓝色的线）</h4><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_8.png" alt="Paste_Image.png"></p>
<h4 id="保存切片1"><a href="#保存切片1" class="headerlink" title="保存切片1"></a>保存切片1</h4><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_9.png" alt="Paste_Image.png"></p>
<h4 id="保存切片2"><a href="#保存切片2" class="headerlink" title="保存切片2"></a>保存切片2</h4><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_10.png" alt="Paste_Image.png"></p>
<h4 id="保存切片3"><a href="#保存切片3" class="headerlink" title="保存切片3"></a>保存切片3</h4><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_11.png" alt="Paste_Image.png"></p>
<p>被局限的方法（原理是一样的）：</p>
<p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_12.png" alt="这有局限"></p>
<h1 id="踩坑经历："><a href="#踩坑经历：" class="headerlink" title="踩坑经历："></a>踩坑经历：</h1><p>网上很多教程都说使用png格式就可以，却并没有说png-8或者是png-24，甚至有些教程告诉我使用png-8！在这里分享一波，保存切片<strong>必须使用png-24</strong>，因为我踩过坑了（/(ㄒoㄒ)/~~）</p>
<h4 id="切出来的图片对比："><a href="#切出来的图片对比：" class="headerlink" title="切出来的图片对比："></a>切出来的图片对比：</h4><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_13.png" alt="Paste_Image.png"></p>
<h4 id="网页效果对比："><a href="#网页效果对比：" class="headerlink" title="网页效果对比："></a>网页效果对比：</h4><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_14.png" alt=""></p>
<h4 id="更新一波原理："><a href="#更新一波原理：" class="headerlink" title="更新一波原理："></a>更新一波原理：</h4><p>之前不知道为什么png8，png24为什么有这种差别，经过评论区@唐挽斐 解答一波，现在明白了，更新到文章里面。</p>
<p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_15.png" alt=""></p>
<p>因为黄色图标这里是不透明的，png8不支持半透明的</p>
<p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_4_9_16.png" alt=""></p>
<h4 id="搜了一下png8和png-24的区别："><a href="#搜了一下png8和png-24的区别：" class="headerlink" title="搜了一下png8和png-24的区别："></a>搜了一下png8和png-24的区别：</h4><p>1、png8是一个256色的图片，png24则是一个1670万色的图片</p>
<p>2、png8的压缩率比png24高很多，所以<strong>png8图片的大小会比png24小很多</strong>。</p>
<p>3、png8的全透明没有png24的质量高。</p>
<p>4、png8在半透明和透明的情况下会有毛边锯齿的现象，png24则不会，如下图</p>
<p><strong>@唐挽斐建议</strong>：必须保存png24，这个确实可以保证图片不会出错，但是对于大的不需要半透明的图片保存成 png24 的话<strong>导致文件体积会很大</strong>，所以建议不需要半透明的图片保存成 png8，这样体积会小一点而且不会影响图片清晰度，需要半透明的一定要保存成 png24。</p>
<p>感谢建议，之前有点不太理解，这回学习到了。</p>
<p>这是别人写的教程，跟我用的方法有些差别，有兴趣可以看看。<br><a href="http://blog.csdn.net/xiaoermingn/article/details/53240266" target="_blank" rel="external">http://blog.csdn.net/xiaoermingn/article/details/53240266</a></p>
<p>以上：2017.4.9。</p>
<p><strong>后话：</strong> 本文的受众是前端小白们呢，只是帮助小白们，先学会切图能把图片切出来，能够使用就可以了，这些都是小技能学会用了就可以了，不打紧的。明天写一篇关于雪碧图的合成方法，以及关于切图的一些东西。</p>
<p>相关：<br>1.<a href="https://juejin.im/post/58eb062861ff4b006b576d9c" target="_blank" rel="external">css sprite雪碧图制作，使用以及相关，图文</a><br>2.<a href="https://juejin.im/post/58ec558d570c350057e849f0" target="_blank" rel="external">ps切图实用小技巧、图片格式的区别及相关内容</a></p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，也可以关注一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：如果希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><em>**</em></a><strong><a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a>  ，</strong><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external"><strong>简书主页链接</strong></a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> ，<a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> 。</strong></p>
]]></content>
      
        <categories>
            
            <category> 工具类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ps切图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[标签栏图标，随机背景图，压缩背景]]></title>
      <url>/2017/10/11/%E6%A0%87%E7%AD%BE%E6%A0%8F%E5%9B%BE%E6%A0%87%EF%BC%8C%E9%9A%8F%E6%9C%BA%E8%83%8C%E6%99%AF%E5%9B%BE%EF%BC%8C%E5%8E%8B%E7%BC%A9%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong>本文内容见标题，之前github个人主页每次看到地址栏旁边的小图标默认的样子，都觉得丑爆了，前几天终于抽空把这个改了，还有之前背景图片用了一个大壁纸的网址链接，每次读取背景的时候感觉要半天那么久，一直想着要弄个反应速度快的！然后我又找到一个好方法。</p>
<h3 id="效果-文章最后有demo-："><a href="#效果-文章最后有demo-：" class="headerlink" title="效果(文章最后有demo)："></a>效果(文章最后有demo)：</h3><p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_04_17_back.png" alt="Paste_Image.png"></p>
<h2 id="地址栏的图标："><a href="#地址栏的图标：" class="headerlink" title="地址栏的图标："></a>地址栏的图标：</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>很早之前就对别的网页有这种漂亮的小图标好喜欢，自己也决定弄一个<br><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_04_17_site.png" alt=""><br>怎样添加这样的图标呢，没有设置的话，<strong>默认是没有的</strong>。</p>
<p><img src="https://raw.githubusercontent.com/OBKoro1/article-demo/master/blogImg/2017_04_17_siteback.png" alt="Paste_Image.png"></p>
<h4 id="其实，这个是通过favicon-ico来控制的。"><a href="#其实，这个是通过favicon-ico来控制的。" class="headerlink" title="其实，这个是通过favicon.ico来控制的。"></a>其实，这个是通过favicon.ico来控制的。</h4><p><strong>favicon.ico图标</strong>（图片大小有限制，下面有在线转换的网址）是网站的缩略标志，可以显示在浏览器标签、地址栏左边和收藏夹，是展示网站个性的缩略logo标志，也可以说是网站头像，如果要让网站看起来更专业、更美、更有个性，favicon.ico是必不可少的。</p>
<p><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;shortcut icon bookmark&quot; type=&quot;image/png&quot; href=&quot;compress-bg/ico4.ico&quot;&gt;</div></pre></td></tr></table></figure></p>
<p><strong>概念 ：</strong><br>rel：链接外部文件与此文件的关系。<br>bookmark – 书签<br>Shortcut  Icon– 小图片</p>
<p><strong>注意：</strong>这里的图片是要用专门格式的，这里是两个在线转换图片格式的网址：<br><a href="http://ico.storyren.com/" target="_blank" rel="external">http://ico.storyren.com/</a><br><a href="http://www.bitbug.net/" target="_blank" rel="external">http://www.bitbug.net/</a></p>
<p>这里有两篇关于rel属性的详细介绍写的很多，有兴趣深究的可以看一下：<br>1.<a href="http://www.jb51.net/web/25005.html" target="_blank" rel="external">http://www.jb51.net/web/25005.html</a><br>2.<a href="http://paranimage.com/link-rel-attribute/" target="_blank" rel="external">http://paranimage.com/link-rel-attribute/</a></p>
<h2 id="随机背景图"><a href="#随机背景图" class="headerlink" title="随机背景图"></a>随机背景图</h2><p>###问题描述：<br>在github搭建了一个个人网站，（<a href="http://www.jianshu.com/p/4b29b1fb060f" target="_blank" rel="external">搭建方法</a>）背景图片随机，载入速度过慢：之前我用的是这种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">body&#123;background:url(&quot;https://unsplash.it/1600/900?random&quot;);&#125;</div></pre></td></tr></table></figure></p>
<p><strong>解读：</strong>这里是将背景图片跟一个<strong>高清壁纸</strong>的网址链接（这个<a href="http://www.jianshu.com/p/4b29b1fb060f" target="_blank" rel="external">高清图片</a>网站还是不错的，推荐一波），随机倒是随机了，但每次读取背景的时候感觉要半天那么久（因为是分辨率比较高），但是这跟我的需求不一样，没工夫等那么久,so,有了下面的方法。</p>
<p>在网上查了两种方法，<strong>方法一：</strong></p>
<p><img src="https://github.com/OBKoro1/article-demo/blob/master/blogImg/2017_04_17_ying.png?raw=true" alt="Paste_Image.png"></p>
<p>博文链接：<a href="http://blog.csdn.net/ldl_xz/article/details/51532558" target="_blank" rel="external">http://blog.csdn.net/ldl_xz/article/details/51532558</a></p>
<p><strong>方法二（我目前用的）：</strong><br><strong>原理</strong>就是通过js代码来动态的生成一个代表图片路径的 字符串 或者 html代码</p>
<p>在 <body></body> 标签中使用class: bg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;body class=&quot;bg&quot;&gt;&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>js代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;//产生随机背景图片</div><div class="line">    var bodyBgs = [];//图片url的路径</div><div class="line">    for (var i = 1; i &lt; 62; i++) &#123;//注意图片数量</div><div class="line">        bodyBgs[i] = &quot;compress-bg/bg&quot;+i+&quot;.jpg&quot;;//动态改变i的数量，随机选择到图片</div><div class="line">    &#125;;</div><div class="line">    var randomBgIndex = Math.round( Math.random() * 61 );</div><div class="line">//随机获取字符串标识，注意图片数量(这里随机数包括0，图片要从bg0开始到bg(n)）</div><div class="line">    console.log(randomBgIndex);</div><div class="line">    document.write(&apos;&lt;style&gt;.bg&#123;width:100%;background:url(&apos;);</div><div class="line">    document.write(bodyBgs[randomBgIndex]);</div><div class="line">    document.write(&apos;);background-size: cover;&#125;&lt;/style&gt;&apos;);</div><div class="line">    //上面的三个字符串可以用“+”连接成一个字符串，这里因为位置原因我拆开写了。</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><strong>执行过程：</strong><br>1.通过循环生成一组<strong>图片路径</strong>的字符串。//重要的就是图片路径这块儿的理解。<br>2.通过产生随机数，随机得到某张图片的路径字符串。<br>3.动态生成包含 css代码 的 html代码 。<br>4.通过浏览器查看网页的显示情况。（文末有 ）</p>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>1.图片路径不要错！！！<br>2.随机数是从0开始的，注意bg[n]，n是从0开始。<br>3.要想背景载入速度够快的话，最好<strong>压缩压缩压缩（说三遍）一下图片</strong></p>
<p>这里推荐一个<strong>在线压缩图片超好用的网站</strong><br><a href="https://tinypng.com/#" target="_blank" rel="external">https://tinypng.com/#</a></p>
<p>这是米国的网站，最好翻墙一下，不然会出现这种情况（也可以下载破解版的软件，搜索tinypng就可以）</p>
<p><img src="https://github.com/OBKoro1/article-demo/blob/master/blogImg/2017_04_17_yi.png?raw=true" alt="Paste_Image.png"></p>
<p>我翻译了一下页面</p>
<p><img src="https://github.com/OBKoro1/article-demo/blob/master/blogImg/2017_04_17_china.png?raw=true" alt=""></p>
<p>需要注册一下，然后一个月可以压缩500张，一般是够用的。</p>
<p><img src="https://github.com/OBKoro1/article-demo/blob/master/blogImg/2017_04_17_500.png?raw=true" alt="Paste_Image.png"></p>
<p>demo在最下面。</p>
<p>favicon.ico图标参考文章：<a href="http://blog.csdn.net/hsd2012/article/details/51782545" target="_blank" rel="external">http://blog.csdn.net/hsd2012/article/details/51782545</a><br>随机生成背景图参考网址：<a href="http://www.tuicool.com/articles/y2miAby" target="_blank" rel="external">http://www.tuicool.com/articles/y2miAby</a></p>
<p>2017.4.8，以上。</p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，也可以关注一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：如果希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external">简书主页链接</a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> <a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a> ， <a href="https://juejin.im/user/58714f0eb123db4a2eb95372" target="_blank" rel="external">掘金个人主页</a></strong></p>
<h2 id="说好的demo-demo地址"><a href="#说好的demo-demo地址" class="headerlink" title="说好的demo,demo地址"></a>说好的demo,<a href="https://obkoro1.github.io/article-demo/" target="_blank" rel="external">demo地址</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">&lt;head&gt;</div><div class="line"></div><div class="line">&lt;meta charset=&quot;utf-8&quot; name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes&quot;/&gt;</div><div class="line"></div><div class="line">&lt;link rel=&quot;icon shortcut bookmark&quot; type=&quot;image/png&quot; href=&quot;compress-bg/ico1.ico&quot;&gt;</div><div class="line"></div><div class="line">&lt;title&gt;简书demo&lt;/title&gt;</div><div class="line"></div><div class="line">&lt;base target=&quot;_blank&quot; /&gt;</div><div class="line"></div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line"></div><div class="line">.bg&#123;</div><div class="line"></div><div class="line">margin: 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">.allBox&#123;</div><div class="line"></div><div class="line">width: 80%;</div><div class="line"></div><div class="line">margin: 0 auto;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">p&#123;</div><div class="line"></div><div class="line">display: inline-block!important;</div><div class="line"></div><div class="line">width: 50%;</div><div class="line"></div><div class="line">font-size: 2rem;</div><div class="line"></div><div class="line">float: left;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">a&#123;</div><div class="line"></div><div class="line">text-decoration: none;</div><div class="line"></div><div class="line">target= &quot;_Blank&quot;;</div><div class="line"></div><div class="line">color:#7e6b5a;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">h1&#123;</div><div class="line"></div><div class="line">color: #d1c0a5;</div><div class="line"></div><div class="line">text-align: center;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body class=&quot;bg&quot;&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;allBox&quot;&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;这里是简书demo&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;p&gt;&lt;a href=&quot;js-time/time-countDown.html&quot;&gt;1.倒计时和获取时间的demo&lt;/a&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;//产生随机背景图片</div><div class="line"></div><div class="line">var bodyBgs = [];</div><div class="line"></div><div class="line">for (var i = 1; i &lt; 62; i++) &#123;//注意图片数量</div><div class="line"></div><div class="line">bodyBgs[i] = &quot;compress-bg/bg&quot;+i+&quot;.jpg&quot;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">var randomBgIndex = Math.round( Math.random() * 61 );//随机获取字符串标识，注意图片数量</div><div class="line"></div><div class="line">console.log(randomBgIndex);</div><div class="line"></div><div class="line">document.write(&apos;&lt;style&gt;.bg&#123;width:100%;background:url(&apos;);</div><div class="line"></div><div class="line">document.write(bodyBgs[randomBgIndex]);</div><div class="line"></div><div class="line">document.write(&apos;);background-size: cover;&#125;&lt;/style&gt;&apos;);</div><div class="line"></div><div class="line">//上面的三个字符串可以用“+”连接成一个字符串，这里因为位置原因我拆开写了。</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 网站随机背景 </tag>
            
            <tag> 标签栏favicon </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解读viewport—网页自适应移动app神器]]></title>
      <url>/2017/10/11/%E8%A7%A3%E8%AF%BBviewport%E2%80%94%E7%BD%91%E9%A1%B5%E8%87%AA%E9%80%82%E5%BA%94%E7%A7%BB%E5%8A%A8app%E7%A5%9E%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong>viewport指的是是用户网页的<strong>可视区域</strong>，查了许久，遗憾的是近一两年几乎没有高质量的解析viewport的文章，本文内容是参考大牛，对内容进行了重新排版，以及对重点内容进行标注、精简，加上些许的个人理解形成的。有兴趣的朋友，可以参考一下。</p>
<h2 id="一-背景介绍"><a href="#一-背景介绍" class="headerlink" title="一.背景介绍"></a>一.背景介绍</h2><p>现在人通过手机浏览网页占了大多数，随着浏览方式的改变，网页在webapp下面实现多终端自适应，无论是对于避免工程师无谓的重复劳动或者是对于项目管理便捷性上来说都是十分重要的，然而在移动设备上进行网页的重构或开发，首先得搞明白的就是移动设备上的<strong>viewpor</strong>t了，只有明白了viewport的概念以及弄清楚了跟viewport有关的meta标签的使用，才能更好地<strong>让我们的网页适配或响应各种不同分辨率的移动设备</strong>。</p>
<h2 id="二-知识剖析"><a href="#二-知识剖析" class="headerlink" title="二.知识剖析"></a>二.知识剖析</h2><h3 id="1-viewport的概念"><a href="#1-viewport的概念" class="headerlink" title="1.viewport的概念"></a>1.viewport的概念</h3><p><strong>通俗的讲</strong>，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域。</p>
<p><strong>在具体一点</strong>，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。</p>
<p>在默认情况下，一般来讲，<strong>移动设备上的viewport都是要大于浏览器可视区域的</strong>，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站。</p>
<p>移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-1ccdb61f8f6d1ab5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="浏览器的默认viewport的宽度。"></p>
<h5 id="2-移动设备哪些因素会引起css中px的变化？"><a href="#2-移动设备哪些因素会引起css中px的变化？" class="headerlink" title="2.移动设备哪些因素会引起css中px的变化？"></a>2.移动设备哪些因素会引起css中px的变化？</h5><p>  在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素。但实际情况却并非如此，<strong>css中的像素只是一个抽象的单位</strong>，在<strong>不同的设备或不同的环境</strong>中，css中的1px所代表的<strong>设备物理像素</strong>是不同的。</p>
<p><strong>1）</strong>从iphone4开始，苹果公司便推出了所谓的Retina屏，<strong>分辨率提高了一倍</strong>，变成640x960，但<strong>屏幕尺寸却没变化</strong>，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的（意思就是你<strong>分辨率越大，css中1px代表的物理像素就会越多</strong>）。</p>
<p><strong>2)</strong>用户对设备<strong>界面的缩放</strong>，例如，当用户把页面放大一倍，那么css中1px所代表的物理像素也会增加一倍；反之把页面缩小一倍，css中1px所代表的物理像素也会减少一倍。</p>
<h4 id="3-devicePixelRatio属性"><a href="#3-devicePixelRatio属性" class="headerlink" title="3.devicePixelRatio属性"></a>3.devicePixelRatio属性</h4><p><strong>1)</strong>它的官方的定义为：设备物理像素和设备独立像素的比例，也就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devicePixelRatio = 物理像素 / 独立像素。</div></pre></td></tr></table></figure></p>
<p>理解：1.css中的px就可以看做是设备的独立像素，所以知道<strong>devicePixelRatio</strong>，我们可以知道该设备上一个css像素代表多少个物理像素。<br>ps：兼容这块儿，笔者还没找到相应的数据支持。但是在日常应用中，基本上主流的手机，都支持。有兴趣的小伙伴可以研究一下。</p>
<p><strong>举个栗子：</strong>在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。</p>
<h4 id="4-ideal-viewport——完美适配移动设备的理想viewport。"><a href="#4-ideal-viewport——完美适配移动设备的理想viewport。" class="headerlink" title="4.ideal viewport——完美适配移动设备的理想viewport。"></a>4.ideal viewport——完美适配移动设备的理想viewport。</h4><p>所谓的<strong>完美适配</strong>（通常意义下，攻城狮口中的自适应）指的是:</p>
<p><strong>1)</strong>不需要用户缩放和横向滚动条就能正常的查看网站的所有内容；</p>
<p><strong>2)</strong>显示的文字的大小是合适，比如一段14px大小的文字，不会因为在一个高密度像素的屏幕里显示得太小而无法看清，理想的情况是这段14px的文字无论是在何种密度屏幕，何种分辨率下，显示出来的大小都是差不多的。</p>
<p><strong>ideal viewport并没有一个固定的尺寸</strong>，不同的设备拥有有不同的ideal viewport。所有的phone的ideal viewport宽度都是320px，无论它的屏幕宽度是320还是640，也就是说，在iphone屏幕宽度在640px以下中，css中的320px就代表iphone屏幕的宽度。</p>
<p>不同分辨率的安卓手机上，devicePixelRatio的值能正好填充全屏宽度：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-3d9f84137f64b78e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不同分辨率手机上，devicePixelRatio的值能正好填充全屏宽度"></p>
<h2 id="三-常见问题。"><a href="#三-常见问题。" class="headerlink" title="三.常见问题。"></a>三.常见问题。</h2><p><strong>1）.</strong>在进行移动设备网站的开发时，如何控制ideal viewport呢？</p>
<p>我们在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我们的head标签中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</div></pre></td></tr></table></figure></p>
<p><strong>标签解读：</strong><br><img src="http://upload-images.jianshu.io/upload_images/5245297-2af7764044a18695.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标签解读"></p>
<p>在安卓中还支持  target-densitydpi  这个私有属性，它表示目标设备的密度等级，作用是决定css中的1px代表多少物理像素</p>
<p><strong>target-densitydpi</strong>： 值可以为一个数值或 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个</p>
<p>注意：当 target-densitydpi=device-dpi 时， css中的1px会等于物理像素中的1px。</p>
<p>2）把当前的viewport宽度设置为 ideal viewport 的宽度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-400464d22b2a49ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码在 各大移动端浏览器上的测试结果"></p>
<p>可以看到通过width=device-width，所有浏览器都能把<strong>当前的viewport宽度变成ideal viewport的宽度</strong>，但要注意的是，在iphone和ipad上，无论是竖屏还是横屏，宽度都是竖屏时ideal viewport的宽度。</p>
<p>上面这串代码还有另一种写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1&quot;&gt;`</div></pre></td></tr></table></figure></p>
<h2 id="四-扩展——关于meta-viewport的更多知识。"><a href="#四-扩展——关于meta-viewport的更多知识。" class="headerlink" title=" 四.扩展——关于meta viewport的更多知识。"></a> 四.扩展——关于meta viewport的更多知识。</h2><h3 id="1-关于缩放"><a href="#1-关于缩放" class="headerlink" title="1.关于缩放"></a>1.关于缩放</h3><p>缩放是相对于ideal viewport来缩放的，缩放值越大，当前viewport的宽度就会越小，反之亦然。<br>举个栗子：在iphone中，ideal viewport的宽度是320px，如果我们设置 initial-scale=2 ，此时viewport的宽度会变为只有160px了</p>
<p>理解：就是原来1px的东西变成2px了，但是1px变为2px并不是把原来的320px变为640px了，而是在实际宽度不变的情况下，1px变得跟原来的2px的长度一样了，所以放大2倍后原来需要320px才能填满的宽度现在只需要160px就做到了。因此，我们可以得出一个公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">visual viewport宽度 = ideal viewport宽度  / 当前缩放值</div><div class="line"></div><div class="line">当前缩放值 = ideal viewport宽度  / visual viewport宽度</div></pre></td></tr></table></figure></p>
<p> ps: visual viewport的宽度指的是浏览器可视区域的宽度。ideal viewport宽度指的是完美适配移动设备的宽度</p>
<h3 id="2-initial-scale的默认值是多少？"><a href="#2-initial-scale的默认值是多少？" class="headerlink" title="2.initial-scale的默认值是多少？"></a>2.initial-scale的默认值是多少？</h3><p><strong>initial-scale的默认值很显然不会是1</strong>，因为当 initial-scale = 1 时，当前的layout viewport宽度会被设为 ideal viewport的宽度，但前面说了，各浏览器默认的 layout viewport宽度一般都是980啊，1024啊，800啊等等这些个值，没有一开始就是 ideal viewport的宽度的。</p>
<p>ps：layout viewport在手机浏览器上面的默认值是980px。</p>
<p><strong>安卓设备上的initial-scale默认值：</strong>如果没有设置的话，就没有，一定要设置，这个属性才会起作用。</p>
<p><strong>iphone和ipad上的initial-scale默认值：</strong></p>
<p>测试：在iphone上，我们不设置任何的viewport meta标签，此时layout viewport的宽度为980px，但我们可以看到浏览器并没有出现横向滚动条，浏览器默认的把页面缩小了。根据上面的公式，当前缩放值 = ideal viewport宽度  / visual viewport宽度，我们可以得出：</p>
<p>当前缩放值 = 320 / 980，也就是当前的initial-scale<strong>默认值是 0.33</strong>这样子。</p>
<p><strong>结论：</strong>在iphone和ipad上，无论你给viewport设的宽的是多少，如果<strong>没有指定默认的缩放值</strong>，则iphone和ipad会<strong>自动计算这个缩放值</strong>，以达到当前页面不会出现横向滚动条(或者说viewport的宽度就是屏幕的宽度)的目的。</p>
<p>这里楼主有个踩坑经历：<a href="http://www.jianshu.com/p/232a4d9a90c9" target="_blank" rel="external">http://www.jianshu.com/p/232a4d9a90c9</a></p>
<h3 id="3-js动态改变meta-viewport标签"><a href="#3-js动态改变meta-viewport标签" class="headerlink" title="3.js动态改变meta viewport标签"></a>3.js动态改变meta viewport标签</h3><p>第一种方法</p>
<p>可以使用document.write来动态输出meta viewport标签，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(&apos;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;&apos;)</div></pre></td></tr></table></figure></p>
<p>第二种方法</p>
<p>js通过setAttribute来改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;meta id=&quot;testViewport&quot; name=&quot;viewport&quot; content=&quot;width = 380&quot;&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var mvp = document.getElementById(&apos;testViewport&apos;);</div><div class="line">mvp.setAttribute(&apos;content&apos;,&apos;width=480&apos;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h2 id="五-总结"><a href="#五-总结" class="headerlink" title=" 五.总结"></a> 五.总结</h2><p><strong>得到缩放值的公式：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">当前缩放值 = ideal viewport宽度  / visual viewport宽度</div><div class="line">//visual viewport宽度指的是浏览器可视区域的宽度。</div><div class="line">//ideal viewport宽度指的是完美适配移动设备的宽度</div></pre></td></tr></table></figure></p>
<p><strong>如果表示不理解本文的内容，在head部分加上这串代码也可以解决网页自适应移动app的这个问题：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</div></pre></td></tr></table></figure></p>
<p><strong>提示：</strong>如果<strong>不设置</strong>meta viewport标签，移动设备上浏览器默认的宽度值为800px，980px，1024px等这些，总之是大于屏幕宽度的（意思就是说，<strong>会不自适应手机端的页面</strong>）</p>
<p>还是刚才那个踩坑经历：<a href="http://www.jianshu.com/p/232a4d9a90c9（迷迷糊糊的太难受了）" target="_blank" rel="external">http://www.jianshu.com/p/232a4d9a90c9（迷迷糊糊的太难受了）</a></p>
<p>本文大部分内容来自：<a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">http://www.cnblogs.com/2050/p/3877280.html</a><br>本人重新排版，以及对重点内容进行标注，和精简。<br>原文较为详细，细细阅读，理解更加深刻。</p>
<p><strong>后话：</strong>确实，当我们在开发移动设备上的网页时，不管你明不明白什么是viewport，可能你只需要这么一句代码就够了。当有时候，我们要知其然，更要知其所以然，当你明白了其中的原理，对其使用就会更加得心应手，不会迷迷糊糊，连这串代码是什么意思都不知道。老大曾经说过一句话：<strong>当你达到一定高度的时候，你的理论知识才能决定你能走多远。</strong>共勉。</p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，也可以关注一下我，现在这阶段基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：如果希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external">简书主页链接</a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a> <a href="https://github.com/OBKoro1" target="_blank" rel="external">github</a></strong></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[倒计时跳转和获取实时时间]]></title>
      <url>/2017/10/11/%E5%80%92%E8%AE%A1%E6%97%B6%E8%B7%B3%E8%BD%AC%E5%92%8C%E8%8E%B7%E5%8F%96%E5%AE%9E%E6%97%B6%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong>本文内容如题，自己做的一个demo，倒计时和获取实时时间在许多场景都用的到，所以还算蛮实用的，需要的朋友可以做个参考。</p>
<p><strong>效果图：</strong><br><img src="http://upload-images.jianshu.io/upload_images/5245297-0411f8b69b840904.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="页面效果"></p>
<p><strong>代码解析：</strong><br>html代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;body onload=&quot;startTime()&quot;&gt;</div><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">    &lt;div class=&quot;time&quot;&gt;请等待&lt;span id=&quot;dd&quot;&gt;6&lt;/span&gt;秒&lt;/div&gt;</div><div class="line">    &lt;!--设置时间长一点，不然一直跳转很烦--&gt;</div><div class="line">    ![](aaa.png)</div><div class="line">    &lt;div class=&quot;id-box&quot;&gt;</div><div class="line">        &lt;div id=&quot;time&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;div id=&quot;date&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;p&gt;更多·更全·更好用&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>js倒计时代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">       function run()&#123;</div><div class="line">            var s = document.getElementById(&quot;dd&quot;);//获取dom，并获得数字</div><div class="line">            if(s.innerHTML == 1)&#123;// 当dom==0的时候，跳转链接并且暂停函数</div><div class="line">                window.location.href = &quot;https://www.baidu.com/index.php?tn=98012088_3_dg&amp;ch=1&quot;;</div><div class="line">                clearInterval(run());//暂停setInterval调用的run()函数</div><div class="line">            &#125;</div><div class="line">            s.innerHTML = s.innerHTML -1;//跑一秒减一个数字</div><div class="line">        &#125;</div><div class="line">        window.setInterval(&quot;run();&quot;, 1000);//调用时间函数， 一秒跑一次</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>上面基本上每一行都有<strong>注释</strong>，所以我就为不知道的朋友写点定义和自己的理解，知道的朋友也可以加深点印象。<br><strong>innerHTML</strong>定义和用法：<br>innerHTML 属性设置或返回表格行的开始和结束标签之间的 HTML。</p>
<p><strong>作用意思就是删除原来的样式，插入html的文字之类的</strong><br>(w3c解释：<a href="http://www.w3school.com.cn/jsref/prop_tablerow_innerhtml.asp" target="_blank" rel="external">http://www.w3school.com.cn/jsref/prop_tablerow_innerhtml.asp</a>)</p>
<p><strong>setInterval</strong>定义和用法<br>setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。<br>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。<br>(w3c解释：<a href="http://www.jb51.net/shouce/htmldom/jb51.net.htmldom/htmldom/met_win_setinterval.asp.html" target="_blank" rel="external">http://www.jb51.net/shouce/htmldom/jb51.net.htmldom/htmldom/met_win_setinterval.asp.html</a>)</p>
<p><strong>clearInterval</strong>定义和用法<br>clearInterval() 方法可取消由 setInterval() 设置的 timeout。（就是<strong>暂停的意思</strong>，这里是到了一秒就暂停住了，不再往下数了。）<br> clearInterval() 方法的参数必须是由 setInterval() 返回的 ID 值。（<strong>这里的ID值是run()</strong>相当于获取这个dom。）<br>(w3c解释：<a href="http://www.w3school.com.cn/jsref/met_win_clearinterval.asp" target="_blank" rel="external">http://www.w3school.com.cn/jsref/met_win_clearinterval.asp</a>)</p>
<p>ps：还有不懂的可以把我的demo复制到本地，自己演示一下。</p>
<p>html代码在上面。<br><strong>获取实时时间js代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">function checkTime(i)&#123;</div><div class="line">            if (i&lt;10)&#123;</div><div class="line">                i = &quot;0&quot; + i;</div><div class="line">                //    当数值小于10的时候，在i前面加个0字符串。</div><div class="line">            &#125;return i;</div><div class="line">        &#125;</div><div class="line">        function startTime()&#123;//onload事件</div><div class="line">            var today = new Date();</div><div class="line">            var y = today.getFullYear();</div><div class="line">            var month = today.getMonth();</div><div class="line">            //获取当前时间。get。</div><div class="line">            var d = today.getDate();</div><div class="line">            var h = today.getHours();</div><div class="line">            var m = today.getMinutes();</div><div class="line">            var s = today.getSeconds();</div><div class="line">            // add a zero in front of numbers&lt;10</div><div class="line">            month =checkTime(month+1);//因为月份是0-11月份,+1是把区间定在1-12月份，毕竟没有0月份，笑。</div><div class="line">            d = checkTime(d);</div><div class="line">            h =checkTime(h);</div><div class="line">            m =checkTime(m);</div><div class="line">            //将函数checkTime作用于时间变量，当变量小于10的时候将再变量前面加个字符串0</div><div class="line">            s =checkTime(s);</div><div class="line">            document.getElementById(&quot;time&quot;).innerHTML = h+&quot;:&quot;+m+&quot;:&quot;+s;//将实时时间结合字符串写出来。</div><div class="line">            document.getElementById(&quot;date&quot;).innerHTML = y+&quot;/&quot;+month+&quot;/&quot;+d;</div><div class="line">            t=setTimeout(&quot;startTime()&quot;,1000);//    每隔1000毫秒，再调用一下这个函数，刷新一下时间</div><div class="line">        &#125;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>这个比较简单，在w3c上面演化出来的。</p>
<p>w3cDate对象：<a href="http://www.w3school.com.cn/jsref/jsref_obj_date.asp" target="_blank" rel="external">http://www.w3school.com.cn/jsref/jsref_obj_date.asp</a></p>
<p> checkTime(i)：这里主要是符合我们看时间的习惯，比如18点05分。这里的0就是这个函数的”0”字符串。</p>
<p>onload事件：页面加载之后立即执行一段 JavaScript：</p>
<p><strong>核心思想就是：</strong>获取实时的时间，然后通过+操作符，把他们链接起来，并跟html关联，使其呈现出来。</p>
<p>其他的，在注释里面都介绍的很清楚了，不会的，自己写一个试试就知道了。</p>
<p><strong>demo链接：</strong><a href="https://obkoro1.github.io/article-demo/js-time/time-countDown.html" target="_blank" rel="external">https://obkoro1.github.io/article-demo/js-time/time-countDown.html</a></p>
<p>以上。</p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，想关注我这个菜鸡是如何成长的也可以关注一下我，基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：如果希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external">简书主页链接</a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a></strong></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js_demo </tag>
            
            <tag> 倒计时 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shuffle()方法、removeAttribute() 方法、split()方法]]></title>
      <url>/2017/10/11/shuffle-%E6%96%B9%E6%B3%95%E3%80%81removeAttribute-%E6%96%B9%E6%B3%95%E3%80%81split-%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong>内容包括demo代码，应用和定义，以及参考文献，本文主要内容是学习js期间学到的一些实用的零碎的js1知识，我都记下来了，需要的朋友可以过来参考下，前后可能没有太大的相关性。喜欢的可以点个赞，希望对大家有所帮助。<br><strong>Python shuffle()方法</strong><br><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shuffle (lst )</div></pre></td></tr></table></figure></p>
<p><strong>参数</strong><br>lst – 这可能是一个列表或元组。<br><strong>作用：</strong><br>打乱一个有序数组，最高效的数组乱序方法<br><strong>应用：</strong><br>打乱输出后，从头输出可用来输出随机数字。</p>
<p>这里有篇文章介绍数组乱序效率<a href="http://www.jb51.net/article/56099.htm" target="_blank" rel="external">http://www.jb51.net/article/56099.htm</a></p>
<p><strong>HTML DOM removeAttribute() 方法</strong><br><strong>定义和用法</strong><br> removeAttribute() 方法删除指定的属性（可用来清空设置的style属性）</p>
<p>语法<br>element.removeAttribute(attributename)<br><strong>效果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-25750b2c9fd07c2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码和效果"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-a6748685a3b14789.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><strong>demo(demo比较长，放在文末)</strong></p>
<p><strong>audio.pause引用JQury导致不能正常播放</strong>(引用音频，不能调用JQ的函数，否则会导致音频无法播放。)<br><strong>问题描述：</strong>之前调用JQ的$，来获取dom，然后下面的pause就显示没有定义，因为这里调用了JQ，JQ里面没有封装pause，导致pause没有定义。<br><strong>正确的代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//之前引入JQ，然后用$(&quot;music&quot;),会报错。因为pause没在JQ里面封装函数，不能调用JQ，所以要用getElementById(&quot;music&quot;);获取dom。</div><div class="line">var audio=document.getElementById(&quot;music&quot;);</div><div class="line">function runMusic() &#123;//这是一个点击事件</div><div class="line">    if (audio.paused)&#123;</div><div class="line">        audio.play();</div><div class="line">    &#125;else &#123;</div><div class="line">        audio.pause();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>split()方法</strong><br><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string.split(separator,limit)</div></pre></td></tr></table></figure></p>
<p><strong>参数</strong><br><strong>separator:</strong>可选。字符串或正则表达式，从该参数指定的地方分割 string Object。</p>
<p><strong>limit:</strong>可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>
<p><strong>用法：</strong>split() 方法用于把一个字符串分割成字符串数组。<br><strong>提示：</strong> 如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。<br><strong>注意：</strong> split() 方法不改变原始字符串。<br><strong>demo</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a =&quot;1,2,3,4,5,6&quot;//这是一个字符串变量，里面包含&quot;1,2,3,4,5,6&quot;这个字符串。</div><div class="line">var B = a.split(&quot;,&quot;)//从逗号处分割成一个字符串，返回值是数组B=[1,2,3,4,5,6];</div></pre></td></tr></table></figure></p>
<p><strong>后话：</strong>这次就先记这三个，还有一些没记，以后再记。（下面有removeAttribute() 方法的demo*）</p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，想关注我这个菜鸡是如何成长的也可以关注一下我，基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：如果希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external">简书主页链接</a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a></strong></p>
<p><strong>removeAttribute() 方法,demo</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; Content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">&lt;title&gt;javascript&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">body&#123;font-size:12px;&#125;</div><div class="line">#txt&#123;</div><div class="line">    height:400px;</div><div class="line">    width:600px;</div><div class="line">	border:#333 solid 1px;</div><div class="line">	padding:5px;&#125;</div><div class="line">p&#123;</div><div class="line">	line-height:18px;</div><div class="line">	text-indent:2em;&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;h2 id=&quot;con&quot;&gt;JavaScript课程&lt;/H2&gt;</div><div class="line">  &lt;div id=&quot;txt&quot;&gt;</div><div class="line">     &lt;h5&gt;JavaScript为网页添加动态效果并实现与用户交互的功能。&lt;/h5&gt;</div><div class="line">        &lt;p&gt;1. JavaScript入门篇，让不懂JS的你，快速了解JS。&lt;/p&gt;</div><div class="line">        &lt;p&gt;2. JavaScript进阶篇，让你掌握JS的基础语法、函数、数组、事件、内置对象、BOM浏览器、DOM操作。&lt;/p&gt;</div><div class="line">        &lt;p&gt;3. 学完以上两门基础课后，在深入学习JavaScript的变量作用域、事件、对象、运动、cookie、正则表达式、ajax等课程。&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;form&gt;</div><div class="line">  &lt;!--当点击相应按钮，执行相应操作，为按钮添加相应事件--&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;改变颜色&quot; onclick=&quot;color()&quot; /&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;改变宽高&quot;  onclick=&quot;widthHeight()&quot;/&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;隐藏内容&quot;  onclick=&quot;cantent()&quot;/&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;显示内容&quot;  onclick =&quot;block()&quot;/&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;取消设置&quot; onclick=&quot;recover()&quot; &gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">//定义&quot;改变颜色&quot;的函数</div><div class="line">var cantent_box = document.getElementById(&quot;txt&quot;);</div><div class="line">function color()&#123;</div><div class="line">    cantent_box.style.color = &quot;red&quot;;</div><div class="line">    cantent_box.style.backgroundColor = &quot;blue&quot;;</div><div class="line">&#125;</div><div class="line">function widthHeight()&#123;</div><div class="line">    cantent_box.style.width =&quot;100px&quot;;</div><div class="line">    cantent_box.style.height =&quot;600px&quot;;</div><div class="line">&#125;</div><div class="line">function cantent()&#123;</div><div class="line">    cantent_box.style.display =&quot;none&quot;;</div><div class="line">&#125;</div><div class="line">//定义&quot;改变宽高&quot;的函数</div><div class="line">//定义&quot;隐藏内容&quot;的函数</div><div class="line">function block()&#123;</div><div class="line">    cantent_box.style.display = &quot;block&quot;;</div><div class="line">&#125;</div><div class="line">//定义&quot;显示内容&quot;的函数</div><div class="line">function recover()</div><div class="line">    &#123;var open=confirm(&quot;是否取消设置&quot;);</div><div class="line">    if(open==true)</div><div class="line">    &#123;</div><div class="line">       txt.removeAttribute(&quot;style&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//定义&quot;取消设置&quot;的函数</div><div class="line"></div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shuffle </tag>
            
            <tag> removeAttribute </tag>
            
            <tag> split </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[indexOf和push（）获得不重复随机数组]]></title>
      <url>/2017/10/11/indexOf%E5%92%8Cpush%EF%BC%88%EF%BC%89%E8%8E%B7%E5%BE%97%E4%B8%8D%E9%87%8D%E5%A4%8D%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong>整体思路：先random()获取随机数，indexOf()排除相同的随机数，push()将不重复随机数添加到数组。其实一直想写这篇已经很久了，因为之前做的一个东西还不完善，有bug。所以一直拖到现在。今天中午趁机做了个总结，需要的小伙伴可以看看，做个参考。</p>
<p>之前本来是一个很low的去重方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">先获得三个随机数，然后三个随机数分别互相比较，当出现相等的情况时，那个随机数再随机一次，然后返回那三个随机数。这个方法low在：每个数值都要比较一下，，数量少的时候，还可以写，数量多的时候，你一个个比一下试试看？</div></pre></td></tr></table></figure></p>
<p>  下面是新想的方法：<br><strong>先上效果：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-765fc9840f7e0be4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="随机获得三个box，color"><br> <strong>页面效果：</strong>每隔一秒换一下随机box和随机颜色，不间断运行。   （下面有链接）</p>
<p><strong>获取随机box，以及添加到数组里面的js代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var num=[];//box的随机数组</div><div class="line">var box_dom = document.getElementsByClassName(&quot;icon&quot;);//获得盒子的dom</div><div class="line">function whileRun()&#123;</div><div class="line">    num=[];//继续运行的时候清空数组，不然box不会变。</div><div class="line">    while (num.length&lt;3)&#123;</div><div class="line">        box_dom_num=Math.floor(Math.random()*9);</div><div class="line">        console.log(box_dom_num);</div><div class="line">        //随机的box赋值给box_dom_num.</div><div class="line">        if (num.indexOf(box_dom_num)&lt;0)&#123;//随机选择的box看有没有在原先已经添加的数组里面，如果没有，就添加进去，如果有，重新运行函数。</div><div class="line">            num.push(box_dom_num);// 将随机选择到的box添加到数组里面去。</div><div class="line">         &#125;</div><div class="line">        console.log(num);</div><div class="line">    &#125;</div><div class="line">    return num;//    跳出while循环再返回数组</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分解步骤：<br><strong>random()获取随机数：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box_dom_num=Math.floor(Math.random()*9);//获取盒子的随机数,下标从0开始，随机数范围0~8；</div></pre></td></tr></table></figure></p>
<p>上面这串代码的解释：盒子=随机获得0-1之间的数字*9然后进行下舍入获得的整数。<br>关于随机数生成这里还不太懂的同学，<a href="http://www.jianshu.com/p/759546b24c5b" target="_blank" rel="external">http://www.jianshu.com/p/759546b24c5b</a>  移步这里。</p>
<p><strong>indexOf()排除相同的随机数</strong><br>首先需要知道的是<strong>indexOf()</strong>这个方法是什么，及其作用。</p>
<p><strong>w3c定义和用法</strong>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</p>
<p>从这里看不出有什么跟获取随机数有什么关联的地方，但是下面的一句注释，就可以和随机数关联起来：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-cdc714665e9d4717.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>这是代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (num.indexOf(box_dom_num)&lt;0)&#123;//随机选择的box看有没有在原先已经添加的数组里面，如果没有，就添加进去，如果有，重新运行函数。</div><div class="line">           num.push(box_dom_num);// 将随机选择到的box添加到数组里面去。</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>解释：检索num这个数组里面，之前<strong>有没有出现</strong>box_bom_num。如果没有出现的话（就是不重复了）,那么 (num.indexOf(box_dom_num)就会&lt;0，然后执行下面的内容。</p>
<p><strong>push()将不重复随机数添加到数组</strong><br>push()定义和用法：<br>push() 方法可向数组的末尾<strong>添加</strong>一个或多个元素，并返回新的长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">num.push(box_dom_num);// 将随机选择到的box添加到数组里面去。</div></pre></td></tr></table></figure></p>
<p>解释：上面已经将box_dom_num去除重复随机数了，直接添加就可以。</p>
<p>然后：继续while循环，直到num.length&lt;3的时候，返回已经<strong>去完重复随机数</strong>的num数组。</p>
<p>链接放上来，可以自己看<strong>源码</strong>：<a href="https://obkoro1.github.io/jnshu/js-task/task1/js1.html" target="_blank" rel="external">https://obkoro1.github.io/jnshu/js-task/task1/js1.html</a></p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，想关注我这个菜鸡是如何成长的也可以关注一下我，基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：如果希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external">简书主页链接</a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a></strong></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> indexOf数组去重 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js函数常见的写法以及调用方法]]></title>
      <url>/2017/10/11/js%E5%87%BD%E6%95%B0%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%99%E6%B3%95%E4%BB%A5%E5%8F%8A%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong>本文详细的介绍了5种js函数常见的写法以及调用的方法，平时看别人代码的时候总是看到各种不同风格的js函数的写法。不明不白的，找了点资料，做了个总结，需要的小伙伴可以看看，做个参考。<br><strong>1.常规写法</strong>（最常见的那种）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//函数的写法</div><div class="line">function run () &#123;</div><div class="line">        alert(&apos;常规写法&apos;);//这里是你函数的内容</div><div class="line">    &#125;</div><div class="line"> // 调用</div><div class="line">    run();</div></pre></td></tr></table></figure></p>
<p><strong>2.匿名函数写法</strong>（可以想成给变量赋值一个函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   // 匿名函数的写法</div><div class="line">var run = function()&#123;</div><div class="line">        alert(&apos;这是一种声明函数的方式，左边是一个变量，右边是一个函数的表达式，意思就是把一个匿名的函数表达式赋值给了变量myfun，只是声明了一个变量指向了一个函数对象。&apos;);//这里是你函数的内容</div><div class="line">    &#125;</div><div class="line">  // 调用</div><div class="line">    run();</div></pre></td></tr></table></figure></p>
<p><strong>3.将方法作为一个对象</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">　// 作为对象方法，函数写法，这里创建了两个函数外面用&#123;&#125;包裹起来</div><div class="line">    var Test = &#123;</div><div class="line">run1:function()&#123;</div><div class="line">  alert(&apos;这个必须放在一个对象内部，放在外边会出错！&apos;);//这里是你函数的内容</div><div class="line">&#125;</div><div class="line">,run2:function()&#123;</div><div class="line">  alert(&apos;这个必须放在一个对象内部，放在外边会出错！&apos;);//这里是你函数的内容</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//调用</div><div class="line">Test.run1();//调用第1个函数</div><div class="line">Test.run2();//调用第2个函数</div></pre></td></tr></table></figure></p>
<p><strong>4.构造函数中给对象添加方法 </strong><br>javascript中的每个对象都有prototype属性，Javascript中对象的prototype属性的解释是：返回对象类型原型的引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 给对象添加方法</div><div class="line">    var funName = function()&#123;&#125;;</div><div class="line">  funName.prototype.way = function()&#123;</div><div class="line">        alert(&apos;这是在funName函数上的原始对象上加了一个way方法，构造函数中用到&apos;);</div><div class="line">    &#125;</div><div class="line">    // 调用</div><div class="line">    var funname = new text();// 创建对象</div><div class="line">    funname.way();//调用对象属性</div></pre></td></tr></table></figure></p>
<p><strong>5.自执行函数</strong><br>js自执行函数查到了几种不同写法，放上来给大家看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//方法1：最前最后加括号</div><div class="line">(</div><div class="line">function()&#123;alert(1);&#125;()</div><div class="line">);</div><div class="line">/*这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。</div><div class="line">例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。 */</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//方法2：function外面加括号</div><div class="line">(function()&#123;alert(1);&#125;)();</div><div class="line">//这种做法比方法1少了一个代码整体性的好处。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//方法3：function前面加运算符，常见的是!与void 。</div><div class="line">!function()&#123;alert(1);&#125;();</div><div class="line">void function()&#123;alert(2);&#125;();</div><div class="line">/*显然，加上“!”或“+”等运算符，写起来是最简单的。</div><div class="line">加上“void ”要敲五下键盘，但是听说有一个好处是，比加&quot;!&quot;少一次逻辑运算。----我只是听说，不明所以。*/</div></pre></td></tr></table></figure>
<p><strong>以上。</strong><br>参考：1.<a href="http://www.jb51.net/article/31078.htm" target="_blank" rel="external">http://www.jb51.net/article/31078.htm</a><br>2.<a href="http://www.cnblogs.com/Imever/p/4777985.html" target="_blank" rel="external">http://www.cnblogs.com/Imever/p/4777985.html</a><br><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，想关注我这个菜鸡是如何成长的也可以关注一下我，基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。然后<a href="https://github.com/OBKoro1?tab=following" target="_blank" rel="external">github</a>也互相加个star。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：如果希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external">简书主页链接</a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a></strong></p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html不随放大缩小而变形——initial-scale]]></title>
      <url>/2017/10/11/html%E4%B8%8D%E9%9A%8F%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E8%80%8C%E5%8F%98%E5%BD%A2%E2%80%94%E2%80%94initial-scale/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong>很惭愧我都在做jq了，关于手机端页面变形，直到今天早上才知道问题出在哪里？之前写了好多css页面用谷歌的F12查看手机端的页面，效果如下面的图，然后我一直以为我电脑的谷歌F12出问题了，直到今天在启宸师兄的帮助下才明白。下面进入正文：<br>一直以为是谷歌F12出问题了，查了好多相关的资料还是没查到，然后今天回过头来修改之前页面的问题，然后看到head头部，就觉得可能是initial-scale出的问题，抱着死马当活马医的心态改了一下meta标签的内容。<br><strong>修改initial-scale之前页面的效果：</strong><br><img src="http://upload-images.jianshu.io/upload_images/5245297-719c2938ed166144.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-d582801f57231a4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>之前meta标签的用法(这是错的)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta charset=&quot;utf-8&quot; name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>width=device-width ：表示宽度是设备屏幕的宽度<br>initial-scale=1.0：表示初始的缩放比例<br>minimum-scale=0.5：表示最小的缩放比例<br>maximum-scale=2.0：表示最大的缩放比例<br>user-scalable=yes：表示用户是否可以调整缩放比例</p>
<p>如果是想要一打开网页，自动以原始比例显示，并且不允许用户修改的话，则是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta charset=&quot;utf-8&quot; name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>ps：将比例都改为1,即可。<br><strong>修改initial-scale之后页面的效果：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-73c38ed791c2368b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-9696fc7bed13a8b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><strong>后话：</strong>实际上我一直知道这个标签的意思，但没往这方面去想。这个坑，我纠结了好久，单纯的写出来分享一下，希望可以帮助到需要的朋友。</p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，想关注我这个菜鸡是如何成长的也可以关注一下我，基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。然后<a href="https://github.com/OBKoro1?tab=following" target="_blank" rel="external">github</a>也互相加个star。码字不易，感谢支持，感激不尽！<br><strong>ps</strong>：如果希望我写哪方面的文章可以在底下评论，或者是私信我，虽然写的不好，但我就当这是记录自己成长的一种方式咯。（前提是我会了，如果不会我也会记下来，等会了的时候再更出来。）<br><a href="http://www.jianshu.com/u/8d1dd8c80f06" target="_blank" rel="external">简书主页链接</a>，<strong><a href="http://blog.csdn.net/OBKoro1?skin=dark1" target="_blank" rel="external">csdn博客主页链接</a></strong></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[纵向排列文字以及禁止文字选中]]></title>
      <url>/2017/10/11/%E7%BA%B5%E5%90%91%E6%8E%92%E5%88%97%E6%96%87%E5%AD%97%E4%BB%A5%E5%8F%8A%E7%A6%81%E6%AD%A2%E6%96%87%E5%AD%97%E9%80%89%E4%B8%AD-1/</url>
      <content type="html"><![CDATA[<p>写在前面：内容包括demo代码，应用和定义，以及参考文献，本文主要内容是本人学习过程中遇到css的零碎知识点1（就是以前自己不知道的），我都记下来了，需要的朋友可以过来参考下，喜欢的可以点个赞，希望对大家有所帮助。</p>
<p>writing-mode: tb-rl; （纵向排列文字）<br>应用：<br><img src="http://upload-images.jianshu.io/upload_images/5245297-9676b23976005eb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>说明：<br>设置或检索对象的内容块固有的书写方向。西方语言一般都是 lr-tb 的书写方式，但是亚洲语言 lr-tb | tb-rl 的书写方式都有。<br>作为IE的私有属性之一，IE5.5率先实现了 writing-mode ，后期被w3c采纳成标准属性；<br>此属性效果不能被累加使用。例如，父对象的此属性值设为 tb-rl ，子对象再设置该属性将不起作用，仍应用父对象的设置。<br>对应的脚本特性为writingMode。</p>
<p>demo代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot; name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes&quot;/&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;</div><div class="line">    &lt;title&gt;demo&lt;/title&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">        .verticle-mode &#123;</div><div class="line">            writing-mode: tb-rl;</div><div class="line">            -webkit-writing-mode: vertical-rl;</div><div class="line">            writing-mode: vertical-rl;</div><div class="line">        &#125;</div><div class="line">        /* IE7比较弱，需要做点额外的动作 */</div><div class="line">        .verticle-mode &#123;</div><div class="line">            *width: 120px;</div><div class="line">        &#125;</div><div class="line">        .verticle-mode h4,</div><div class="line">        .verticle-mode p &#123;</div><div class="line">            *display: inline;</div><div class="line">            *writing-mode: tb-rl;</div><div class="line">        &#125;</div><div class="line">        .verticle-mode h4 &#123;</div><div class="line">            *float:rightright;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;verticle-mode&quot;&gt;</div><div class="line">    &lt;h4&gt;咏柳&lt;/h4&gt;</div><div class="line">    &lt;p&gt;碧玉妆成一树高，&lt;br&gt;万条垂下绿丝绦。&lt;br&gt;不知细叶谁裁出，&lt;br&gt;二月春风似剪刀。&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>还有一种解决方法是设置div的宽度小一点，字会被挤下去，但是我个人不喜欢这种处理方式，觉得low。<br>想要再深入了解的童鞋，可以点这边：<br>张鑫旭大神的文章：改变CSS世界纵横规则的writing-mode属性，<a href="http://www.zhangxinxu.com/wordpress/2016/04/css-writing-mode/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/2016/04/css-writing-mode/</a><br>css3参考手册：<a href="http://www.css88.com/book/css/properties/writing-modes/writing-mode.htm" target="_blank" rel="external">http://www.css88.com/book/css/properties/writing-modes/writing-mode.htm</a></p>
<p>user-select: none; （禁止文字选中）<br>说明：<br>设置或检索是否允许用户选中文本。</p>
<p>应用（点击按钮，点快的时候文字会被选中，很丑，）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-c29cf9be9d6947ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>现象需求：html中可能有些地方不想让用户复制文字，或是用a标签做了个点击按钮，点快的时候文字会被选中，很丑，这个时候可以使用下面的方案禁止文字选中。</p>
<p>user-select取值：<br>none：文本不能被选择<br>text：可以选择文本<br>all：当所有内容作为一个整体时可以被选择。如果双击或者在上下文上点击子元素，那么被选择的部分将是以该子元素向上回溯的最高祖先元素。<br>element：可以选择文本，但选择范围受元素边界的约束<br>（css3参考手册：<a href="http://www.css88.com/book/css/properties/user-interface/user-select.htm）" target="_blank" rel="external">http://www.css88.com/book/css/properties/user-interface/user-select.htm）</a></p>
<p>兼容：不同的浏览器设置的内容不一样，user-select不是一个W3C的标准，浏览器的支持不完成，需要对不同的浏览器进行调整。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line"></div><div class="line">-moz-user-select:none;/*火狐*/</div><div class="line"></div><div class="line">-webkit-user-select:none;/*webkit浏览器*/</div><div class="line"></div><div class="line">-ms-user-select:none;/*IE10*/</div><div class="line"></div><div class="line">-khtml-user-select:none;/*早期浏览器*/</div><div class="line"></div><div class="line">user-select:none;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>demo代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">&lt;title&gt;user-select_CSS参考手册_web前端开发参考手册系列&lt;/title&gt;</div><div class="line">&lt;meta name=&quot;author&quot; content=&quot;Joy Du(飘零雾雨), dooyoe@gmail.com, www.doyoe.com&quot; /&gt;</div><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.test&#123;padding:10px;-webkit-user-select:none;-moz-user-select:none;-o-user-select:none;user-select:none;background:#eee;&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;test&quot; onselectstart=&quot;return false;&quot; unselectable=&quot;on&quot;&gt;选择我试试，你会发现怎么也选择不到我，哈哈哈哈&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>注意：IE6-9不支持该属性，但支持使用标签属性 onselectstart=”return false;” 来达到 user-select:none 的效果；Safari和Chrome也支持该标签属性；<br>直到Opera12.5仍然不支持该属性，但和IE6-9一样，也支持使用私有的标签属性 unselectable=”on” 来达到 user-select:none 的效果；unselectable 的另一个值是 off；<br>除Chrome和Safari外，在其它浏览器中，如果将文本设置为 -ms-user-select:none;，则用户将无法在该文本块中开始选择文本。不过，如果用户在页面的其他区域开始选择文本，则用户仍然可以继续选择将文本设置为 -ms-user-select:none; 的区域文本；<br>对应的脚本特性为userSelect。</p>
<p>参考文献：1.<a href="http://www.css88.com/book/css/properties/user-interface/user-select.htm" target="_blank" rel="external">http://www.css88.com/book/css/properties/user-interface/user-select.htm</a><br>2.<a href="http://www.cnblogs.com/codebook/p/5924073.html" target="_blank" rel="external">http://www.cnblogs.com/codebook/p/5924073.html</a><br><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，想关注我这个菜鸡是如何成长的也可以关注一下我，基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。然后<a href="https://github.com/OBKoro1?tab=following" target="_blank" rel="external">github</a>也互相加个star。码字不易，感谢支持，感激不尽！</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内容滚动条和子div高度自适应]]></title>
      <url>/2017/10/11/%E5%86%85%E5%AE%B9%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%92%8C%E5%AD%90div%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94/</url>
      <content type="html"><![CDATA[<p>写在前面：老套路有图有真相，这才叫做分享。本文内容是：一个div里面，两个子div高度自适应（平分父div的高度）和元素内容过多的时候，根据需求出现高度滚动条或者宽度滚动条。</p>
<p>先放最终效果（在下面会有demo代码。）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-afbbb44066dd7c94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>实现这些效果要怎么做呢？咱一步一步来。</p>
<p>第一步：</p>
<p>先设置html结构：这里我已经搭好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">    &lt;div class=&quot;box1&quot;&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;!--&lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;--&gt;</div><div class="line">        &lt;!--&lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;--&gt;</div><div class="line">        &lt;!--&lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;--&gt;</div><div class="line">        &lt;!--&lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;--&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;box2&quot;&gt;</div><div class="line">        &lt;span&gt;填充填充&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>第二步然后开始写css样式了（我会把踩坑经历放上去，所以不要一步一步走，看效果）：</p>
<p>设置父元素box的样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">          margin: 0 auto;</div><div class="line">          width: 40%;</div><div class="line">          background: #ccc;</div><div class="line">          height: 15rem;</div><div class="line">          border: 5px solid red; /*为了区分各个box界限*/</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>设置box1的样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box1&#123;</div><div class="line">            min-height: 3rem;</div><div class="line">            max-height: 13rem;</div><div class="line">            background: coral;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>现在界面是这样子的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-50eb79a5c1a11982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>现在尝试把html解除注释：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-b92322728420ee2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>然后浏览器里面变成这样了。。。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-56f5182d46a41d3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>excuse me？？？说好的滚动条呢？说好的自适应呢？</p>
<p>下面就到了关键的部分了（文章末尾有demo，不想看的话，可以自己试试。）：</p>
<p>在上面我们已经设置了最大高度和最小高度，因为box1空间不够所以溢出来了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-41707ab6f5d8ea6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>overflow属性大家去看下，<a href="http://www.w3school.com.cn/cssref/pr_pos_overflow.asp" target="_blank" rel="external">http://www.w3school.com.cn/cssref/pr_pos_overflow.asp</a><br>知道你们不会去看，所以我又放图片了。。。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-511618e3abb59bc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>所以对于这部分我们要隐藏起来。 加个overflow: hidden;变成。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-40588fbfc761809c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" "></p>
<p>大家也都注意到了overflow: scroll;这个属性，是的，我们加上去试试。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-8954ed3927fb04da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>滚动条是出来了，但是X轴的滚动条是什么鬼？<br>所以百度好久的答案，你们有福了！—————overflow-x: hidden;</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-83c6d190bcd5ef35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>然后我顺便查到上面的简写方式。<br>原来用overflow-x: hidden;overflow-y: auto;这两行代码就可以做到！<br>我刚才是这样子的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box1&#123;</div><div class="line">          min-height: 3rem;</div><div class="line">          overflow: hidden;</div><div class="line">          max-height: 13rem;</div><div class="line">          background: coral;</div><div class="line">          overflow: scroll;</div><div class="line">          overflow-x: hidden;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>最终的代码是这样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box1&#123;</div><div class="line">            min-height: 3rem;</div><div class="line">            max-height: 13rem;</div><div class="line">            background: coral;</div><div class="line">            overflow-x: hidden;</div><div class="line">            overflow-y: auto;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>好了今天的内容就到这里了。。等等，好像有什么不对的地方？<br>说好的div高度自适应呢？？<br>额。。。关于这个问题，我只有一个取巧的办法。<br>我先放两张图片：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-95bc8c9258b9b58b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-5af3a22c32a7b3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>ps：这样就算是自适应了吧？</p>
<p>现在的情况是这样子的：<br><img src="http://upload-images.jianshu.io/upload_images/5245297-8a0dd0f10f28e9b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>我把他们两个的背景颜色都改成一样的，再来看下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-693f95cdf1ffe68c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>这里也是，实际上，他的box就那么大。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5245297-04460e8aa189b859.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>写这篇花了一个半小时，主要是自己昨天才弄懂的，然后今天做demo 的时候又忘记怎么自适应div了，弄了老半天，然后用F12看昨天的代码才恍然大悟！（其实昨天没真懂，这会是真懂了），写的是真的累，码字不易，望且看且珍惜，给个喜欢吧。</p>
<p><strong>最后又到了观众朋友们最喜欢的求赞求关注环节：</strong>希望看完的朋友点个喜欢，想关注我这个菜鸡是如何成长的也可以关注一下我，基本上每个月都不会少于十五篇文章（看到干货我也会进行分享）。然后<a href="https://github.com/OBKoro1?tab=following" target="_blank" rel="external">github</a>也互相加个star。码字不易，感谢支持，感激不尽！</p>
<p>说好的demo，差点忘记，回来更新。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;div-height-roll-demo&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">      .box&#123;</div><div class="line">            margin: 0 auto;</div><div class="line">            width: 40%;</div><div class="line">            background: #ccc;</div><div class="line">            height: 25rem;</div><div class="line">            border: 5px solid red; /*为了区分各个box界限*/</div><div class="line">        &#125;</div><div class="line">        .box1&#123;</div><div class="line">            min-height: 3rem;</div><div class="line">            max-height: 13rem;</div><div class="line">            background: coral;</div><div class="line">            overflow-x: hidden;</div><div class="line">            overflow-y: auto;</div><div class="line">        &#125;</div><div class="line">        .box2&#123;</div><div class="line">            text-align: center;</div><div class="line">            border-top: 3px solid black;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class=&quot;box&quot;&gt;</div><div class="line">    &lt;div class=&quot;box1&quot;&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line">        &lt;span&gt;填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充填充&lt;/span&gt;</div><div class="line"></div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;box2&quot;&gt;</div><div class="line">        &lt;span&gt;填充填充&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
